'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * BaseTarget is one of fundamental blocks for flyouts and dropdowns.
 *
 * Parent Controller must pass state of the control and actions to delegate
 * control functionality.
 *
 * +----------------------+
 * | TargetControl        |
 * | +------------------+ |
 * | | Target           | |
 * | |                  | |
 * | +------------------+ |
 * | +------------------+ |
 * | | Container        | |
 * | | +--------------+ | |
 * | | | Children     | | |
 * | | +--------------+ | |
 * | +------------------+ |
 * +----------------------+
 */
var BaseTarget = function BaseTarget(props) {
  var toggleDropdown = props.toggleDropdown,
      open = props.open;

  return _react2.default.createElement(
    'div',
    { onClick: toggleDropdown },
    open ? 'opened' : 'closed'
  );
};

BaseTarget.propTypes = {
  /**
   * set open state of TargetControl to false
   */
  closeDropdown: _react.PropTypes.func.isRequired,

  /**
   * State of the Parent control regarding container.
   */
  open: _react.PropTypes.bool.isRequired,

  /**
   * set open state of TargetControl to true
   */
  openDropdown: _react.PropTypes.func.isRequired,

  /**
   * toggles open state of TargetControl
   */
  toggleDropdown: _react.PropTypes.func.isRequired
};

BaseTarget.displayName = 'BaseTarget';

var _default = BaseTarget;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(BaseTarget, 'BaseTarget', 'src/dropdowns/_targets/BaseTarget.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/dropdowns/_targets/BaseTarget.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kcm9wZG93bnMvX3RhcmdldHMvQmFzZVRhcmdldC5qc3giXSwibmFtZXMiOlsiQmFzZVRhcmdldCIsInByb3BzIiwidG9nZ2xlRHJvcGRvd24iLCJvcGVuIiwicHJvcFR5cGVzIiwiY2xvc2VEcm9wZG93biIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiYm9vbCIsIm9wZW5Ecm9wZG93biIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBLElBQU1BLGFBQWEsU0FBYkEsVUFBYSxDQUFDQyxLQUFELEVBQVc7QUFBQSxNQUUxQkMsY0FGMEIsR0FJeEJELEtBSndCLENBRTFCQyxjQUYwQjtBQUFBLE1BRzFCQyxJQUgwQixHQUl4QkYsS0FKd0IsQ0FHMUJFLElBSDBCOztBQUs1QixTQUNFO0FBQUE7QUFBQSxNQUFLLFNBQVNELGNBQWQ7QUFDSUMsV0FBTyxRQUFQLEdBQWtCO0FBRHRCLEdBREY7QUFLRCxDQVZEOztBQVlBSCxXQUFXSSxTQUFYLEdBQXVCO0FBQ3JCOzs7QUFHQUMsaUJBQWUsaUJBQVVDLElBQVYsQ0FBZUMsVUFKVDs7QUFNckI7OztBQUdBSixRQUFNLGlCQUFVSyxJQUFWLENBQWVELFVBVEE7O0FBV3JCOzs7QUFHQUUsZ0JBQWMsaUJBQVVILElBQVYsQ0FBZUMsVUFkUjs7QUFnQnJCOzs7QUFHQUwsa0JBQWdCLGlCQUFVSSxJQUFWLENBQWVDO0FBbkJWLENBQXZCOztBQXNCQVAsV0FBV1UsV0FBWCxHQUF5QixZQUF6Qjs7ZUFFZVYsVTs7Ozs7Ozs7O2dDQXBDVEEsVSIsImZpbGUiOiJCYXNlVGFyZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBCYXNlVGFyZ2V0IGlzIG9uZSBvZiBmdW5kYW1lbnRhbCBibG9ja3MgZm9yIGZseW91dHMgYW5kIGRyb3Bkb3ducy5cbiAqXG4gKiBQYXJlbnQgQ29udHJvbGxlciBtdXN0IHBhc3Mgc3RhdGUgb2YgdGhlIGNvbnRyb2wgYW5kIGFjdGlvbnMgdG8gZGVsZWdhdGVcbiAqIGNvbnRyb2wgZnVuY3Rpb25hbGl0eS5cbiAqXG4gKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIHwgVGFyZ2V0Q29udHJvbCAgICAgICAgfFxuICogfCArLS0tLS0tLS0tLS0tLS0tLS0tKyB8XG4gKiB8IHwgVGFyZ2V0ICAgICAgICAgICB8IHxcbiAqIHwgfCAgICAgICAgICAgICAgICAgIHwgfFxuICogfCArLS0tLS0tLS0tLS0tLS0tLS0tKyB8XG4gKiB8ICstLS0tLS0tLS0tLS0tLS0tLS0rIHxcbiAqIHwgfCBDb250YWluZXIgICAgICAgIHwgfFxuICogfCB8ICstLS0tLS0tLS0tLS0tLSsgfCB8XG4gKiB8IHwgfCBDaGlsZHJlbiAgICAgfCB8IHxcbiAqIHwgfCArLS0tLS0tLS0tLS0tLS0rIHwgfFxuICogfCArLS0tLS0tLS0tLS0tLS0tLS0tKyB8XG4gKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqL1xuY29uc3QgQmFzZVRhcmdldCA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgdG9nZ2xlRHJvcGRvd24sXG4gICAgb3BlbixcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgb25DbGljaz17dG9nZ2xlRHJvcGRvd259PlxuICAgICAgeyBvcGVuID8gJ29wZW5lZCcgOiAnY2xvc2VkJyB9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5CYXNlVGFyZ2V0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIHNldCBvcGVuIHN0YXRlIG9mIFRhcmdldENvbnRyb2wgdG8gZmFsc2VcbiAgICovXG4gIGNsb3NlRHJvcGRvd246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFN0YXRlIG9mIHRoZSBQYXJlbnQgY29udHJvbCByZWdhcmRpbmcgY29udGFpbmVyLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogc2V0IG9wZW4gc3RhdGUgb2YgVGFyZ2V0Q29udHJvbCB0byB0cnVlXG4gICAqL1xuICBvcGVuRHJvcGRvd246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIHRvZ2dsZXMgb3BlbiBzdGF0ZSBvZiBUYXJnZXRDb250cm9sXG4gICAqL1xuICB0b2dnbGVEcm9wZG93bjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbkJhc2VUYXJnZXQuZGlzcGxheU5hbWUgPSAnQmFzZVRhcmdldCc7XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VUYXJnZXQ7XG4iXX0=