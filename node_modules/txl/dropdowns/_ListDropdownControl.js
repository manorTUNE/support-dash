'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _desc, _value, _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _ReactUtils = require('../ReactUtils');

var _Base = require('../base/Base');

var _helpers = require('../styles/helpers');

var _type = require('../styles/mixins/type');

var _Container = require('../containers/Container');

var _Container2 = _interopRequireDefault(_Container);

var _FilteredItemsWrapper = require('../_selects/FilteredItemsWrapper');

var _FilteredItemsWrapper2 = _interopRequireDefault(_FilteredItemsWrapper);

var _GroupedBufferedListView = require('../lists/_GroupedBufferedListView');

var _GroupedBufferedListView2 = _interopRequireDefault(_GroupedBufferedListView);

var _createSubComponentRenderer = require('../utils/createSubComponentRenderer');

var _createSubComponentRenderer2 = _interopRequireDefault(_createSubComponentRenderer);

var _formatter = require('../utils/formatter');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var getDropdownContainerStyle = function getDropdownContainerStyle(props) {
  return (0, _extends3.default)({}, _type.DEFAULT_FONT_FAMILY, _type.TYPE_BASE, {
    position: 'relative',
    width: props.width
  });
};

function defaultPredicateGetter(_ref) {
  var search = _ref.search;

  var query = new RegExp((0, _formatter.escapeRegularExpression)(search), 'i');
  return function predicate(item) {
    return query.test(item.id) || query.test(item.value);
  };
}

function subComponentRenderer(instance, key) {
  return (0, _createSubComponentRenderer2.default)({
    instance: instance,
    key: key,
    propsGetter: instance._sharedProps
  });
}

function getSearchQuery(props) {
  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (props.search === undefined) {
    return state.search || '';
  }
  return props.search;
}

function getStateFromProps(props, state) {
  var items = props.items,
      showCreateNew = props.showCreateNew;


  var search = getSearchQuery(props, state);
  // If local filtering is disabled, return true for every item so it doesn't filter
  var predicate = props.enableLocalFiltering ? props.predicateGetter({ search: search }) : function () {
    return true;
  };
  var filteredItems = new _FilteredItemsWrapper2.default(items, predicate, search, showCreateNew);

  return {
    filteredItems: filteredItems,
    search: search
  };
}

/**
 * ListDropdownControl is responsible for creating dropdown using BufferedListView.
 *
 * Because of some of limitations (fixed / static heights) of BufferedListView,
 * this component is also responsible handling item filtering and grouping based on search query
 * and grouper function.
 *
 * At the moment, the component only implements filtering.
 *
 * ** This component MUST NOT BE pure rendered.
 */
var TxlListDropdownControl = (_class = function (_Component) {
  (0, _inherits3.default)(TxlListDropdownControl, _Component);

  function TxlListDropdownControl() {
    var _ref2;

    (0, _classCallCheck3.default)(this, TxlListDropdownControl);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref2 = TxlListDropdownControl.__proto__ || (0, _getPrototypeOf2.default)(TxlListDropdownControl)).call.apply(_ref2, [this].concat(args)));

    _this._renderTarget = subComponentRenderer(_this, 'target');
    _this._renderListHeader = subComponentRenderer(_this, 'listProps.header');
    _this._renderListFooter = subComponentRenderer(_this, 'listProps.footer');
    _this.state = getStateFromProps(_this.props);
    return _this;
  }

  (0, _createClass3.default)(TxlListDropdownControl, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (window) {
        window.addEventListener('click', this._handleWindowClick);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _isEqual2.default)(nextProps.items, this.props.items) || !(0, _isEqual2.default)(nextProps.search, this.props.search) || !(0, _isEqual2.default)(nextProps.predicateGetter, this.props.predicateGetter) || !(0, _isEqual2.default)(nextProps.showCreateNew, this.props.showCreateNew)) {
        var newState = getStateFromProps(nextProps, this.state);
        this.setState(newState);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (window) {
        window.removeEventListener('click', this._handleWindowClick);
      }
    }
  }, {
    key: 'getFilteredItems',
    value: function getFilteredItems() {
      return this.state.filteredItems;
    }
  }, {
    key: '_handleWindowClick',
    value: function _handleWindowClick(event) {
      var clickIsOutsideContent = this._isClickOutsideElement(event, this);
      var clickIsOutsideHeader = this._isClickOutsideElement(event, this._headerRef);
      var clickIsOutsideFooter = this._isClickOutsideElement(event, this._footerRef);

      if (clickIsOutsideContent && clickIsOutsideHeader && clickIsOutsideFooter) {
        this._handleClose();
      }
    }
  }, {
    key: '_isClickOutsideElement',
    value: function _isClickOutsideElement(clickEvent, elementRef) {
      var domNode = (0, _ReactUtils.findDOMNode)(elementRef);
      return domNode ? !domNode.contains(clickEvent.target) : true;
    }
  }, {
    key: '_closeDropdown',
    value: function _closeDropdown() {
      this._handleClose();
    }
  }, {
    key: '_openDropdown',
    value: function _openDropdown() {
      this.props.openDropdown();
    }
  }, {
    key: '_toggleDropdown',
    value: function _toggleDropdown() {
      var _props$open$open = this.props.open.open,
          open = _props$open$open === undefined ? false : _props$open$open;


      if (open) {
        this._handleClose();
      } else {
        this.props.openDropdown();
      }
    }
  }, {
    key: '_handleClose',
    value: function _handleClose() {
      if (this.props.open) {
        this._clearSearch(this.props.closeDropdown);
      }
    }
  }, {
    key: '_clearSearch',
    value: function _clearSearch(cb) {
      var newState = getStateFromProps(this.props, (0, _extends3.default)({}, this.state, {
        search: ''
      }));
      this.setState(newState, cb);
    }
  }, {
    key: '_updateSearch',
    value: function _updateSearch(_ref3, callback) {
      var _this2 = this;

      var value = _ref3.value;

      var state = getStateFromProps(this.props, (0, _extends3.default)({}, this.state, {
        search: value
      }));
      this.setState(state, function () {
        if (callback) {
          callback();
        }

        _this2.props.onSearchChange(value);
      });
    }
  }, {
    key: '_sharedProps',
    value: function _sharedProps() {
      var search = this.state.search;

      return {
        clearSearch: this._clearSearch,
        search: search,
        updateSearch: this._updateSearch
      };
    }
  }, {
    key: '_renderItem',
    value: function _renderItem() {
      var itemRenderer = this.props.itemRenderer;

      return function (itemProps) {
        var item = itemProps.item;

        return item && itemRenderer((0, _extends3.default)({}, itemProps));
      };
    }
  }, {
    key: '_handleHeaderRef',
    value: function _handleHeaderRef(ref) {
      this._headerRef = ref;
    }
  }, {
    key: '_handleFooterRef',
    value: function _handleFooterRef(ref) {
      this._footerRef = ref;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          activateItem = _props.activateItem,
          ContainerComponent = _props.container,
          grouper = _props.grouper,
          height = _props.height,
          itemHeight = _props.itemHeight,
          listProps = _props.listProps,
          loading = _props.loading,
          keySelectedItemClear = _props.keySelectedItemClear,
          keySelectedItemIndex = _props.keySelectedItemIndex,
          noContentView = _props.noContentView,
          open = _props.open,
          showSearchToViewMoreMessage = _props.showSearchToViewMoreMessage,
          target = _props.target,
          yOffset = _props.yOffset;
      var filteredItems = this.state.filteredItems;


      var targetProps = (0, _extends3.default)({}, this.props, this._sharedProps(), {
        closeDropdown: this._closeDropdown,
        open: open,
        openDropdown: this._openDropdown,
        toggleDropdown: this._toggleDropdown
      });

      var containerProps = {
        height: height,
        open: open,
        width: listProps.width,
        yOffset: yOffset
      };
      var dropdownContainerStyle = getDropdownContainerStyle(this.props);
      var header = listProps.header && _react2.default.cloneElement(listProps.header, { ref: this._handleHeaderRef });
      var footer = listProps.footer && _react2.default.cloneElement(listProps.footer, { ref: this._handleFooterRef });

      return _react2.default.createElement(
        'div',
        {
          'data-component': 'TxlDropdownControl',
          style: dropdownContainerStyle
        },
        target(targetProps),
        _react2.default.createElement(
          ContainerComponent,
          containerProps,
          _react2.default.createElement(
            _Container2.default,
            { layer: 2 },
            _react2.default.createElement(_GroupedBufferedListView2.default, {
              activateItem: activateItem,
              footer: footer,
              grouper: grouper,
              header: header,
              height: listProps.height,
              itemHeight: itemHeight,
              itemRenderer: this._renderItem(),
              items: filteredItems.getItems(),
              keySelectedItemClear: keySelectedItemClear,
              keySelectedItemIndex: keySelectedItemIndex,
              loading: loading,
              maxHeight: listProps.maxHeight,
              noContentView: noContentView,
              showSearchToViewMoreMessage: showSearchToViewMoreMessage
            })
          )
        )
      );
    }
  }]);
  return TxlListDropdownControl;
}(_react.Component), (_applyDecoratedDescriptor(_class.prototype, 'getFilteredItems', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'getFilteredItems'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleWindowClick', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleWindowClick'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_isClickOutsideElement', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_isClickOutsideElement'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_closeDropdown', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_closeDropdown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_openDropdown', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_openDropdown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_toggleDropdown', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_toggleDropdown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleClose', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleClose'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_clearSearch', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_clearSearch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_updateSearch', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_updateSearch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_sharedProps', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_sharedProps'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_renderItem', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_renderItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleHeaderRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleHeaderRef'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleFooterRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleFooterRef'), _class.prototype)), _class);


TxlListDropdownControl.propTypes = {
  activateItem: _react.PropTypes.func,
  closeDropdown: _react.PropTypes.func,
  container: _react.PropTypes.func.isRequired,
  enableLocalFiltering: _react.PropTypes.bool,
  grouper: _react.PropTypes.func,
  height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
  itemHeight: _react.PropTypes.number,
  itemRenderer: _react.PropTypes.func.isRequired,
  items: _react.PropTypes.array,
  keyMapper: _react.PropTypes.func.isRequired,
  keySelectedItemClear: _react.PropTypes.func,
  keySelectedItemIndex: _react.PropTypes.number,
  label: _react.PropTypes.string,
  listProps: _react.PropTypes.shape({
    footer: _GroupedBufferedListView2.default.propTypes.footer,
    header: _GroupedBufferedListView2.default.propTypes.header,
    height: _GroupedBufferedListView2.default.propTypes.height,
    maxHeight: _GroupedBufferedListView2.default.propTypes.maxHeight,
    width: _GroupedBufferedListView2.default.propTypes.width
  }),
  loading: _react.PropTypes.bool,
  noContentView: _GroupedBufferedListView2.default.propTypes.noContentView,
  onSearchChange: _react.PropTypes.func,
  open: _react.PropTypes.bool,
  openDropdown: _react.PropTypes.func,
  predicateGetter: _react.PropTypes.func,
  search: _react.PropTypes.string,
  secondaryText: _react.PropTypes.string,
  shouldInputWrap: _react.PropTypes.bool,
  showCreateNew: _react.PropTypes.bool,
  showSearchToViewMoreMessage: _GroupedBufferedListView2.default.propTypes.showSearchToViewMoreMessage,
  target: _react.PropTypes.func.isRequired,
  width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
  yOffset: _react.PropTypes.number
};

TxlListDropdownControl.displayName = 'TxlListDropdownControl';

TxlListDropdownControl.defaultProps = {
  enableLocalFiltering: true,
  itemHeight: (0, _helpers.gridUnitsRaw)(7),
  items: [],
  loading: false,
  onSearchChange: Function.prototype,
  predicateGetter: defaultPredicateGetter,
  showCreateNew: false
};

var _default = TxlListDropdownControl;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(getDropdownContainerStyle, 'getDropdownContainerStyle', 'src/dropdowns/_ListDropdownControl.jsx');

  __REACT_HOT_LOADER__.register(defaultPredicateGetter, 'defaultPredicateGetter', 'src/dropdowns/_ListDropdownControl.jsx');

  __REACT_HOT_LOADER__.register(subComponentRenderer, 'subComponentRenderer', 'src/dropdowns/_ListDropdownControl.jsx');

  __REACT_HOT_LOADER__.register(getSearchQuery, 'getSearchQuery', 'src/dropdowns/_ListDropdownControl.jsx');

  __REACT_HOT_LOADER__.register(getStateFromProps, 'getStateFromProps', 'src/dropdowns/_ListDropdownControl.jsx');

  __REACT_HOT_LOADER__.register(TxlListDropdownControl, 'TxlListDropdownControl', 'src/dropdowns/_ListDropdownControl.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/dropdowns/_ListDropdownControl.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,