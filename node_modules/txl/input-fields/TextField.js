'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _class, _desc, _value, _class2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _ReactUtils = require('../ReactUtils');

var _Base = require('../base/Base');

var _InputFieldBase = require('./_InputFieldBase');

var _InputFieldBase2 = _interopRequireDefault(_InputFieldBase);

var _InputFieldsPropTypes = require('./_InputFieldsPropTypes');

var _helpers = require('../styles/helpers');

var _type = require('../styles/mixins/type');

var _transitions = require('../styles/mixins/transitions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var BOTTOM_BORDER_WIDTH = '1px';

var DISABLED_INPUT_STYLES = {
  color: 'initial',
  cursor: 'not-allowed'
};

var WRAPPER_STYLES = (0, _extends3.default)({}, _type.DEFAULT_FONT_FAMILY);

var TEXTAREA_CONTAINER_STYLES = {
  flexGrow: 1,
  lineHeight: 0,
  minHeight: (0, _helpers.gridUnits)(7),
  position: 'relative'
};

var INPUT_STYLES = (0, _extends3.default)({}, _type.DEFAULT_FONT_FAMILY, _type.TYPE_BASE, {
  backgroundColor: 'transparent',
  border: 'none',
  boxSizing: 'border-box',
  flexBasis: '100%',
  flexGrow: 1,
  height: (0, _helpers.gridUnits)(7),
  lineHeight: (0, _helpers.gridUnits)(7),
  margin: '0 0 -' + BOTTOM_BORDER_WIDTH + ' 0',
  minWidth: 0, // for MS Edge
  outline: 'none',
  overflow: 'hidden',
  padding: 0,
  textIndent: 0
});

// @TODO: Fix padding to use a calculation instead of magic number
var MULTILINE_INPUT_STYLES = (0, _extends3.default)({}, INPUT_STYLES, _transitions.HEIGHT_TRANSITION, {
  lineHeight: (0, _helpers.gridUnits)(4),
  padding: '7.5px 0', // Simulate 35px line height at 20px line height
  resize: 'none',
  width: '100%'
});

var HIDDEN_MULTILINE_STYLES = (0, _extends3.default)({}, MULTILINE_INPUT_STYLES, {
  left: 0,
  opacity: 0,
  position: 'absolute',
  zIndex: -100
});

var TxlTextField = (0, _radium2.default)(_class = (_class2 = function (_React$Component) {
  (0, _inherits3.default)(TxlTextField, _React$Component);

  function TxlTextField() {
    var _ref;

    (0, _classCallCheck3.default)(this, TxlTextField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = TxlTextField.__proto__ || (0, _getPrototypeOf2.default)(TxlTextField)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      focused: false,
      multiLineHeight: (0, _helpers.gridUnits)(7) };
    return _this;
  }

  (0, _createClass3.default)(TxlTextField, [{
    key: 'select',
    value: function select() {
      (0, _ReactUtils.findDOMNode)(this.refs.input).select();
    }
  }, {
    key: 'focus',
    value: function focus() {
      (0, _ReactUtils.findDOMNode)(this.refs.input).focus();
    }
  }, {
    key: 'blur',
    value: function blur() {
      (0, _ReactUtils.findDOMNode)(this.refs.input).blur();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.multiLine) {
        this._resizeMultiLineInput();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.multiLine && this.props.value !== prevProps.value) {
        this._resizeMultiLineInput();
      }
    }
  }, {
    key: '_handleChange',
    value: function _handleChange(e) {
      this.props.onChange({
        value: e.target.value
      });
    }
  }, {
    key: '_handleFocus',
    value: function _handleFocus(e) {
      this.setState({ focused: true });
      this.props.onFocus({
        value: e.target.value
      });
    }
  }, {
    key: '_handleKeyPress',
    value: function _handleKeyPress(e) {
      var altKey = e.altKey,
          ctrlKey = e.ctrlKey,
          charCode = e.charCode,
          key = e.key,
          metaKey = e.metaKey,
          repeat = e.repeat,
          shiftKey = e.shiftKey;

      this.props.onKeyPress({
        altKey: altKey,
        charCode: charCode,
        ctrlKey: ctrlKey,
        key: key,
        metaKey: metaKey,
        repeat: repeat,
        shiftKey: shiftKey
      });
    }
  }, {
    key: '_handleBlur',
    value: function _handleBlur(e) {
      this.props.onBlur({
        value: e.target.value
      });
      this.setState({ focused: false });
    }
  }, {
    key: '_resizeMultiLineInput',
    value: function _resizeMultiLineInput() {
      // @TODO: Find a way to listen for and respond to resize
      // events on our hidden element instead of reading the
      // scrollHeight every time (which triggers a reflow):-(
      var inputHeight = (0, _ReactUtils.findDOMNode)(this.refs.multiLineSizer).scrollHeight;

      this.setState({
        multiLineHeight: inputHeight + 'px'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var focused = this.state.focused && !this.props.readOnly;

      var _props = this.props,
          _afterContent = _props._afterContent,
          _beforeContent = _props._beforeContent,
          label = _props.label,
          validationState = _props.validationState,
          multiLine = _props.multiLine,
          type = _props.type,
          value = _props.value,
          secondaryText = _props.secondaryText,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          required = _props.required,
          textAlign = _props.textAlign,
          otherProps = (0, _objectWithoutProperties3.default)(_props, ['_afterContent', '_beforeContent', 'label', 'validationState', 'multiLine', 'type', 'value', 'secondaryText', 'disabled', 'readOnly', 'required', 'textAlign']);


      var multiLineInputStyles = (0, _extends3.default)({}, MULTILINE_INPUT_STYLES, {
        height: this.state.multiLineHeight
      });

      var inputStyles = (0, _helpers.combineStyles)(multiLine ? multiLineInputStyles : INPUT_STYLES, disabled && DISABLED_INPUT_STYLES, textAlign && { textAlign: textAlign });

      var inputElement = void 0;

      var sharedProps = (0, _extends3.default)({}, otherProps, {
        disabled: disabled,
        onBlur: this._handleBlur,
        onChange: this._handleChange,
        onFocus: this._handleFocus,
        onKeyPress: this._handleKeyPress,
        readOnly: readOnly,
        ref: 'input',
        required: required,
        style: inputStyles,
        value: value
      });

      if (multiLine) {
        inputElement = _react2.default.createElement(
          'div',
          { style: TEXTAREA_CONTAINER_STYLES },
          _react2.default.createElement('textarea', sharedProps),
          _react2.default.createElement('textarea', {
            disabled: disabled,
            readOnly: readOnly,
            ref: 'multiLineSizer',
            style: HIDDEN_MULTILINE_STYLES,
            tabIndex: '-1',
            value: value
          })
        );
      } else {
        inputElement = _react2.default.createElement('input', (0, _extends3.default)({}, sharedProps, {
          required: required,
          type: type
        }));
      }

      return _react2.default.createElement(
        _InputFieldBase2.default,
        {
          'data-component': 'TxlTextField',
          _afterContent: _afterContent,
          _beforeContent: _beforeContent,
          disabled: disabled,
          focused: focused,
          label: label,
          readOnly: readOnly,
          required: required,
          secondaryText: secondaryText,
          style: WRAPPER_STYLES,
          validationState: validationState
        },
        inputElement
      );
    }
  }]);
  return TxlTextField;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class2.prototype, 'select', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'select'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'focus', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'focus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'blur', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'blur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'componentDidMount', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'componentDidMount'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'componentDidUpdate', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'componentDidUpdate'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleFocus', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleFocus'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleKeyPress', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleKeyPress'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleBlur', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleBlur'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_resizeMultiLineInput', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_resizeMultiLineInput'), _class2.prototype)), _class2)) || _class;

exports.default = TxlTextField;


TxlTextField.defaultProps = {
  disabled: false,
  onBlur: _Base.NOOP,
  onChange: _Base.NOOP,
  onFocus: _Base.NOOP,
  onKeyPress: _Base.NOOP,
  placeholder: 'Enter a value',
  readOnly: false,
  required: false,
  tabIndex: 0,
  type: 'text',
  validationState: 'base',
  value: ''
};

TxlTextField.propTypes = {
  _afterContent: _react.PropTypes.node,
  _beforeContent: _react.PropTypes.node,
  disabled: _react.PropTypes.bool,
  id: _react.PropTypes.string,
  label: _InputFieldBase2.default.propTypes.label,
  multiLine: _react.PropTypes.bool,
  onBlur: _react.PropTypes.func,
  onChange: _react.PropTypes.func.isRequired,
  onFocus: _react.PropTypes.func,
  onKeyPress: _react.PropTypes.func,
  placeholder: _react.PropTypes.string,
  readOnly: _react.PropTypes.bool,
  required: _react.PropTypes.bool,
  secondaryText: _react.PropTypes.node,
  tabIndex: _react.PropTypes.number,
  textAlign: _react.PropTypes.oneOf(['left', 'right', 'center', 'justify', 'start', 'end']),
  type: _react.PropTypes.oneOf(['email', 'number', 'password', 'search', 'tel', 'text']),
  validationState: _InputFieldsPropTypes.validationStateType,
  value: _react.PropTypes.string
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(BOTTOM_BORDER_WIDTH, 'BOTTOM_BORDER_WIDTH', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(DISABLED_INPUT_STYLES, 'DISABLED_INPUT_STYLES', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(WRAPPER_STYLES, 'WRAPPER_STYLES', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(TEXTAREA_CONTAINER_STYLES, 'TEXTAREA_CONTAINER_STYLES', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(INPUT_STYLES, 'INPUT_STYLES', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(MULTILINE_INPUT_STYLES, 'MULTILINE_INPUT_STYLES', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(HIDDEN_MULTILINE_STYLES, 'HIDDEN_MULTILINE_STYLES', 'src/input-fields/TextField.jsx');

  __REACT_HOT_LOADER__.register(TxlTextField, 'TxlTextField', 'src/input-fields/TextField.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,