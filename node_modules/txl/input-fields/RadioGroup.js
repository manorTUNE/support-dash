'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _Radio = require('./Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _WithLabel = require('./_WithLabel');

var _WithLabel2 = _interopRequireDefault(_WithLabel);

var _helpers = require('../styles/helpers');

var _list = require('../styles/mixins/list');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HORIZONTAL_SPACING = (0, _helpers.gridUnits)(6);

var LIST_STYLES = {
  base: (0, _extends3.default)({}, _list.UNSTYLED_LIST, {
    display: 'flex',
    flexWrap: 'wrap'
  }),
  horizontal: {
    flexDirection: 'row',
    marginLeft: '-' + HORIZONTAL_SPACING
  },
  vertical: {
    flexDirection: 'column'
  }
};

var ITEM_STYLES = {
  base: {
    alignItems: 'center',
    display: 'flex',
    marginBottom: (0, _helpers.gridUnits)(1),
    marginTop: (0, _helpers.gridUnits)(1)
  },
  horizontal: {
    marginLeft: HORIZONTAL_SPACING
  }
};

var TxlRadioGroup = function TxlRadioGroup(props) {
  var listStyle = (0, _helpers.combineStyles)(LIST_STYLES.base, LIST_STYLES[props.arrangement]);

  var listItemStyle = (0, _helpers.combineStyles)(ITEM_STYLES.base, props.arrangement === 'horizontal' ? ITEM_STYLES[props.arrangement] : {});

  return _react2.default.createElement(
    'section',
    { 'data-component': 'TxlRadioGroup' },
    _react2.default.createElement(
      'ul',
      {
        style: listStyle,
        'data-test-radio-group-list': true
      },
      props.items.map(function (item) {
        return _react2.default.createElement(
          'li',
          {
            style: listItemStyle,
            key: item.value
          },
          _react2.default.createElement(_Radio2.default, {
            disabled: item.disabled,
            id: item.id,
            labelText: item.labelText,
            name: props.name,
            checked: item.checked,
            onChange: props.onChange,
            tabIndex: props.tabIndex,
            value: item.value
          })
        );
      })
    )
  );
};

TxlRadioGroup.propTypes = {
  arrangement: _react2.default.PropTypes.oneOf(['horizontal', 'vertical']),
  items: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    // We will be passing these props to Radio so use the props
    // that we would like to expose from RadioGroup
    checked: _Radio2.default.propTypes.checked,
    disabled: _Radio2.default.propTypes.disabled,
    id: _Radio2.default.propTypes.id,
    labelText: _Radio2.default.propTypes.labelText,
    value: _Radio2.default.propTypes.value
  })).isRequired,
  labelText: _react2.default.PropTypes.string,
  name: _react2.default.PropTypes.string.isRequired,
  onChange: _react2.default.PropTypes.func.isRequired,
  secondaryText: _react2.default.PropTypes.string,
  tabIndex: _react2.default.PropTypes.number,
  validationState: _react2.default.PropTypes.oneOf(['base', 'error', 'warning', 'success'])
};

TxlRadioGroup.defaultProps = {
  arrangement: 'vertical',
  tabIndex: 0,
  validationState: 'base'
};

var _default = (0, _WithLabel2.default)({
  defaultPosition: 'top',
  padding: (0, _helpers.gridUnits)(1)
}, (0, _radium2.default)(TxlRadioGroup));

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(HORIZONTAL_SPACING, 'HORIZONTAL_SPACING', 'src/input-fields/RadioGroup.jsx');

  __REACT_HOT_LOADER__.register(LIST_STYLES, 'LIST_STYLES', 'src/input-fields/RadioGroup.jsx');

  __REACT_HOT_LOADER__.register(ITEM_STYLES, 'ITEM_STYLES', 'src/input-fields/RadioGroup.jsx');

  __REACT_HOT_LOADER__.register(TxlRadioGroup, 'TxlRadioGroup', 'src/input-fields/RadioGroup.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/input-fields/RadioGroup.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnB1dC1maWVsZHMvUmFkaW9Hcm91cC5qc3giXSwibmFtZXMiOlsiSE9SSVpPTlRBTF9TUEFDSU5HIiwiTElTVF9TVFlMRVMiLCJiYXNlIiwiZGlzcGxheSIsImZsZXhXcmFwIiwiaG9yaXpvbnRhbCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5MZWZ0IiwidmVydGljYWwiLCJJVEVNX1NUWUxFUyIsImFsaWduSXRlbXMiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJUeGxSYWRpb0dyb3VwIiwicHJvcHMiLCJsaXN0U3R5bGUiLCJhcnJhbmdlbWVudCIsImxpc3RJdGVtU3R5bGUiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJ2YWx1ZSIsImRpc2FibGVkIiwiaWQiLCJsYWJlbFRleHQiLCJuYW1lIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwidGFiSW5kZXgiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvbmVPZiIsImFycmF5T2YiLCJzaGFwZSIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJmdW5jIiwic2Vjb25kYXJ5VGV4dCIsIm51bWJlciIsInZhbGlkYXRpb25TdGF0ZSIsImRlZmF1bHRQcm9wcyIsImRlZmF1bHRQb3NpdGlvbiIsInBhZGRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUlBOzs7O0FBSUEsSUFBTUEscUJBQXFCLHdCQUFHLENBQUgsQ0FBM0I7O0FBRUEsSUFBTUMsY0FBYztBQUNsQkM7QUFFRUMsYUFBUyxNQUZYO0FBR0VDLGNBQVU7QUFIWixJQURrQjtBQU1sQkMsY0FBWTtBQUNWQyxtQkFBZSxLQURMO0FBRVZDLHNCQUFnQlA7QUFGTixHQU5NO0FBVWxCUSxZQUFVO0FBQ1JGLG1CQUFlO0FBRFA7QUFWUSxDQUFwQjs7QUFlQSxJQUFNRyxjQUFjO0FBQ2xCUCxRQUFNO0FBQ0pRLGdCQUFZLFFBRFI7QUFFSlAsYUFBUyxNQUZMO0FBR0pRLGtCQUFjLHdCQUFHLENBQUgsQ0FIVjtBQUlKQyxlQUFXLHdCQUFHLENBQUg7QUFKUCxHQURZO0FBT2xCUCxjQUFZO0FBQ1ZFLGdCQUFZUDtBQURGO0FBUE0sQ0FBcEI7O0FBWUEsSUFBTWEsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDQyxLQUFELEVBQVc7QUFDL0IsTUFBTUMsWUFBWSw0QkFDaEJkLFlBQVlDLElBREksRUFFaEJELFlBQVlhLE1BQU1FLFdBQWxCLENBRmdCLENBQWxCOztBQUtBLE1BQU1DLGdCQUFnQiw0QkFDcEJSLFlBQVlQLElBRFEsRUFFcEJZLE1BQU1FLFdBQU4sS0FBc0IsWUFBdEIsR0FBcUNQLFlBQVlLLE1BQU1FLFdBQWxCLENBQXJDLEdBQXNFLEVBRmxELENBQXRCOztBQUtBLFNBQ0U7QUFBQTtBQUFBLE1BQVMsa0JBQWUsZUFBeEI7QUFDRTtBQUFBO0FBQUE7QUFDRSxlQUFPRCxTQURUO0FBRUU7QUFGRjtBQUlHRCxZQUFNSSxLQUFOLENBQVlDLEdBQVosQ0FBZ0I7QUFBQSxlQUNmO0FBQUE7QUFBQTtBQUNFLG1CQUFPRixhQURUO0FBRUUsaUJBQUtHLEtBQUtDO0FBRlo7QUFJRTtBQUNFLHNCQUFVRCxLQUFLRSxRQURqQjtBQUVFLGdCQUFJRixLQUFLRyxFQUZYO0FBR0UsdUJBQVdILEtBQUtJLFNBSGxCO0FBSUUsa0JBQU1WLE1BQU1XLElBSmQ7QUFLRSxxQkFBU0wsS0FBS00sT0FMaEI7QUFNRSxzQkFBVVosTUFBTWEsUUFObEI7QUFPRSxzQkFBVWIsTUFBTWMsUUFQbEI7QUFRRSxtQkFBT1IsS0FBS0M7QUFSZDtBQUpGLFNBRGU7QUFBQSxPQUFoQjtBQUpIO0FBREYsR0FERjtBQTBCRCxDQXJDRDs7QUF1Q0FSLGNBQWNnQixTQUFkLEdBQTBCO0FBQ3hCYixlQUFhLGdCQUFNYyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQixDQUFDLFlBQUQsRUFBZSxVQUFmLENBQXRCLENBRFc7QUFFeEJiLFNBQU8sZ0JBQU1ZLFNBQU4sQ0FBZ0JFLE9BQWhCLENBQXdCLGdCQUFNRixTQUFOLENBQWdCRyxLQUFoQixDQUFzQjtBQUNuRDtBQUNBO0FBQ0FQLGFBQVMsZ0JBQU1HLFNBQU4sQ0FBZ0JILE9BSDBCO0FBSW5ESixjQUFVLGdCQUFNTyxTQUFOLENBQWdCUCxRQUp5QjtBQUtuREMsUUFBSSxnQkFBTU0sU0FBTixDQUFnQk4sRUFMK0I7QUFNbkRDLGVBQVcsZ0JBQU1LLFNBQU4sQ0FBZ0JMLFNBTndCO0FBT25ESCxXQUFPLGdCQUFNUSxTQUFOLENBQWdCUjtBQVA0QixHQUF0QixDQUF4QixFQVFIYSxVQVZvQjtBQVd4QlYsYUFBVyxnQkFBTU0sU0FBTixDQUFnQkssTUFYSDtBQVl4QlYsUUFBTSxnQkFBTUssU0FBTixDQUFnQkssTUFBaEIsQ0FBdUJELFVBWkw7QUFheEJQLFlBQVUsZ0JBQU1HLFNBQU4sQ0FBZ0JNLElBQWhCLENBQXFCRixVQWJQO0FBY3hCRyxpQkFBZSxnQkFBTVAsU0FBTixDQUFnQkssTUFkUDtBQWV4QlAsWUFBVSxnQkFBTUUsU0FBTixDQUFnQlEsTUFmRjtBQWdCeEJDLG1CQUFpQixnQkFBTVQsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0IsQ0FDckMsTUFEcUMsRUFFckMsT0FGcUMsRUFHckMsU0FIcUMsRUFJckMsU0FKcUMsQ0FBdEI7QUFoQk8sQ0FBMUI7O0FBd0JBbEIsY0FBYzJCLFlBQWQsR0FBNkI7QUFDM0J4QixlQUFhLFVBRGM7QUFFM0JZLFlBQVUsQ0FGaUI7QUFHM0JXLG1CQUFpQjtBQUhVLENBQTdCOztlQU1lLHlCQUFVO0FBQ3ZCRSxtQkFBaUIsS0FETTtBQUV2QkMsV0FBUyx3QkFBRyxDQUFIO0FBRmMsQ0FBVixFQUdaLHNCQUFPN0IsYUFBUCxDQUhZLEM7Ozs7Ozs7Ozs7Z0NBbEdUYixrQjs7Z0NBRUFDLFc7O2dDQWVBUSxXOztnQ0FZQUksYSIsImZpbGUiOiJSYWRpb0dyb3VwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IFJhZGlvIGZyb20gJy4vUmFkaW8nO1xuaW1wb3J0IFdpdGhMYWJlbCBmcm9tICcuL19XaXRoTGFiZWwnO1xuaW1wb3J0IHtcbiAgZ3JpZFVuaXRzIGFzIGd1LFxuICBjb21iaW5lU3R5bGVzLFxufSBmcm9tICcuLi9zdHlsZXMvaGVscGVycyc7XG5pbXBvcnQge1xuICBVTlNUWUxFRF9MSVNULFxufSBmcm9tICcuLi9zdHlsZXMvbWl4aW5zL2xpc3QnO1xuXG5jb25zdCBIT1JJWk9OVEFMX1NQQUNJTkcgPSBndSg2KTtcblxuY29uc3QgTElTVF9TVFlMRVMgPSB7XG4gIGJhc2U6IHtcbiAgICAuLi5VTlNUWUxFRF9MSVNULFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luTGVmdDogYC0ke0hPUklaT05UQUxfU1BBQ0lOR31gLFxuICB9LFxuICB2ZXJ0aWNhbDoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICB9LFxufTtcblxuY29uc3QgSVRFTV9TVFlMRVMgPSB7XG4gIGJhc2U6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgbWFyZ2luQm90dG9tOiBndSgxKSxcbiAgICBtYXJnaW5Ub3A6IGd1KDEpLFxuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgbWFyZ2luTGVmdDogSE9SSVpPTlRBTF9TUEFDSU5HLFxuICB9LFxufTtcblxuY29uc3QgVHhsUmFkaW9Hcm91cCA9IChwcm9wcykgPT4ge1xuICBjb25zdCBsaXN0U3R5bGUgPSBjb21iaW5lU3R5bGVzKFxuICAgIExJU1RfU1RZTEVTLmJhc2UsXG4gICAgTElTVF9TVFlMRVNbcHJvcHMuYXJyYW5nZW1lbnRdXG4gICk7XG5cbiAgY29uc3QgbGlzdEl0ZW1TdHlsZSA9IGNvbWJpbmVTdHlsZXMoXG4gICAgSVRFTV9TVFlMRVMuYmFzZSxcbiAgICBwcm9wcy5hcnJhbmdlbWVudCA9PT0gJ2hvcml6b250YWwnID8gSVRFTV9TVFlMRVNbcHJvcHMuYXJyYW5nZW1lbnRdIDoge31cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwiVHhsUmFkaW9Hcm91cFwiPlxuICAgICAgPHVsXG4gICAgICAgIHN0eWxlPXtsaXN0U3R5bGV9XG4gICAgICAgIGRhdGEtdGVzdC1yYWRpby1ncm91cC1saXN0XG4gICAgICA+XG4gICAgICAgIHtwcm9wcy5pdGVtcy5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICBzdHlsZT17bGlzdEl0ZW1TdHlsZX1cbiAgICAgICAgICAgIGtleT17aXRlbS52YWx1ZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UmFkaW9cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2l0ZW0uZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGlkPXtpdGVtLmlkfVxuICAgICAgICAgICAgICBsYWJlbFRleHQ9e2l0ZW0ubGFiZWxUZXh0fVxuICAgICAgICAgICAgICBuYW1lPXtwcm9wcy5uYW1lfVxuICAgICAgICAgICAgICBjaGVja2VkPXtpdGVtLmNoZWNrZWR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtwcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgdGFiSW5kZXg9e3Byb3BzLnRhYkluZGV4fVxuICAgICAgICAgICAgICB2YWx1ZT17aXRlbS52YWx1ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxuVHhsUmFkaW9Hcm91cC5wcm9wVHlwZXMgPSB7XG4gIGFycmFuZ2VtZW50OiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuICBpdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAvLyBXZSB3aWxsIGJlIHBhc3NpbmcgdGhlc2UgcHJvcHMgdG8gUmFkaW8gc28gdXNlIHRoZSBwcm9wc1xuICAgIC8vIHRoYXQgd2Ugd291bGQgbGlrZSB0byBleHBvc2UgZnJvbSBSYWRpb0dyb3VwXG4gICAgY2hlY2tlZDogUmFkaW8ucHJvcFR5cGVzLmNoZWNrZWQsXG4gICAgZGlzYWJsZWQ6IFJhZGlvLnByb3BUeXBlcy5kaXNhYmxlZCxcbiAgICBpZDogUmFkaW8ucHJvcFR5cGVzLmlkLFxuICAgIGxhYmVsVGV4dDogUmFkaW8ucHJvcFR5cGVzLmxhYmVsVGV4dCxcbiAgICB2YWx1ZTogUmFkaW8ucHJvcFR5cGVzLnZhbHVlLFxuICB9KSkuaXNSZXF1aXJlZCxcbiAgbGFiZWxUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICBuYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzZWNvbmRhcnlUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICB0YWJJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgdmFsaWRhdGlvblN0YXRlOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoW1xuICAgICdiYXNlJyxcbiAgICAnZXJyb3InLFxuICAgICd3YXJuaW5nJyxcbiAgICAnc3VjY2VzcycsXG4gIF0pLFxufTtcblxuVHhsUmFkaW9Hcm91cC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFycmFuZ2VtZW50OiAndmVydGljYWwnLFxuICB0YWJJbmRleDogMCxcbiAgdmFsaWRhdGlvblN0YXRlOiAnYmFzZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBXaXRoTGFiZWwoe1xuICBkZWZhdWx0UG9zaXRpb246ICd0b3AnLFxuICBwYWRkaW5nOiBndSgxKSxcbn0sIFJhZGl1bShUeGxSYWRpb0dyb3VwKSk7XG4iXX0=