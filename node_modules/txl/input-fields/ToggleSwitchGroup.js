'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _ToggleSwitch = require('./ToggleSwitch');

var _ToggleSwitch2 = _interopRequireDefault(_ToggleSwitch);

var _InputStyleHelpers = require('./_InputStyleHelpers');

var _helpers = require('../styles/helpers');

var _list = require('../styles/mixins/list');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ITEM_STYLES = (0, _extends3.default)({}, _list.UNSTYLED_LIST_ITEM, {
  marginBottom: (0, _helpers.gridUnits)(5)
});

var LABEL_CONTAINER_STYLES = {
  marginBottom: (0, _helpers.gridUnits)(2)
};

var TxlToggleSwitchGroup = function TxlToggleSwitchGroup(props) {
  var labelContent = void 0;
  if (props.labelText) {
    var secondaryTextContent = void 0;
    if (props.secondaryText) {
      secondaryTextContent = _react2.default.createElement(
        'div',
        {
          style: (0, _InputStyleHelpers.getSecondaryTextStyle)(props.validationState),
          'data-test-group-secondary-text': true
        },
        props.secondaryText
      );
    }
    labelContent = _react2.default.createElement(
      'header',
      { style: LABEL_CONTAINER_STYLES },
      _react2.default.createElement(
        'div',
        {
          style: _InputStyleHelpers.INPUT_GROUP_LABEL_STYLES,
          'data-test-group-label-text': true
        },
        props.labelText
      ),
      secondaryTextContent
    );
  }

  return _react2.default.createElement(
    'section',
    { 'data-component': 'TxlToggleSwitchGroup' },
    labelContent,
    _react2.default.createElement(
      'ul',
      { style: _list.UNSTYLED_LIST },
      props.items.map(function (item) {
        return _react2.default.createElement(
          'li',
          { style: ITEM_STYLES, key: item.name },
          _react2.default.createElement(_ToggleSwitch2.default, {
            disabled: item.disabled,
            id: item.id,
            labelPosition: props.labelPosition,
            labelText: item.labelText,
            loading: item.loading,
            name: item.name,
            on: item.on,
            onChange: props.onChange,
            tabIndex: props.tabIndex,
            secondaryText: item.secondaryText,
            validationState: item.validationState
          })
        );
      })
    )
  );
};

TxlToggleSwitchGroup.propTypes = {
  items: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    // We will be passing these props to ToggleSwitch so use whatever it expects
    disabled: _ToggleSwitch2.default.propTypes.disabled,
    labelText: _ToggleSwitch2.default.propTypes.labelText,
    name: _ToggleSwitch2.default.propTypes.name,
    on: _ToggleSwitch2.default.propTypes.on,
    secondaryText: _ToggleSwitch2.default.propTypes.secondaryText,
    validationState: _ToggleSwitch2.default.propTypes.validationState
  })).isRequired,
  labelPosition: _react2.default.PropTypes.oneOf(['left', 'right']),
  labelText: _react2.default.PropTypes.string,
  onChange: _react2.default.PropTypes.func.isRequired,
  secondaryText: _react2.default.PropTypes.string,
  tabIndex: _react2.default.PropTypes.number,
  validationState: _react2.default.PropTypes.oneOf(['base', 'error', 'warning', 'success'])
};

TxlToggleSwitchGroup.defaultProps = {
  labelPosition: 'left',
  tabIndex: 0,
  validationState: 'base'
};

var _default = (0, _radium2.default)(TxlToggleSwitchGroup);

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(ITEM_STYLES, 'ITEM_STYLES', 'src/input-fields/ToggleSwitchGroup.jsx');

  __REACT_HOT_LOADER__.register(LABEL_CONTAINER_STYLES, 'LABEL_CONTAINER_STYLES', 'src/input-fields/ToggleSwitchGroup.jsx');

  __REACT_HOT_LOADER__.register(TxlToggleSwitchGroup, 'TxlToggleSwitchGroup', 'src/input-fields/ToggleSwitchGroup.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/input-fields/ToggleSwitchGroup.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnB1dC1maWVsZHMvVG9nZ2xlU3dpdGNoR3JvdXAuanN4Il0sIm5hbWVzIjpbIklURU1fU1RZTEVTIiwibWFyZ2luQm90dG9tIiwiTEFCRUxfQ09OVEFJTkVSX1NUWUxFUyIsIlR4bFRvZ2dsZVN3aXRjaEdyb3VwIiwicHJvcHMiLCJsYWJlbENvbnRlbnQiLCJsYWJlbFRleHQiLCJzZWNvbmRhcnlUZXh0Q29udGVudCIsInNlY29uZGFyeVRleHQiLCJ2YWxpZGF0aW9uU3RhdGUiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJuYW1lIiwiZGlzYWJsZWQiLCJpZCIsImxhYmVsUG9zaXRpb24iLCJsb2FkaW5nIiwib24iLCJvbkNoYW5nZSIsInRhYkluZGV4IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsInNoYXBlIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwic3RyaW5nIiwiZnVuYyIsIm51bWJlciIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUlBOztBQUdBOzs7O0FBS0EsSUFBTUE7QUFFSkMsZ0JBQWMsd0JBQUcsQ0FBSDtBQUZWLEVBQU47O0FBS0EsSUFBTUMseUJBQXlCO0FBQzdCRCxnQkFBYyx3QkFBRyxDQUFIO0FBRGUsQ0FBL0I7O0FBSUEsSUFBTUUsdUJBQXVCLFNBQXZCQSxvQkFBdUIsQ0FBQ0MsS0FBRCxFQUFXO0FBQ3RDLE1BQUlDLHFCQUFKO0FBQ0EsTUFBSUQsTUFBTUUsU0FBVixFQUFxQjtBQUNuQixRQUFJQyw2QkFBSjtBQUNBLFFBQUlILE1BQU1JLGFBQVYsRUFBeUI7QUFDdkJELDZCQUNFO0FBQUE7QUFBQTtBQUNFLGlCQUFPLDhDQUFzQkgsTUFBTUssZUFBNUIsQ0FEVDtBQUVFO0FBRkY7QUFJR0wsY0FBTUk7QUFKVCxPQURGO0FBUUQ7QUFDREgsbUJBQ0U7QUFBQTtBQUFBLFFBQVEsT0FBT0gsc0JBQWY7QUFDRTtBQUFBO0FBQUE7QUFDRSw0REFERjtBQUVFO0FBRkY7QUFJR0UsY0FBTUU7QUFKVCxPQURGO0FBT0dDO0FBUEgsS0FERjtBQVdEOztBQUVELFNBQ0U7QUFBQTtBQUFBLE1BQVMsa0JBQWUsc0JBQXhCO0FBQ0dGLGdCQURIO0FBRUU7QUFBQTtBQUFBLFFBQUksMEJBQUo7QUFDR0QsWUFBTU0sS0FBTixDQUFZQyxHQUFaLENBQWdCO0FBQUEsZUFDZjtBQUFBO0FBQUEsWUFBSSxPQUFPWCxXQUFYLEVBQXdCLEtBQUtZLEtBQUtDLElBQWxDO0FBQ0U7QUFDRSxzQkFBVUQsS0FBS0UsUUFEakI7QUFFRSxnQkFBSUYsS0FBS0csRUFGWDtBQUdFLDJCQUFlWCxNQUFNWSxhQUh2QjtBQUlFLHVCQUFXSixLQUFLTixTQUpsQjtBQUtFLHFCQUFTTSxLQUFLSyxPQUxoQjtBQU1FLGtCQUFNTCxLQUFLQyxJQU5iO0FBT0UsZ0JBQUlELEtBQUtNLEVBUFg7QUFRRSxzQkFBVWQsTUFBTWUsUUFSbEI7QUFTRSxzQkFBVWYsTUFBTWdCLFFBVGxCO0FBVUUsMkJBQWVSLEtBQUtKLGFBVnRCO0FBV0UsNkJBQWlCSSxLQUFLSDtBQVh4QjtBQURGLFNBRGU7QUFBQSxPQUFoQjtBQURIO0FBRkYsR0FERjtBQXlCRCxDQXBERDs7QUFzREFOLHFCQUFxQmtCLFNBQXJCLEdBQWlDO0FBQy9CWCxTQUFPLGdCQUFNWSxTQUFOLENBQWdCQyxPQUFoQixDQUF3QixnQkFBTUQsU0FBTixDQUFnQkUsS0FBaEIsQ0FBc0I7QUFDbkQ7QUFDQVYsY0FBVSx1QkFBYU8sU0FBYixDQUF1QlAsUUFGa0I7QUFHbkRSLGVBQVcsdUJBQWFlLFNBQWIsQ0FBdUJmLFNBSGlCO0FBSW5ETyxVQUFNLHVCQUFhUSxTQUFiLENBQXVCUixJQUpzQjtBQUtuREssUUFBSSx1QkFBYUcsU0FBYixDQUF1QkgsRUFMd0I7QUFNbkRWLG1CQUFlLHVCQUFhYSxTQUFiLENBQXVCYixhQU5hO0FBT25EQyxxQkFBaUIsdUJBQWFZLFNBQWIsQ0FBdUJaO0FBUFcsR0FBdEIsQ0FBeEIsRUFRSGdCLFVBVDJCO0FBVS9CVCxpQkFBZSxnQkFBTU0sU0FBTixDQUFnQkksS0FBaEIsQ0FBc0IsQ0FDbkMsTUFEbUMsRUFFbkMsT0FGbUMsQ0FBdEIsQ0FWZ0I7QUFjL0JwQixhQUFXLGdCQUFNZ0IsU0FBTixDQUFnQkssTUFkSTtBQWUvQlIsWUFBVSxnQkFBTUcsU0FBTixDQUFnQk0sSUFBaEIsQ0FBcUJILFVBZkE7QUFnQi9CakIsaUJBQWUsZ0JBQU1jLFNBQU4sQ0FBZ0JLLE1BaEJBO0FBaUIvQlAsWUFBVSxnQkFBTUUsU0FBTixDQUFnQk8sTUFqQks7QUFrQi9CcEIsbUJBQWlCLGdCQUFNYSxTQUFOLENBQWdCSSxLQUFoQixDQUFzQixDQUNyQyxNQURxQyxFQUVyQyxPQUZxQyxFQUdyQyxTQUhxQyxFQUlyQyxTQUpxQyxDQUF0QjtBQWxCYyxDQUFqQzs7QUEwQkF2QixxQkFBcUIyQixZQUFyQixHQUFvQztBQUNsQ2QsaUJBQWUsTUFEbUI7QUFFbENJLFlBQVUsQ0FGd0I7QUFHbENYLG1CQUFpQjtBQUhpQixDQUFwQzs7ZUFNZSxzQkFBT04sb0JBQVAsQzs7Ozs7Ozs7OztnQ0EvRlRILFc7O2dDQUtBRSxzQjs7Z0NBSUFDLG9CIiwiZmlsZSI6IlRvZ2dsZVN3aXRjaEdyb3VwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tICcuL1RvZ2dsZVN3aXRjaCc7XG5pbXBvcnQge1xuICBnZXRTZWNvbmRhcnlUZXh0U3R5bGUsXG4gIElOUFVUX0dST1VQX0xBQkVMX1NUWUxFUyxcbn0gZnJvbSAnLi9fSW5wdXRTdHlsZUhlbHBlcnMnO1xuaW1wb3J0IHtcbiAgZ3JpZFVuaXRzIGFzIGd1LFxufSBmcm9tICcuLi9zdHlsZXMvaGVscGVycyc7XG5pbXBvcnQge1xuICBVTlNUWUxFRF9MSVNULFxuICBVTlNUWUxFRF9MSVNUX0lURU0sXG59IGZyb20gJy4uL3N0eWxlcy9taXhpbnMvbGlzdCc7XG5cbmNvbnN0IElURU1fU1RZTEVTID0ge1xuICAuLi5VTlNUWUxFRF9MSVNUX0lURU0sXG4gIG1hcmdpbkJvdHRvbTogZ3UoNSksXG59O1xuXG5jb25zdCBMQUJFTF9DT05UQUlORVJfU1RZTEVTID0ge1xuICBtYXJnaW5Cb3R0b206IGd1KDIpLFxufTtcblxuY29uc3QgVHhsVG9nZ2xlU3dpdGNoR3JvdXAgPSAocHJvcHMpID0+IHtcbiAgbGV0IGxhYmVsQ29udGVudDtcbiAgaWYgKHByb3BzLmxhYmVsVGV4dCkge1xuICAgIGxldCBzZWNvbmRhcnlUZXh0Q29udGVudDtcbiAgICBpZiAocHJvcHMuc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgc2Vjb25kYXJ5VGV4dENvbnRlbnQgPSAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17Z2V0U2Vjb25kYXJ5VGV4dFN0eWxlKHByb3BzLnZhbGlkYXRpb25TdGF0ZSl9XG4gICAgICAgICAgZGF0YS10ZXN0LWdyb3VwLXNlY29uZGFyeS10ZXh0XG4gICAgICAgID5cbiAgICAgICAgICB7cHJvcHMuc2Vjb25kYXJ5VGV4dH1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgICBsYWJlbENvbnRlbnQgPSAoXG4gICAgICA8aGVhZGVyIHN0eWxlPXtMQUJFTF9DT05UQUlORVJfU1RZTEVTfT5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlPXtJTlBVVF9HUk9VUF9MQUJFTF9TVFlMRVN9XG4gICAgICAgICAgZGF0YS10ZXN0LWdyb3VwLWxhYmVsLXRleHRcbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9wcy5sYWJlbFRleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7c2Vjb25kYXJ5VGV4dENvbnRlbnR9XG4gICAgICA8L2hlYWRlcj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBkYXRhLWNvbXBvbmVudD1cIlR4bFRvZ2dsZVN3aXRjaEdyb3VwXCI+XG4gICAgICB7bGFiZWxDb250ZW50fVxuICAgICAgPHVsIHN0eWxlPXtVTlNUWUxFRF9MSVNUfT5cbiAgICAgICAge3Byb3BzLml0ZW1zLm1hcChpdGVtID0+IChcbiAgICAgICAgICA8bGkgc3R5bGU9e0lURU1fU1RZTEVTfSBrZXk9e2l0ZW0ubmFtZX0+XG4gICAgICAgICAgICA8VG9nZ2xlU3dpdGNoXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpdGVtLmRpc2FibGVkfVxuICAgICAgICAgICAgICBpZD17aXRlbS5pZH1cbiAgICAgICAgICAgICAgbGFiZWxQb3NpdGlvbj17cHJvcHMubGFiZWxQb3NpdGlvbn1cbiAgICAgICAgICAgICAgbGFiZWxUZXh0PXtpdGVtLmxhYmVsVGV4dH1cbiAgICAgICAgICAgICAgbG9hZGluZz17aXRlbS5sb2FkaW5nfVxuICAgICAgICAgICAgICBuYW1lPXtpdGVtLm5hbWV9XG4gICAgICAgICAgICAgIG9uPXtpdGVtLm9ufVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9XG4gICAgICAgICAgICAgIHRhYkluZGV4PXtwcm9wcy50YWJJbmRleH1cbiAgICAgICAgICAgICAgc2Vjb25kYXJ5VGV4dD17aXRlbS5zZWNvbmRhcnlUZXh0fVxuICAgICAgICAgICAgICB2YWxpZGF0aW9uU3RhdGU9e2l0ZW0udmFsaWRhdGlvblN0YXRlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIClcbiAgICAgICAgKX1cbiAgICAgIDwvdWw+XG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxuVHhsVG9nZ2xlU3dpdGNoR3JvdXAucHJvcFR5cGVzID0ge1xuICBpdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAvLyBXZSB3aWxsIGJlIHBhc3NpbmcgdGhlc2UgcHJvcHMgdG8gVG9nZ2xlU3dpdGNoIHNvIHVzZSB3aGF0ZXZlciBpdCBleHBlY3RzXG4gICAgZGlzYWJsZWQ6IFRvZ2dsZVN3aXRjaC5wcm9wVHlwZXMuZGlzYWJsZWQsXG4gICAgbGFiZWxUZXh0OiBUb2dnbGVTd2l0Y2gucHJvcFR5cGVzLmxhYmVsVGV4dCxcbiAgICBuYW1lOiBUb2dnbGVTd2l0Y2gucHJvcFR5cGVzLm5hbWUsXG4gICAgb246IFRvZ2dsZVN3aXRjaC5wcm9wVHlwZXMub24sXG4gICAgc2Vjb25kYXJ5VGV4dDogVG9nZ2xlU3dpdGNoLnByb3BUeXBlcy5zZWNvbmRhcnlUZXh0LFxuICAgIHZhbGlkYXRpb25TdGF0ZTogVG9nZ2xlU3dpdGNoLnByb3BUeXBlcy52YWxpZGF0aW9uU3RhdGUsXG4gIH0pKS5pc1JlcXVpcmVkLFxuICBsYWJlbFBvc2l0aW9uOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoW1xuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICBdKSxcbiAgbGFiZWxUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2Vjb25kYXJ5VGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgdGFiSW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gIHZhbGlkYXRpb25TdGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYmFzZScsXG4gICAgJ2Vycm9yJyxcbiAgICAnd2FybmluZycsXG4gICAgJ3N1Y2Nlc3MnLFxuICBdKSxcbn07XG5cblR4bFRvZ2dsZVN3aXRjaEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgbGFiZWxQb3NpdGlvbjogJ2xlZnQnLFxuICB0YWJJbmRleDogMCxcbiAgdmFsaWRhdGlvblN0YXRlOiAnYmFzZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oVHhsVG9nZ2xlU3dpdGNoR3JvdXApO1xuIl19