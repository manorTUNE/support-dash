'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _Checkbox = require('./Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _WithLabel = require('./_WithLabel');

var _WithLabel2 = _interopRequireDefault(_WithLabel);

var _helpers = require('../styles/helpers');

var _list = require('../styles/mixins/list');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HORIZONTAL_SPACING = (0, _helpers.gridUnits)(6);

var LIST_STYLES = {
  base: (0, _extends3.default)({}, _list.UNSTYLED_LIST, {
    display: 'flex',
    flexWrap: 'wrap'
  }),
  horizontal: {
    flexDirection: 'row',
    marginLeft: '-' + HORIZONTAL_SPACING
  },
  vertical: {
    flexDirection: 'column'
  }
};

var ITEM_STYLES = {
  base: {
    alignItems: 'center',
    display: 'flex',
    marginBottom: (0, _helpers.gridUnits)(1),
    marginTop: (0, _helpers.gridUnits)(1)
  },
  horizontal: {
    marginLeft: HORIZONTAL_SPACING
  }
};

var TxlCheckboxGroup = function TxlCheckboxGroup(props) {
  var listStyle = (0, _helpers.combineStyles)(LIST_STYLES.base, LIST_STYLES[props.arrangement]);

  var listItemStyle = (0, _helpers.combineStyles)(ITEM_STYLES.base, props.arrangement === 'horizontal' ? ITEM_STYLES[props.arrangement] : {});

  return _react2.default.createElement(
    'section',
    { 'data-component': 'TxlCheckboxGroup' },
    _react2.default.createElement(
      'ul',
      {
        style: listStyle,
        'data-test-checkbox-group-list': true
      },
      props.items.map(function (item) {
        return _react2.default.createElement(
          'li',
          {
            style: listItemStyle,
            key: item.name
          },
          _react2.default.createElement(_Checkbox2.default, {
            disabled: item.disabled,
            id: item.id,
            labelText: item.labelText,
            name: item.name,
            checked: item.checked,
            onChange: props.onChange,
            tabIndex: props.tabIndex
          })
        );
      })
    )
  );
};

TxlCheckboxGroup.propTypes = {
  arrangement: _react2.default.PropTypes.oneOf(['horizontal', 'vertical']),
  items: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    // We will be passing these props to Checkbox so use the props
    // that we would like to expose from CheckboxGroup
    checked: _Checkbox2.default.propTypes.checked,
    disabled: _Checkbox2.default.propTypes.disabled,
    id: _Checkbox2.default.propTypes.id,
    labelText: _Checkbox2.default.propTypes.labelText,
    name: _Checkbox2.default.propTypes.name
  })).isRequired,
  labelText: _react2.default.PropTypes.string,
  onChange: _react2.default.PropTypes.func.isRequired,
  secondaryText: _react2.default.PropTypes.string,
  tabIndex: _react2.default.PropTypes.number,
  validationState: _react2.default.PropTypes.oneOf(['base', 'error', 'warning', 'success'])
};

TxlCheckboxGroup.defaultProps = {
  arrangement: 'vertical',
  tabIndex: 0,
  validationState: 'base'
};

var _default = (0, _WithLabel2.default)({
  defaultPosition: 'top',
  padding: (0, _helpers.gridUnits)(1)
}, (0, _radium2.default)(TxlCheckboxGroup));

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(HORIZONTAL_SPACING, 'HORIZONTAL_SPACING', 'src/input-fields/CheckboxGroup.jsx');

  __REACT_HOT_LOADER__.register(LIST_STYLES, 'LIST_STYLES', 'src/input-fields/CheckboxGroup.jsx');

  __REACT_HOT_LOADER__.register(ITEM_STYLES, 'ITEM_STYLES', 'src/input-fields/CheckboxGroup.jsx');

  __REACT_HOT_LOADER__.register(TxlCheckboxGroup, 'TxlCheckboxGroup', 'src/input-fields/CheckboxGroup.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/input-fields/CheckboxGroup.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnB1dC1maWVsZHMvQ2hlY2tib3hHcm91cC5qc3giXSwibmFtZXMiOlsiSE9SSVpPTlRBTF9TUEFDSU5HIiwiTElTVF9TVFlMRVMiLCJiYXNlIiwiZGlzcGxheSIsImZsZXhXcmFwIiwiaG9yaXpvbnRhbCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5MZWZ0IiwidmVydGljYWwiLCJJVEVNX1NUWUxFUyIsImFsaWduSXRlbXMiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJUeGxDaGVja2JveEdyb3VwIiwicHJvcHMiLCJsaXN0U3R5bGUiLCJhcnJhbmdlbWVudCIsImxpc3RJdGVtU3R5bGUiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJuYW1lIiwiZGlzYWJsZWQiLCJpZCIsImxhYmVsVGV4dCIsImNoZWNrZWQiLCJvbkNoYW5nZSIsInRhYkluZGV4IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib25lT2YiLCJhcnJheU9mIiwic2hhcGUiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwiZnVuYyIsInNlY29uZGFyeVRleHQiLCJudW1iZXIiLCJ2YWxpZGF0aW9uU3RhdGUiLCJkZWZhdWx0UHJvcHMiLCJkZWZhdWx0UG9zaXRpb24iLCJwYWRkaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFJQTs7OztBQUlBLElBQU1BLHFCQUFxQix3QkFBRyxDQUFILENBQTNCOztBQUVBLElBQU1DLGNBQWM7QUFDbEJDO0FBRUVDLGFBQVMsTUFGWDtBQUdFQyxjQUFVO0FBSFosSUFEa0I7QUFNbEJDLGNBQVk7QUFDVkMsbUJBQWUsS0FETDtBQUVWQyxzQkFBZ0JQO0FBRk4sR0FOTTtBQVVsQlEsWUFBVTtBQUNSRixtQkFBZTtBQURQO0FBVlEsQ0FBcEI7O0FBZUEsSUFBTUcsY0FBYztBQUNsQlAsUUFBTTtBQUNKUSxnQkFBWSxRQURSO0FBRUpQLGFBQVMsTUFGTDtBQUdKUSxrQkFBYyx3QkFBRyxDQUFILENBSFY7QUFJSkMsZUFBVyx3QkFBRyxDQUFIO0FBSlAsR0FEWTtBQU9sQlAsY0FBWTtBQUNWRSxnQkFBWVA7QUFERjtBQVBNLENBQXBCOztBQVlBLElBQU1hLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQUNDLEtBQUQsRUFBVztBQUNsQyxNQUFNQyxZQUFZLDRCQUNoQmQsWUFBWUMsSUFESSxFQUVoQkQsWUFBWWEsTUFBTUUsV0FBbEIsQ0FGZ0IsQ0FBbEI7O0FBS0EsTUFBTUMsZ0JBQWdCLDRCQUNwQlIsWUFBWVAsSUFEUSxFQUVwQlksTUFBTUUsV0FBTixLQUFzQixZQUF0QixHQUFxQ1AsWUFBWUssTUFBTUUsV0FBbEIsQ0FBckMsR0FBc0UsRUFGbEQsQ0FBdEI7O0FBS0EsU0FDRTtBQUFBO0FBQUEsTUFBUyxrQkFBZSxrQkFBeEI7QUFDRTtBQUFBO0FBQUE7QUFDRSxlQUFPRCxTQURUO0FBRUU7QUFGRjtBQUlHRCxZQUFNSSxLQUFOLENBQVlDLEdBQVosQ0FBZ0I7QUFBQSxlQUNmO0FBQUE7QUFBQTtBQUNFLG1CQUFPRixhQURUO0FBRUUsaUJBQUtHLEtBQUtDO0FBRlo7QUFJRTtBQUNFLHNCQUFVRCxLQUFLRSxRQURqQjtBQUVFLGdCQUFJRixLQUFLRyxFQUZYO0FBR0UsdUJBQVdILEtBQUtJLFNBSGxCO0FBSUUsa0JBQU1KLEtBQUtDLElBSmI7QUFLRSxxQkFBU0QsS0FBS0ssT0FMaEI7QUFNRSxzQkFBVVgsTUFBTVksUUFObEI7QUFPRSxzQkFBVVosTUFBTWE7QUFQbEI7QUFKRixTQURlO0FBQUEsT0FBaEI7QUFKSDtBQURGLEdBREY7QUF5QkQsQ0FwQ0Q7O0FBc0NBZCxpQkFBaUJlLFNBQWpCLEdBQTZCO0FBQzNCWixlQUFhLGdCQUFNYSxTQUFOLENBQWdCQyxLQUFoQixDQUFzQixDQUFDLFlBQUQsRUFBZSxVQUFmLENBQXRCLENBRGM7QUFFM0JaLFNBQU8sZ0JBQU1XLFNBQU4sQ0FBZ0JFLE9BQWhCLENBQXdCLGdCQUFNRixTQUFOLENBQWdCRyxLQUFoQixDQUFzQjtBQUNuRDtBQUNBO0FBQ0FQLGFBQVMsbUJBQVNHLFNBQVQsQ0FBbUJILE9BSHVCO0FBSW5ESCxjQUFVLG1CQUFTTSxTQUFULENBQW1CTixRQUpzQjtBQUtuREMsUUFBSSxtQkFBU0ssU0FBVCxDQUFtQkwsRUFMNEI7QUFNbkRDLGVBQVcsbUJBQVNJLFNBQVQsQ0FBbUJKLFNBTnFCO0FBT25ESCxVQUFNLG1CQUFTTyxTQUFULENBQW1CUDtBQVAwQixHQUF0QixDQUF4QixFQVFIWSxVQVZ1QjtBQVczQlQsYUFBVyxnQkFBTUssU0FBTixDQUFnQkssTUFYQTtBQVkzQlIsWUFBVSxnQkFBTUcsU0FBTixDQUFnQk0sSUFBaEIsQ0FBcUJGLFVBWko7QUFhM0JHLGlCQUFlLGdCQUFNUCxTQUFOLENBQWdCSyxNQWJKO0FBYzNCUCxZQUFVLGdCQUFNRSxTQUFOLENBQWdCUSxNQWRDO0FBZTNCQyxtQkFBaUIsZ0JBQU1ULFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCLENBQ3JDLE1BRHFDLEVBRXJDLE9BRnFDLEVBR3JDLFNBSHFDLEVBSXJDLFNBSnFDLENBQXRCO0FBZlUsQ0FBN0I7O0FBdUJBakIsaUJBQWlCMEIsWUFBakIsR0FBZ0M7QUFDOUJ2QixlQUFhLFVBRGlCO0FBRTlCVyxZQUFVLENBRm9CO0FBRzlCVyxtQkFBaUI7QUFIYSxDQUFoQzs7ZUFNZSx5QkFBVTtBQUN2QkUsbUJBQWlCLEtBRE07QUFFdkJDLFdBQVMsd0JBQUcsQ0FBSDtBQUZjLENBQVYsRUFHWixzQkFBTzVCLGdCQUFQLENBSFksQzs7Ozs7Ozs7OztnQ0FoR1RiLGtCOztnQ0FFQUMsVzs7Z0NBZUFRLFc7O2dDQVlBSSxnQiIsImZpbGUiOiJDaGVja2JveEdyb3VwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4vQ2hlY2tib3gnO1xuaW1wb3J0IFdpdGhMYWJlbCBmcm9tICcuL19XaXRoTGFiZWwnO1xuaW1wb3J0IHtcbiAgZ3JpZFVuaXRzIGFzIGd1LFxuICBjb21iaW5lU3R5bGVzLFxufSBmcm9tICcuLi9zdHlsZXMvaGVscGVycyc7XG5pbXBvcnQge1xuICBVTlNUWUxFRF9MSVNULFxufSBmcm9tICcuLi9zdHlsZXMvbWl4aW5zL2xpc3QnO1xuXG5jb25zdCBIT1JJWk9OVEFMX1NQQUNJTkcgPSBndSg2KTtcblxuY29uc3QgTElTVF9TVFlMRVMgPSB7XG4gIGJhc2U6IHtcbiAgICAuLi5VTlNUWUxFRF9MSVNULFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luTGVmdDogYC0ke0hPUklaT05UQUxfU1BBQ0lOR31gLFxuICB9LFxuICB2ZXJ0aWNhbDoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICB9LFxufTtcblxuY29uc3QgSVRFTV9TVFlMRVMgPSB7XG4gIGJhc2U6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgbWFyZ2luQm90dG9tOiBndSgxKSxcbiAgICBtYXJnaW5Ub3A6IGd1KDEpLFxuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgbWFyZ2luTGVmdDogSE9SSVpPTlRBTF9TUEFDSU5HLFxuICB9LFxufTtcblxuY29uc3QgVHhsQ2hlY2tib3hHcm91cCA9IChwcm9wcykgPT4ge1xuICBjb25zdCBsaXN0U3R5bGUgPSBjb21iaW5lU3R5bGVzKFxuICAgIExJU1RfU1RZTEVTLmJhc2UsXG4gICAgTElTVF9TVFlMRVNbcHJvcHMuYXJyYW5nZW1lbnRdXG4gICk7XG5cbiAgY29uc3QgbGlzdEl0ZW1TdHlsZSA9IGNvbWJpbmVTdHlsZXMoXG4gICAgSVRFTV9TVFlMRVMuYmFzZSxcbiAgICBwcm9wcy5hcnJhbmdlbWVudCA9PT0gJ2hvcml6b250YWwnID8gSVRFTV9TVFlMRVNbcHJvcHMuYXJyYW5nZW1lbnRdIDoge31cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGRhdGEtY29tcG9uZW50PVwiVHhsQ2hlY2tib3hHcm91cFwiPlxuICAgICAgPHVsXG4gICAgICAgIHN0eWxlPXtsaXN0U3R5bGV9XG4gICAgICAgIGRhdGEtdGVzdC1jaGVja2JveC1ncm91cC1saXN0XG4gICAgICA+XG4gICAgICAgIHtwcm9wcy5pdGVtcy5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICBzdHlsZT17bGlzdEl0ZW1TdHlsZX1cbiAgICAgICAgICAgIGtleT17aXRlbS5uYW1lfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICBkaXNhYmxlZD17aXRlbS5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgaWQ9e2l0ZW0uaWR9XG4gICAgICAgICAgICAgIGxhYmVsVGV4dD17aXRlbS5sYWJlbFRleHR9XG4gICAgICAgICAgICAgIG5hbWU9e2l0ZW0ubmFtZX1cbiAgICAgICAgICAgICAgY2hlY2tlZD17aXRlbS5jaGVja2VkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9XG4gICAgICAgICAgICAgIHRhYkluZGV4PXtwcm9wcy50YWJJbmRleH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxuVHhsQ2hlY2tib3hHcm91cC5wcm9wVHlwZXMgPSB7XG4gIGFycmFuZ2VtZW50OiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuICBpdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAvLyBXZSB3aWxsIGJlIHBhc3NpbmcgdGhlc2UgcHJvcHMgdG8gQ2hlY2tib3ggc28gdXNlIHRoZSBwcm9wc1xuICAgIC8vIHRoYXQgd2Ugd291bGQgbGlrZSB0byBleHBvc2UgZnJvbSBDaGVja2JveEdyb3VwXG4gICAgY2hlY2tlZDogQ2hlY2tib3gucHJvcFR5cGVzLmNoZWNrZWQsXG4gICAgZGlzYWJsZWQ6IENoZWNrYm94LnByb3BUeXBlcy5kaXNhYmxlZCxcbiAgICBpZDogQ2hlY2tib3gucHJvcFR5cGVzLmlkLFxuICAgIGxhYmVsVGV4dDogQ2hlY2tib3gucHJvcFR5cGVzLmxhYmVsVGV4dCxcbiAgICBuYW1lOiBDaGVja2JveC5wcm9wVHlwZXMubmFtZSxcbiAgfSkpLmlzUmVxdWlyZWQsXG4gIGxhYmVsVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNlY29uZGFyeVRleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gIHRhYkluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICB2YWxpZGF0aW9uU3RhdGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2Jhc2UnLFxuICAgICdlcnJvcicsXG4gICAgJ3dhcm5pbmcnLFxuICAgICdzdWNjZXNzJyxcbiAgXSksXG59O1xuXG5UeGxDaGVja2JveEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXJyYW5nZW1lbnQ6ICd2ZXJ0aWNhbCcsXG4gIHRhYkluZGV4OiAwLFxuICB2YWxpZGF0aW9uU3RhdGU6ICdiYXNlJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdpdGhMYWJlbCh7XG4gIGRlZmF1bHRQb3NpdGlvbjogJ3RvcCcsXG4gIHBhZGRpbmc6IGd1KDEpLFxufSwgUmFkaXVtKFR4bENoZWNrYm94R3JvdXApKTtcbiJdfQ==