'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _ReactUtils = require('../ReactUtils');

var _DataGridStyles = require('./DataGridStyles');

var _jsStyleHelpers = require('../styles/_helpers/jsStyleHelpers');

var _attributes = require('./_attributes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PINNED_WRAPPER_STYLES = (0, _extends3.default)({}, _DataGridStyles.CELL_WRAPPER, {
  backgroundColor: 'white',
  left: 0,
  position: 'absolute'
});

function getCell(cellRenderer, record, extraProps, isHovering, model, index, arr) {
  // need to assign here or JSX won't work correctly
  var Renderer = cellRenderer;
  var props = (0, _extends3.default)({}, extraProps, {
    isHovering: isHovering,
    key: model.key,
    last: index === arr.length - 1,
    model: model,
    record: record
  });

  return _react2.default.createElement(Renderer, props);
}

var TxlDataGridRow = (0, _radium2.default)(_class = function (_React$Component) {
  (0, _inherits3.default)(TxlDataGridRow, _React$Component);

  function TxlDataGridRow() {
    var _ref;

    (0, _classCallCheck3.default)(this, TxlDataGridRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = TxlDataGridRow.__proto__ || (0, _getPrototypeOf2.default)(TxlDataGridRow)).call.apply(_ref, [this].concat(args)));

    _this._updateHeights = function () {
      return _this.___updateHeights__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._setBaseRowHeight = function () {
      return _this.___setBaseRowHeight__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleMouseEnter = function () {
      return _this.___handleMouseEnter__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleMouseLeave = function () {
      return _this.___handleMouseLeave__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this.state = { isHovering: false };

    _this._debouncedUpdateHeights = (0, _debounce2.default)(_this._updateHeights, 70);
    _this._baseHeight = null;
    return _this;
  }

  (0, _createClass3.default)(TxlDataGridRow, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._setBaseRowHeight();
      this._updateHeights();
      window.addEventListener('resize', this._debouncedUpdateHeights);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this._debouncedUpdateHeights);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._updateHeights();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.columnModel !== nextProps.columnModel) {
        this._updateHeights();
      }
    }
  }, {
    key: '___updateHeights__REACT_HOT_LOADER__',
    value: function ___updateHeights__REACT_HOT_LOADER__() {
      return this.___updateHeights__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateHeights__REACT_HOT_LOADER__',
    value: function ___updateHeights__REACT_HOT_LOADER__() {
      return this.___updateHeights__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateHeights__REACT_HOT_LOADER__',
    value: function ___updateHeights__REACT_HOT_LOADER__() {
      /**
       * When we have a pinned column and allow for truncating within cells, we need to
       * set the height for pinned/unpinned container to accomodate for the truncation.
       * The unpinned container will adjust accordingly when truncation occurs so
       * we just have to adjust the height for the pinned container, however
       * we still need to account for cases when the base pinned container height is
       * greater than the unpinned in which case we would set the unpinnedContainer
       * height to the pinned container height.
       */
      if (!this.refs.pinnedColumns) return;

      var onHeightUpdated = this.props.onHeightUpdated;


      var unpinnedContainer = (0, _ReactUtils.findDOMNode)(this.refs.unpinnedColumns);
      var pinnedContainer = (0, _ReactUtils.findDOMNode)(this.refs.pinnedColumns);

      window.requestAnimationFrame(function () {
        // Remove height styling so we can determine the minimum height needed to display
        // either container.
        unpinnedContainer.style.removeProperty('height');
        pinnedContainer.style.removeProperty('height');

        var pinnedContainerHeight = pinnedContainer.getBoundingClientRect().height;
        var unpinnedContainerHeight = unpinnedContainer.getBoundingClientRect().height;

        var changedNode = pinnedContainerHeight > unpinnedContainerHeight ? unpinnedContainer : pinnedContainer;
        var changedHeight = Math.max(pinnedContainerHeight, unpinnedContainerHeight);

        (0, _jsStyleHelpers.setStylesForNode)(changedNode, {
          height: changedHeight + 'px'
        });

        onHeightUpdated && onHeightUpdated({ changedNode: changedNode });
      });
    }
  }, {
    key: '___setBaseRowHeight__REACT_HOT_LOADER__',
    value: function ___setBaseRowHeight__REACT_HOT_LOADER__() {
      return this.___setBaseRowHeight__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___setBaseRowHeight__REACT_HOT_LOADER__',
    value: function ___setBaseRowHeight__REACT_HOT_LOADER__() {
      return this.___setBaseRowHeight__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___setBaseRowHeight__REACT_HOT_LOADER__',
    value: function ___setBaseRowHeight__REACT_HOT_LOADER__() {
      /**
       * This is setting the row baseHeight because we need this to make comparisons with in cases
       * where the pinned container height is larger than unpinned by default, which will
       * occur for any pinned cell with text that wraps
       *
       * NOTE: Only applies if we have a pinned column
       */
      if (!this.refs.pinnedColumns) return;
      var pinnedContainer = (0, _ReactUtils.findDOMNode)(this.refs.pinnedColumns);
      var pinnedContainerHeight = pinnedContainer.getBoundingClientRect().height;

      this._baseHeight = pinnedContainerHeight;
    }
  }, {
    key: '___handleMouseEnter__REACT_HOT_LOADER__',
    value: function ___handleMouseEnter__REACT_HOT_LOADER__() {
      return this.___handleMouseEnter__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleMouseEnter__REACT_HOT_LOADER__',
    value: function ___handleMouseEnter__REACT_HOT_LOADER__() {
      return this.___handleMouseEnter__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleMouseEnter__REACT_HOT_LOADER__',
    value: function ___handleMouseEnter__REACT_HOT_LOADER__() {
      this.setState({ isHovering: true });
    }
  }, {
    key: '___handleMouseLeave__REACT_HOT_LOADER__',
    value: function ___handleMouseLeave__REACT_HOT_LOADER__() {
      return this.___handleMouseLeave__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleMouseLeave__REACT_HOT_LOADER__',
    value: function ___handleMouseLeave__REACT_HOT_LOADER__() {
      return this.___handleMouseLeave__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleMouseLeave__REACT_HOT_LOADER__',
    value: function ___handleMouseLeave__REACT_HOT_LOADER__() {
      this.setState({ isHovering: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          cellRenderer = _props.cellRenderer,
          columnModel = _props.columnModel,
          componentName = _props.componentName,
          index = _props.index,
          record = _props.record,
          style = _props.style,
          props = (0, _objectWithoutProperties3.default)(_props, ['cellRenderer', 'columnModel', 'componentName', 'index', 'record', 'style']);

      var PINNED_ATTR = (0, _defineProperty3.default)({}, _attributes.PINNED_WRAPPER_ATTR, true);
      var UNPINNED_ATTR = (0, _defineProperty3.default)({}, _attributes.UNPINNED_WRAPPER_ATTR, true);
      var boundGetCell = function boundGetCell() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return getCell.apply(undefined, [cellRenderer, record, (0, _extends3.default)({ index: index }, props), _this2.state.isHovering].concat(args));
      };

      var pinnedCells = columnModel.filter(function (model) {
        return model.pinned;
      }).map(boundGetCell);

      var unpinnedCells = columnModel.filter(function (model) {
        return !model.pinned;
      }).map(boundGetCell);

      return _react2.default.createElement(
        'div',
        {
          'data-component': componentName,
          'data-row': index,
          style: style,
          key: index,
          onMouseEnter: this._handleMouseEnter,
          onMouseLeave: this._handleMouseLeave
        },
        !!pinnedCells.length && _react2.default.createElement(
          'div',
          (0, _extends3.default)({}, PINNED_ATTR, {
            key: 'pinned',
            ref: 'pinnedColumns',
            style: PINNED_WRAPPER_STYLES
          }),
          pinnedCells
        ),
        _react2.default.createElement(
          'div',
          (0, _extends3.default)({}, UNPINNED_ATTR, {
            key: 'unpinned',
            ref: 'unpinnedColumns',
            style: _DataGridStyles.CELL_WRAPPER
          }),
          unpinnedCells
        )
      );
    }
  }]);
  return TxlDataGridRow;
}(_react2.default.Component)) || _class;

exports.default = TxlDataGridRow;


TxlDataGridRow.propTypes = {
  cellRenderer: _react.PropTypes.any,
  columnModel: _react.PropTypes.array,
  componentName: _react.PropTypes.string.isRequired,
  index: _react.PropTypes.number,
  lastRow: _react.PropTypes.bool,
  onHeightUpdated: _react.PropTypes.func,
  pinnedCells: _react.PropTypes.arrayOf(_react.PropTypes.node),
  record: _react.PropTypes.object,
  style: _react.PropTypes.object,
  unpinnedCells: _react.PropTypes.arrayOf(_react.PropTypes.node)
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(PINNED_WRAPPER_STYLES, 'PINNED_WRAPPER_STYLES', 'src/_data-grid/_DataGridRow.jsx');

  __REACT_HOT_LOADER__.register(getCell, 'getCell', 'src/_data-grid/_DataGridRow.jsx');

  __REACT_HOT_LOADER__.register(TxlDataGridRow, 'TxlDataGridRow', 'src/_data-grid/_DataGridRow.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,