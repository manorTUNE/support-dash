'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _helpers = require('../styles/helpers');

var _DataGridStyles = require('./DataGridStyles');

var _attributes = require('./_attributes');

var _ColumnModelPropType = require('./_ColumnModelPropType');

var _ColumnModelPropType2 = _interopRequireDefault(_ColumnModelPropType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getHoverStyle = function getHoverStyle(customBackgroundColor) {
  if (customBackgroundColor) {
    return (0, _extends3.default)({}, _DataGridStyles.BODY_CELL_HOVER_STYLES, {
      backgroundColor: customBackgroundColor,
      filter: 'brightness(95%)'
    });
  }

  return _DataGridStyles.BODY_CELL_HOVER_STYLES;
};

var TxlDataGridBodyCell = function TxlDataGridBodyCell(props) {
  var model = props.model,
      record = props.record,
      index = props.index,
      last = props.last,
      lastRow = props.lastRow,
      isHovering = props.isHovering;
  var cell = model.cell,
      cellStyle = model.cellStyle,
      key = model.key;


  var individualCellStyle = {};
  if (typeof cellStyle === 'function') {
    individualCellStyle = cellStyle({ index: index, model: model, row: record });
  } else if ((typeof cellStyle === 'undefined' ? 'undefined' : (0, _typeof3.default)(cellStyle)) === 'object') {
    individualCellStyle = cellStyle;
  }

  var cellStyles = (0, _helpers.combineStyles)(_DataGridStyles.BODY_CELL_STYLES, model.pinned && _DataGridStyles.CELL_PINNED_STYLES, lastRow && _DataGridStyles.BODY_CELL_LAST_ROW_STYLES, last && _DataGridStyles.CELL_PINNED_LAST, individualCellStyle, isHovering && getHoverStyle(individualCellStyle.backgroundColor));

  var args = (0, _cloneDeep2.default)({
    index: index,
    model: model,
    row: record
  });

  var PINNED_ATTR = (0, _defineProperty3.default)({}, _attributes.PINNED_COLUMN_ATTR, model.pinned);

  return _react2.default.createElement(
    'div',
    (0, _extends3.default)({}, PINNED_ATTR, {
      key: key,
      'data-column': key,
      style: cellStyles
    }),
    cell(args)
  );
};

TxlDataGridBodyCell.propTypes = {
  index: _react.PropTypes.number,
  isHovering: _react.PropTypes.bool,
  last: _react.PropTypes.bool,
  lastRow: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.bool]),
  model: _ColumnModelPropType2.default,
  record: _react.PropTypes.any.isRequired
};

var _default = (0, _radium2.default)(TxlDataGridBodyCell);

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(getHoverStyle, 'getHoverStyle', 'src/_data-grid/_DataGridBodyCell.jsx');

  __REACT_HOT_LOADER__.register(TxlDataGridBodyCell, 'TxlDataGridBodyCell', 'src/_data-grid/_DataGridBodyCell.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/_data-grid/_DataGridBodyCell.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fZGF0YS1ncmlkL19EYXRhR3JpZEJvZHlDZWxsLmpzeCJdLCJuYW1lcyI6WyJnZXRIb3ZlclN0eWxlIiwiY3VzdG9tQmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiZmlsdGVyIiwiVHhsRGF0YUdyaWRCb2R5Q2VsbCIsInByb3BzIiwibW9kZWwiLCJyZWNvcmQiLCJpbmRleCIsImxhc3QiLCJsYXN0Um93IiwiaXNIb3ZlcmluZyIsImNlbGwiLCJjZWxsU3R5bGUiLCJrZXkiLCJpbmRpdmlkdWFsQ2VsbFN0eWxlIiwicm93IiwiY2VsbFN0eWxlcyIsInBpbm5lZCIsImFyZ3MiLCJQSU5ORURfQVRUUiIsInByb3BUeXBlcyIsIm51bWJlciIsImJvb2wiLCJvbmVPZlR5cGUiLCJvYmplY3QiLCJhbnkiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7QUFPQTs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDQyxxQkFBRCxFQUEyQjtBQUMvQyxNQUFJQSxxQkFBSixFQUEyQjtBQUN6QjtBQUVFQyx1QkFBaUJELHFCQUZuQjtBQUdFRSxjQUFRO0FBSFY7QUFLRDs7QUFFRDtBQUNELENBVkQ7O0FBWUEsSUFBTUMsc0JBQXNCLFNBQXRCQSxtQkFBc0IsQ0FBQ0MsS0FBRCxFQUFXO0FBQUEsTUFFbkNDLEtBRm1DLEdBUWpDRCxLQVJpQyxDQUVuQ0MsS0FGbUM7QUFBQSxNQUduQ0MsTUFIbUMsR0FRakNGLEtBUmlDLENBR25DRSxNQUhtQztBQUFBLE1BSW5DQyxLQUptQyxHQVFqQ0gsS0FSaUMsQ0FJbkNHLEtBSm1DO0FBQUEsTUFLbkNDLElBTG1DLEdBUWpDSixLQVJpQyxDQUtuQ0ksSUFMbUM7QUFBQSxNQU1uQ0MsT0FObUMsR0FRakNMLEtBUmlDLENBTW5DSyxPQU5tQztBQUFBLE1BT25DQyxVQVBtQyxHQVFqQ04sS0FSaUMsQ0FPbkNNLFVBUG1DO0FBQUEsTUFVbkNDLElBVm1DLEdBYWpDTixLQWJpQyxDQVVuQ00sSUFWbUM7QUFBQSxNQVduQ0MsU0FYbUMsR0FhakNQLEtBYmlDLENBV25DTyxTQVhtQztBQUFBLE1BWW5DQyxHQVptQyxHQWFqQ1IsS0FiaUMsQ0FZbkNRLEdBWm1DOzs7QUFlckMsTUFBSUMsc0JBQXNCLEVBQTFCO0FBQ0EsTUFBSSxPQUFPRixTQUFQLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ25DRSwwQkFBc0JGLFVBQVUsRUFBRUwsWUFBRixFQUFTRixZQUFULEVBQWdCVSxLQUFLVCxNQUFyQixFQUFWLENBQXRCO0FBQ0QsR0FGRCxNQUVPLElBQUksUUFBT00sU0FBUCx1REFBT0EsU0FBUCxPQUFxQixRQUF6QixFQUFtQztBQUN4Q0UsMEJBQXNCRixTQUF0QjtBQUNEOztBQUVELE1BQU1JLGFBQWEsOERBRWpCWCxNQUFNWSxNQUFOLHNDQUZpQixFQUdqQlIsb0RBSGlCLEVBSWpCRCx3Q0FKaUIsRUFLakJNLG1CQUxpQixFQU1qQkosY0FBY1gsY0FBY2Usb0JBQW9CYixlQUFsQyxDQU5HLENBQW5COztBQVNBLE1BQU1pQixPQUFPLHlCQUFVO0FBQ3JCWCxnQkFEcUI7QUFFckJGLGdCQUZxQjtBQUdyQlUsU0FBS1Q7QUFIZ0IsR0FBVixDQUFiOztBQU1BLE1BQU1hLGdGQUFzQ2QsTUFBTVksTUFBNUMsQ0FBTjs7QUFFQSxTQUNFO0FBQUE7QUFBQSwrQkFDTUUsV0FETjtBQUVFLFdBQUtOLEdBRlA7QUFHRSxxQkFBYUEsR0FIZjtBQUlFLGFBQU9HO0FBSlQ7QUFNR0wsU0FBS08sSUFBTDtBQU5ILEdBREY7QUFVRCxDQWpERDs7QUFtREFmLG9CQUFvQmlCLFNBQXBCLEdBQWdDO0FBQzlCYixTQUFPLGlCQUFVYyxNQURhO0FBRTlCWCxjQUFZLGlCQUFVWSxJQUZRO0FBRzlCZCxRQUFNLGlCQUFVYyxJQUhjO0FBSTlCYixXQUFTLGlCQUFVYyxTQUFWLENBQW9CLENBQUMsaUJBQVVDLE1BQVgsRUFBbUIsaUJBQVVGLElBQTdCLENBQXBCLENBSnFCO0FBSzlCakIsc0NBTDhCO0FBTTlCQyxVQUFRLGlCQUFVbUIsR0FBVixDQUFjQztBQU5RLENBQWhDOztlQVNlLHNCQUFPdkIsbUJBQVAsQzs7Ozs7Ozs7OztnQ0F4RVRKLGE7O2dDQVlBSSxtQiIsImZpbGUiOiJfRGF0YUdyaWRCb2R5Q2VsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnO1xuXG5pbXBvcnQgeyBjb21iaW5lU3R5bGVzIH0gZnJvbSAnLi4vc3R5bGVzL2hlbHBlcnMnO1xuaW1wb3J0IHtcbiAgQk9EWV9DRUxMX1NUWUxFUyxcbiAgQk9EWV9DRUxMX0hPVkVSX1NUWUxFUyxcbiAgQk9EWV9DRUxMX0xBU1RfUk9XX1NUWUxFUyxcbiAgQ0VMTF9QSU5ORURfU1RZTEVTLFxuICBDRUxMX1BJTk5FRF9MQVNULFxufSBmcm9tICcuL0RhdGFHcmlkU3R5bGVzJztcbmltcG9ydCB7IFBJTk5FRF9DT0xVTU5fQVRUUiB9IGZyb20gJy4vX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IENvbHVtbk1vZGVsUHJvcFR5cGUgZnJvbSAnLi9fQ29sdW1uTW9kZWxQcm9wVHlwZSc7XG5cbmNvbnN0IGdldEhvdmVyU3R5bGUgPSAoY3VzdG9tQmFja2dyb3VuZENvbG9yKSA9PiB7XG4gIGlmIChjdXN0b21CYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uQk9EWV9DRUxMX0hPVkVSX1NUWUxFUyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY3VzdG9tQmFja2dyb3VuZENvbG9yLFxuICAgICAgZmlsdGVyOiAnYnJpZ2h0bmVzcyg5NSUpJyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIEJPRFlfQ0VMTF9IT1ZFUl9TVFlMRVM7XG59O1xuXG5jb25zdCBUeGxEYXRhR3JpZEJvZHlDZWxsID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBtb2RlbCxcbiAgICByZWNvcmQsXG4gICAgaW5kZXgsXG4gICAgbGFzdCxcbiAgICBsYXN0Um93LFxuICAgIGlzSG92ZXJpbmcsXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qge1xuICAgIGNlbGwsXG4gICAgY2VsbFN0eWxlLFxuICAgIGtleSxcbiAgfSA9IG1vZGVsO1xuXG4gIGxldCBpbmRpdmlkdWFsQ2VsbFN0eWxlID0ge307XG4gIGlmICh0eXBlb2YgY2VsbFN0eWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5kaXZpZHVhbENlbGxTdHlsZSA9IGNlbGxTdHlsZSh7IGluZGV4LCBtb2RlbCwgcm93OiByZWNvcmQgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNlbGxTdHlsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpbmRpdmlkdWFsQ2VsbFN0eWxlID0gY2VsbFN0eWxlO1xuICB9XG5cbiAgY29uc3QgY2VsbFN0eWxlcyA9IGNvbWJpbmVTdHlsZXMoXG4gICAgQk9EWV9DRUxMX1NUWUxFUyxcbiAgICBtb2RlbC5waW5uZWQgJiYgQ0VMTF9QSU5ORURfU1RZTEVTLFxuICAgIGxhc3RSb3cgJiYgQk9EWV9DRUxMX0xBU1RfUk9XX1NUWUxFUyxcbiAgICBsYXN0ICYmIENFTExfUElOTkVEX0xBU1QsXG4gICAgaW5kaXZpZHVhbENlbGxTdHlsZSxcbiAgICBpc0hvdmVyaW5nICYmIGdldEhvdmVyU3R5bGUoaW5kaXZpZHVhbENlbGxTdHlsZS5iYWNrZ3JvdW5kQ29sb3IpXG4gICk7XG5cbiAgY29uc3QgYXJncyA9IGNsb25lRGVlcCh7XG4gICAgaW5kZXgsXG4gICAgbW9kZWwsXG4gICAgcm93OiByZWNvcmQsXG4gIH0pO1xuXG4gIGNvbnN0IFBJTk5FRF9BVFRSID0geyBbUElOTkVEX0NPTFVNTl9BVFRSXTogbW9kZWwucGlubmVkIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB7Li4uUElOTkVEX0FUVFJ9XG4gICAgICBrZXk9e2tleX1cbiAgICAgIGRhdGEtY29sdW1uPXtrZXl9XG4gICAgICBzdHlsZT17Y2VsbFN0eWxlc31cbiAgICA+XG4gICAgICB7Y2VsbChhcmdzKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblR4bERhdGFHcmlkQm9keUNlbGwucHJvcFR5cGVzID0ge1xuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgaXNIb3ZlcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gIGxhc3Q6IFByb3BUeXBlcy5ib29sLFxuICBsYXN0Um93OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pLFxuICBtb2RlbDogQ29sdW1uTW9kZWxQcm9wVHlwZSxcbiAgcmVjb3JkOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oVHhsRGF0YUdyaWRCb2R5Q2VsbCk7XG4iXX0=