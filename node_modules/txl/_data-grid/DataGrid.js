'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class; /* eslint no-param-reassign: "off" */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _sortBy = require('lodash/sortBy');

var _sortBy2 = _interopRequireDefault(_sortBy);

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _ReactUtils = require('../ReactUtils');

var _jsStyleHelpers = require('../styles/_helpers/jsStyleHelpers');

var _helpers = require('../styles/helpers');

var _DataGridStyles = require('./DataGridStyles');

var _attributes = require('./_attributes');

var _LoadingIndicator = require('../progress-indicators/LoadingIndicator');

var _LoadingIndicator2 = _interopRequireDefault(_LoadingIndicator);

var _DataGridHeaderRow = require('./_DataGridHeaderRow');

var _DataGridHeaderRow2 = _interopRequireDefault(_DataGridHeaderRow);

var _DataGridBodyRow = require('./_DataGridBodyRow');

var _DataGridBodyRow2 = _interopRequireDefault(_DataGridBodyRow);

var _DataGridRowSizer = require('./_DataGridRowSizer');

var _DataGridRowSizer2 = _interopRequireDefault(_DataGridRowSizer);

var _ColumnModelPropType = require('./_ColumnModelPropType');

var _ColumnModelPropType2 = _interopRequireDefault(_ColumnModelPropType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * polyfill safari and possibly other browsers
 * an error was thrown from react internals without it
 */

require('core-js/modules/es6.array.from');

var COMPONENT_SELECTOR = '[data-component="TxlDataGrid"]';
var PINNED_COLUMN_SELECTOR = '[' + _attributes.PINNED_COLUMN_ATTR + ']';
var PINNED_WRAPPER_SELECTOR = '[' + _attributes.PINNED_WRAPPER_ATTR + ']';
var UNPINNED_WRAPPER_SELECTOR = '[' + _attributes.UNPINNED_WRAPPER_ATTR + ']';

var INVALID_COLUMN_MODEL_MESSAGE = 'Invalid column model. Column models must contain at least one column and must contain only one type of columns (grouped or ungrouped)';

function getColumnSelector(key) {
  return COMPONENT_SELECTOR + ' [data-column="' + key + '"]';
}

function getColumnRule(_ref) {
  var model = _ref.model,
      index = _ref.index,
      columnWidths = _ref.columnWidths;

  var rules = { width: columnWidths[index] + 'px' };
  return (0, _jsStyleHelpers.getPrefixedCssRuleset)(getColumnSelector(model.key), rules);
}

function getNoDataInnerContent(contents) {
  return _react2.default.createElement(
    'div',
    { style: _DataGridStyles.INTERMEDIATE_CONTENT_INNER_STYLES },
    _react2.default.createElement(
      'div',
      { style: _DataGridStyles.NO_DATA_CONTENT_STYLES },
      contents
    )
  );
}

// @TODO - remove radium :hover
// @TODO - add th cell hover styles
// @TODO - update width on resize based calculated width, and set flex-grow and shrink to 0
// @TODO - possibly disabled resize until working cross browser
// @TODO - only bind mousemove handler when resizing
// @TODO - add onResizeCallback
// @TODO - testing
// @TODO  -make so scrolling while moused over pinned column scrolls container
// @TODO - capture  horizontal and vertical scroll handlers and trigger scroll of correct element,
// kind of funky in firefox @TODO - fix maxWidth - possibly by setting pined/unpinned wrappers to
// the width of the children on render/resize

/**
 * @NOTE - In this component you will find a lot of deviation from the normal react way of doing
 *   things, i.e. direct DOM style maniuplation, direct stylesheet maniuplation etc... this is not
 *   the recommmended way of doing things in most cases but were done for performance reasons that
 *   woud be hindered by a lot of rerenders, especially around scroll behavior, resizing, and
 *   pinned columns
 */

var TxlDataGrid = (0, _radium2.default)(_class = function (_React$Component) {
  (0, _inherits3.default)(TxlDataGrid, _React$Component);

  function TxlDataGrid() {
    var _ref2;

    (0, _classCallCheck3.default)(this, TxlDataGrid);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref2 = TxlDataGrid.__proto__ || (0, _getPrototypeOf2.default)(TxlDataGrid)).call.apply(_ref2, [this].concat(args)));

    _this._checkColumnModelFormat = function () {
      return _this.___checkColumnModelFormat__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._generateColumnModels = function () {
      return _this.___generateColumnModels__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleRowSizerChange = function () {
      return _this.___handleRowSizerChange__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._updateStylesAndCaches = function () {
      return _this.___updateStylesAndCaches__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._updateUnpinnedColumnOffset = function () {
      return _this.___updateUnpinnedColumnOffset__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._updateColumnWidthStyles = function () {
      return _this.___updateColumnWidthStyles__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._updateColumnRule = function () {
      return _this.___updateColumnRule__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._initDOMCache = function () {
      return _this.___initDOMCache__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._updateDimensionCache = function () {
      return _this.___updateDimensionCache__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._getHeaderDims = function () {
      return _this.___getHeaderDims__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._initScrollElem = function () {
      return _this.___initScrollElem__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleScrollUpdate = function () {
      return _this.___handleScrollUpdate__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleHeaderHeightUpdate = function () {
      return _this.___handleHeaderHeightUpdate__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleHeaderPlaceholderRef = function () {
      return _this.___handleHeaderPlaceholderRef__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleHeaderWrapperRef = function () {
      return _this.___handleHeaderWrapperRef__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleScrollerRef = function () {
      return _this.___handleScrollerRef__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleHeaderRef = function () {
      return _this.___handleHeaderRef__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleGroupHeaderRef = function () {
      return _this.___handleGroupHeaderRef__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleNoResultStateRef = function () {
      return _this.___handleNoResultStateRef__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._lastScrollTop = 0; // scrollTop Cache
    _this._lastScrollLeft = 0; // scrollTop Cache
    _this._fixed = _this.props.stickyHeader; // whether the header is fixed or not
    _this._wasLastFixed = null; // fixed header cache
    _this._resizing = false; // when resizing width of a column
    _this._columnWidths = []; // hold current widths of all columns
    // columns that have been resized and their actual widths should be recorded
    _this._resizedCols = {};
    _this._resizedColWidths = {}; // hold current widths of all columns that have been user resized
    _this._documentScroller = null; // document scrolling element, body or html depending on browser
    // contains the header so that can hide overflow when fixed header is translated along the x-axis
    _this._headerWrapper = null;
    _this._header = null; // header element
    _this._groupHeader = null; // group header element
    _this._headerUnpinnedWrapper = null; // header unpinned container
    _this._groupHeaderUnpinnedWrapper = null; // group header unpinned container
    // header placeholder element holds position when scroll is fixed
    _this._headerPlaceholder = null;
    _this._scroller = null; // wrapper container - scrolling container for horizontal scroll
    _this._node = null; // the current component
    _this._styleSheet = null; // the stylesheet to update properties for
    _this._scrollListener = null; // general scrollListener

    // dimensions
    _this._nodeDims = {};

    var columnModels = _this._generateColumnModels(_this.props.columnModel);
    _this.state = (0, _extends3.default)({}, columnModels, {
      hoverKey: ''
    });
    return _this;
  }

  (0, _createClass3.default)(TxlDataGrid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this._initDOMCache();
      this._updateStylesAndCaches();

      this._scrollListener = function () {
        window.requestAnimationFrame(_this2._handleScrollUpdate);
      };

      // would be better in componentDidUpdate,
      // but for now stickyHeader is on or off initially and cannot be changed
      if (this.props.stickyHeader) {
        this._initScrollElem();
        window.addEventListener('scroll', this._scrollListener);
        this._scroller.addEventListener('scroll', this._scrollListener);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref3) {
      var columnModel = _ref3.columnModel;

      if (this.props.columnModel !== columnModel) {
        this.setState(this._generateColumnModels(columnModel));
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this._scrollListener);
      this._scroller.removeEventListener('scroll', this._scrollListener);
    }
  }, {
    key: '___checkColumnModelFormat__REACT_HOT_LOADER__',
    value: function ___checkColumnModelFormat__REACT_HOT_LOADER__() {
      return this.___checkColumnModelFormat__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___checkColumnModelFormat__REACT_HOT_LOADER__',
    value: function ___checkColumnModelFormat__REACT_HOT_LOADER__() {
      return this.___checkColumnModelFormat__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___checkColumnModelFormat__REACT_HOT_LOADER__',
    value: function ___checkColumnModelFormat__REACT_HOT_LOADER__(columnModel) {
      if ((0, _isEmpty2.default)(columnModel)) {
        throw new Error(INVALID_COLUMN_MODEL_MESSAGE);
      }

      var containsGroupedColumns = !!columnModel.find(function (model) {
        return !!model.columns;
      });

      if (containsGroupedColumns) {
        columnModel.forEach(function (model) {
          if (!model.columns) {
            throw new Error(INVALID_COLUMN_MODEL_MESSAGE);
          }
        });
      }
    }
  }, {
    key: '___generateColumnModels__REACT_HOT_LOADER__',
    value: function ___generateColumnModels__REACT_HOT_LOADER__() {
      return this.___generateColumnModels__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___generateColumnModels__REACT_HOT_LOADER__',
    value: function ___generateColumnModels__REACT_HOT_LOADER__() {
      return this.___generateColumnModels__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___generateColumnModels__REACT_HOT_LOADER__',
    value: function ___generateColumnModels__REACT_HOT_LOADER__(columnModel) {
      this._checkColumnModelFormat(columnModel);
      var isGrouped = !!columnModel[0].columns;

      if (!isGrouped) {
        return {
          columnModel: (0, _sortBy2.default)(columnModel, 'pinned'),
          groupedColumnModel: []
        };
      }

      var hasPinnedColumnGroups = !!columnModel.find(function (model) {
        return model.pinned;
      });

      if (!hasPinnedColumnGroups) {
        return {
          columnModel: columnModel.reduce(function (a, b) {
            return b.columns ? a.concat.apply(a, (0, _toConsumableArray3.default)(b.columns)) : a;
          }, []),
          groupedColumnModel: columnModel
        };
      }

      var groupedColumnModel = (0, _sortBy2.default)(columnModel, 'pinned').map(function (groupColumn) {
        // Pin sub-headers of pinned grouped header
        if (groupColumn.pinned) {
          return (0, _extends3.default)({}, groupColumn, {
            columns: groupColumn.columns.map(function (column) {
              return (0, _extends3.default)({}, column, {
                pinned: true
              });
            })
          });
        }

        return groupColumn;
      });

      var individualColumnModel = [];
      groupedColumnModel.forEach(function (model) {
        individualColumnModel.push.apply(individualColumnModel, (0, _toConsumableArray3.default)(model.columns));
      });

      return {
        columnModel: individualColumnModel,
        groupedColumnModel: groupedColumnModel
      };
    }
  }, {
    key: '___handleRowSizerChange__REACT_HOT_LOADER__',
    value: function ___handleRowSizerChange__REACT_HOT_LOADER__() {
      return this.___handleRowSizerChange__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleRowSizerChange__REACT_HOT_LOADER__',
    value: function ___handleRowSizerChange__REACT_HOT_LOADER__() {
      return this.___handleRowSizerChange__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleRowSizerChange__REACT_HOT_LOADER__',
    value: function ___handleRowSizerChange__REACT_HOT_LOADER__(columnWidths) {
      this._columnWidths = columnWidths;
      this._updateStylesAndCaches();
    }
  }, {
    key: '___updateStylesAndCaches__REACT_HOT_LOADER__',
    value: function ___updateStylesAndCaches__REACT_HOT_LOADER__() {
      return this.___updateStylesAndCaches__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateStylesAndCaches__REACT_HOT_LOADER__',
    value: function ___updateStylesAndCaches__REACT_HOT_LOADER__() {
      return this.___updateStylesAndCaches__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateStylesAndCaches__REACT_HOT_LOADER__',
    value: function ___updateStylesAndCaches__REACT_HOT_LOADER__() {
      var _this3 = this;

      /**
       * On the initial call from the sizer, stylesheet will not be ready.
       * This method will recursively call itself until it can continue.
       */

      if (!this._styleSheet) {
        window.requestAnimationFrame(this._updateStylesAndCaches);
      } else {
        this._updateColumnWidthStyles();

        /**
         * Updating column widths means that we need to wait until the next
         * animationframe to update our dimensions cache, since the width
         * update will impact the overall height of the grid.
         */

        window.requestAnimationFrame(function () {
          _this3._updateDimensionCache();
          _this3._updateUnpinnedColumnOffset();

          /**
           * When the header is fixed and a resize happens, we need to trigger
           * the scroll update callback to correctly resize the fixed header.
           */
          if (_this3.props.stickyHeader) {
            _this3._handleScrollUpdate();
          }
        });
      }
    }
  }, {
    key: '___updateUnpinnedColumnOffset__REACT_HOT_LOADER__',
    value: function ___updateUnpinnedColumnOffset__REACT_HOT_LOADER__() {
      return this.___updateUnpinnedColumnOffset__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateUnpinnedColumnOffset__REACT_HOT_LOADER__',
    value: function ___updateUnpinnedColumnOffset__REACT_HOT_LOADER__() {
      return this.___updateUnpinnedColumnOffset__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateUnpinnedColumnOffset__REACT_HOT_LOADER__',
    value: function ___updateUnpinnedColumnOffset__REACT_HOT_LOADER__() {
      this._scroller.style.paddingLeft = this._pinnedColumnWidths + 'px';
      this._noResultState.style.marginLeft = '-' + this._pinnedColumnWidths + 'px';
    }
  }, {
    key: '___updateColumnWidthStyles__REACT_HOT_LOADER__',
    value: function ___updateColumnWidthStyles__REACT_HOT_LOADER__() {
      return this.___updateColumnWidthStyles__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateColumnWidthStyles__REACT_HOT_LOADER__',
    value: function ___updateColumnWidthStyles__REACT_HOT_LOADER__() {
      return this.___updateColumnWidthStyles__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateColumnWidthStyles__REACT_HOT_LOADER__',
    value: function ___updateColumnWidthStyles__REACT_HOT_LOADER__() {
      var _this4 = this;

      var _state = this.state,
          columnModel = _state.columnModel,
          groupedColumnModel = _state.groupedColumnModel;


      columnModel.forEach(function (model, index) {
        _this4._updateColumnRule({ index: index, model: model });
      });

      groupedColumnModel.forEach(function (_ref4) {
        var subHeaders = _ref4.columns,
            key = _ref4.key;

        var firstSubHeaderIndex = columnModel.indexOf(subHeaders[0]);
        var subHeaderWidths = _this4._columnWidths.slice(firstSubHeaderIndex, firstSubHeaderIndex + subHeaders.length);
        var totalSubHeaderWidth = subHeaderWidths.reduce(function (a, b) {
          return a + b;
        }, 0);

        var columnSelector = getColumnSelector(key);
        (0, _jsStyleHelpers.deleteRulesetBySelector)(_this4._styleSheet, columnSelector);

        var widthRule = { width: totalSubHeaderWidth + 'px' };
        _this4._styleSheet.insertRule((0, _jsStyleHelpers.getPrefixedCssRuleset)(columnSelector, widthRule), 0);
      });
    }
  }, {
    key: '___updateColumnRule__REACT_HOT_LOADER__',
    value: function ___updateColumnRule__REACT_HOT_LOADER__() {
      return this.___updateColumnRule__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateColumnRule__REACT_HOT_LOADER__',
    value: function ___updateColumnRule__REACT_HOT_LOADER__() {
      return this.___updateColumnRule__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateColumnRule__REACT_HOT_LOADER__',
    value: function ___updateColumnRule__REACT_HOT_LOADER__(_ref5) {
      var model = _ref5.model,
          index = _ref5.index;

      (0, _jsStyleHelpers.deleteRulesetBySelector)(this._styleSheet, getColumnSelector(model.key));

      var columnWidths = this._columnWidths;

      this._styleSheet.insertRule(getColumnRule({ columnWidths: columnWidths, index: index, model: model }), 0);
    }
  }, {
    key: '___initDOMCache__REACT_HOT_LOADER__',
    value: function ___initDOMCache__REACT_HOT_LOADER__() {
      return this.___initDOMCache__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___initDOMCache__REACT_HOT_LOADER__',
    value: function ___initDOMCache__REACT_HOT_LOADER__() {
      return this.___initDOMCache__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___initDOMCache__REACT_HOT_LOADER__',
    value: function ___initDOMCache__REACT_HOT_LOADER__() {
      this._node = (0, _ReactUtils.findDOMNode)(this);
      this._styleSheet = (0, _ReactUtils.findDOMNode)(this.refs.stylesheet).sheet;

      if (this._groupHeader) {
        this._groupHeaderUnpinnedWrapper = this._groupHeader.querySelector(UNPINNED_WRAPPER_SELECTOR);
      }

      this._headerUnpinnedWrapper = this._header.querySelector(UNPINNED_WRAPPER_SELECTOR);
    }
  }, {
    key: '___updateDimensionCache__REACT_HOT_LOADER__',
    value: function ___updateDimensionCache__REACT_HOT_LOADER__() {
      return this.___updateDimensionCache__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateDimensionCache__REACT_HOT_LOADER__',
    value: function ___updateDimensionCache__REACT_HOT_LOADER__() {
      return this.___updateDimensionCache__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___updateDimensionCache__REACT_HOT_LOADER__',
    value: function ___updateDimensionCache__REACT_HOT_LOADER__() {
      this._nodeDims = this._node.getBoundingClientRect();
      this._pinnedColumnWidths = 0;
      this._nodeWidth = this._node.getBoundingClientRect().width;

      var pinnedColumns = this._header.querySelector(PINNED_WRAPPER_SELECTOR);
      if (pinnedColumns) {
        var nodes = pinnedColumns.querySelectorAll(PINNED_COLUMN_SELECTOR);
        this._pinnedColumnWidths = [].concat((0, _toConsumableArray3.default)(nodes)).reduce(function (prev, node) {
          return prev += node.getBoundingClientRect().width;
        }, 0);
      }
      this._wasLastFixed = null; // not really a dimension but needs to be cleared
    }
  }, {
    key: '___getHeaderDims__REACT_HOT_LOADER__',


    // This function's purpose is to determine and set the scrolling element for the main viewport
    // this can differ by browser and can either be html or body
    value: function ___getHeaderDims__REACT_HOT_LOADER__() {
      return this.___getHeaderDims__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___getHeaderDims__REACT_HOT_LOADER__',
    value: function ___getHeaderDims__REACT_HOT_LOADER__() {
      return this.___getHeaderDims__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___getHeaderDims__REACT_HOT_LOADER__',
    value: function ___getHeaderDims__REACT_HOT_LOADER__() {
      return this._headerWrapper.getBoundingClientRect();
    }
  }, {
    key: '___initScrollElem__REACT_HOT_LOADER__',
    value: function ___initScrollElem__REACT_HOT_LOADER__() {
      return this.___initScrollElem__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___initScrollElem__REACT_HOT_LOADER__',
    value: function ___initScrollElem__REACT_HOT_LOADER__() {
      return this.___initScrollElem__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___initScrollElem__REACT_HOT_LOADER__',
    value: function ___initScrollElem__REACT_HOT_LOADER__() {
      var _this5 = this;

      var HTML_SELECTOR = 'body';
      var BODY_SELECTOR = 'html';
      var POTENTIAL_SELECTORS = [BODY_SELECTOR, HTML_SELECTOR];
      var BODY = document.querySelector(BODY_SELECTOR);
      var HTML = document.querySelector(HTML_SELECTOR);
      var POTENTIAL_NODES = [BODY, HTML];

      // set minHeights to more than 100% so scrollTop can actually be set
      POTENTIAL_SELECTORS.forEach(function (selector) {
        _this5._styleSheet.insertRule((0, _jsStyleHelpers.getPrefixedCssRuleset)(selector, { minHeight: '101% !important' }), 0);
      });

      // coerce the potential Elems to have a positive scrollTop
      POTENTIAL_NODES.forEach(function (node) {
        node.scrollTop = node.scrollTop || 1;
      });

      // set the scrolling element to whichever has a positive scrollTop
      // the non-scrolling element should always be 0
      this._documentScroller = BODY.scrollTop > 0 ? BODY : HTML;

      // reset scrollTop to 0 if is 1 (assumed changed by the above code)
      this._documentScroller.scrollTop = this._documentScroller.scrollTop === 1 ? 0 : this._documentScroller.scrollTop;

      // reset minHeights
      POTENTIAL_SELECTORS.forEach(function (selector) {
        (0, _jsStyleHelpers.deleteRulesetBySelector)(_this5._styleSheet, selector);
      });
    }
  }, {
    key: '___handleScrollUpdate__REACT_HOT_LOADER__',


    /*
      Handle updating the header placeholder size once DataGridRow has updated the header heights
      to be the same between the pinned columns and unpinned columns.
    */
    value: function ___handleScrollUpdate__REACT_HOT_LOADER__() {
      return this.___handleScrollUpdate__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleScrollUpdate__REACT_HOT_LOADER__',
    value: function ___handleScrollUpdate__REACT_HOT_LOADER__() {
      return this.___handleScrollUpdate__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleScrollUpdate__REACT_HOT_LOADER__',
    value: function ___handleScrollUpdate__REACT_HOT_LOADER__() {
      var curTop = this._documentScroller.scrollTop;
      var curDocLeft = this._documentScroller.scrollLeft;
      var curLeft = this._scroller.scrollLeft;
      var stickTop = this.props.stickTop;

      var headerHeight = this._getHeaderDims().height;
      var nodeHeight = this._nodeDims.height;

      /**
       * offset is not cached but content can change around it so we need to recalculate
       * @TODO - possibly find a less expensive way to do this (mutation observers?)
       */
      var nextNode = this._node;
      var nodeOffsetTop = 0;
      while (nextNode) {
        nodeOffsetTop += nextNode.offsetTop;
        nextNode = nextNode.offsetParent;
      }

      this._fixed = curTop >= nodeOffsetTop - stickTop && curTop <= nodeOffsetTop - stickTop + nodeHeight - headerHeight;

      (0, _jsStyleHelpers.setStylesForNode)(this._headerUnpinnedWrapper, {
        transform: this._fixed ? 'translateX(' + -curLeft + 'px)' : null
      });

      if (this._groupHeaderUnpinnedWrapper) {
        (0, _jsStyleHelpers.setStylesForNode)(this._groupHeaderUnpinnedWrapper, {
          transform: this._fixed ? 'translateX(' + -curLeft + 'px)' : null
        });
      }

      // has to be done every time whether previously fixed or not
      (0, _jsStyleHelpers.setStylesForNode)(this._headerWrapper, {
        transform: this._fixed ? 'translateX(' + -curDocLeft + 'px)' : null
      });

      // fixing or unfixing for the first time
      if (this._fixed !== this._wasLastFixed) {
        (0, _jsStyleHelpers.setStylesForNode)(this._headerWrapper, {
          marginLeft: this._fixed ? '-' + this._pinnedColumnWidths + 'px' : null,
          overflow: this._fixed ? 'hidden' : null,
          paddingLeft: this._fixed ? this._pinnedColumnWidths + 'px' : null,
          position: this._fixed ? 'fixed' : null,
          top: this._fixed ? this.props.stickTop + 'px' : null,
          width: this._fixed ? this._nodeWidth + 'px' : null
        });

        (0, _jsStyleHelpers.setStylesForNode)(this._headerPlaceholder, {
          height: this._fixed ? headerHeight + 'px' : null
        });

        this._wasLastFixed = this._fixed;
      }
    }
  }, {
    key: '___handleHeaderHeightUpdate__REACT_HOT_LOADER__',
    value: function ___handleHeaderHeightUpdate__REACT_HOT_LOADER__() {
      return this.___handleHeaderHeightUpdate__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderHeightUpdate__REACT_HOT_LOADER__',
    value: function ___handleHeaderHeightUpdate__REACT_HOT_LOADER__() {
      return this.___handleHeaderHeightUpdate__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderHeightUpdate__REACT_HOT_LOADER__',
    value: function ___handleHeaderHeightUpdate__REACT_HOT_LOADER__() {
      var headerHeight = this._getHeaderDims().height;

      (0, _jsStyleHelpers.setStylesForNode)(this._headerPlaceholder, {
        height: this._fixed ? headerHeight + 'px' : null
      });
    }
  }, {
    key: '___handleHeaderPlaceholderRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderPlaceholderRef__REACT_HOT_LOADER__() {
      return this.___handleHeaderPlaceholderRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderPlaceholderRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderPlaceholderRef__REACT_HOT_LOADER__() {
      return this.___handleHeaderPlaceholderRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderPlaceholderRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderPlaceholderRef__REACT_HOT_LOADER__(ref) {
      this._headerPlaceholder = ref;
    }
  }, {
    key: '___handleHeaderWrapperRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderWrapperRef__REACT_HOT_LOADER__() {
      return this.___handleHeaderWrapperRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderWrapperRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderWrapperRef__REACT_HOT_LOADER__() {
      return this.___handleHeaderWrapperRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderWrapperRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderWrapperRef__REACT_HOT_LOADER__(ref) {
      this._headerWrapper = ref;
    }
  }, {
    key: '___handleScrollerRef__REACT_HOT_LOADER__',
    value: function ___handleScrollerRef__REACT_HOT_LOADER__() {
      return this.___handleScrollerRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleScrollerRef__REACT_HOT_LOADER__',
    value: function ___handleScrollerRef__REACT_HOT_LOADER__() {
      return this.___handleScrollerRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleScrollerRef__REACT_HOT_LOADER__',
    value: function ___handleScrollerRef__REACT_HOT_LOADER__(ref) {
      this._scroller = ref;
    }
  }, {
    key: '___handleHeaderRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderRef__REACT_HOT_LOADER__() {
      return this.___handleHeaderRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderRef__REACT_HOT_LOADER__() {
      return this.___handleHeaderRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderRef__REACT_HOT_LOADER__',
    value: function ___handleHeaderRef__REACT_HOT_LOADER__(ref) {
      this._header = (0, _ReactUtils.findDOMNode)(ref);
    }
  }, {
    key: '___handleGroupHeaderRef__REACT_HOT_LOADER__',
    value: function ___handleGroupHeaderRef__REACT_HOT_LOADER__() {
      return this.___handleGroupHeaderRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleGroupHeaderRef__REACT_HOT_LOADER__',
    value: function ___handleGroupHeaderRef__REACT_HOT_LOADER__() {
      return this.___handleGroupHeaderRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleGroupHeaderRef__REACT_HOT_LOADER__',
    value: function ___handleGroupHeaderRef__REACT_HOT_LOADER__(ref) {
      this._groupHeader = (0, _ReactUtils.findDOMNode)(ref);
    }
  }, {
    key: '___handleNoResultStateRef__REACT_HOT_LOADER__',
    value: function ___handleNoResultStateRef__REACT_HOT_LOADER__() {
      return this.___handleNoResultStateRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleNoResultStateRef__REACT_HOT_LOADER__',
    value: function ___handleNoResultStateRef__REACT_HOT_LOADER__() {
      return this.___handleNoResultStateRef__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleNoResultStateRef__REACT_HOT_LOADER__',
    value: function ___handleNoResultStateRef__REACT_HOT_LOADER__(ref) {
      this._noResultState = ref;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          sortedKey = _props.sortedKey,
          sortedDirection = _props.sortedDirection,
          onSortRequested = _props.onSortRequested,
          noDataContent = _props.noDataContent;
      var _state2 = this.state,
          columnModel = _state2.columnModel,
          groupedColumnModel = _state2.groupedColumnModel;


      var isGrouped = groupedColumnModel.length > 0;

      var loadingContent = this.props.loadingContent || _react2.default.createElement(
        'div',
        { style: _DataGridStyles.INTERMEDIATE_CONTENT_STYLES },
        getNoDataInnerContent(_react2.default.createElement(_LoadingIndicator2.default, null))
      );

      var noDataElem = _react2.default.createElement(
        'div',
        { style: _DataGridStyles.NO_RESULTS_CONTENT_STYLES },
        getNoDataInnerContent(noDataContent)
      );

      var showNoDataContent = !this.props.isLoading && !this.props.data.length;
      var rowCount = !this.props.isLoading ? this.props.data.length : 0;

      return _react2.default.createElement(
        'div',
        {
          id: this.props.id,
          'data-component': 'TxlDataGrid',
          style: _DataGridStyles.WRAPPER_STYLES
        },
        _react2.default.createElement('style', {
          type: 'text/css',
          ref: 'stylesheet'
        }),
        _react2.default.createElement(_DataGridRowSizer2.default, {
          onRowSizeChange: this._handleRowSizerChange,
          columnModel: columnModel
        }),
        _react2.default.createElement(
          'div',
          {
            style: _DataGridStyles.SCROLLER_STYLES,
            ref: this._handleScrollerRef
          },
          _react2.default.createElement(
            'div',
            {
              style: _DataGridStyles.HEADER_WRAPPER_STYLES,
              ref: this._handleHeaderWrapperRef
            },
            isGrouped && _react2.default.createElement(_DataGridHeaderRow2.default, {
              columnModel: groupedColumnModel,
              sortedKey: sortedKey,
              ref: this._handleGroupHeaderRef
            }),
            _react2.default.createElement(_DataGridHeaderRow2.default, {
              columnModel: columnModel,
              sortedKey: sortedKey,
              sortedDirection: sortedDirection,
              onHeightUpdated: this._handleHeaderHeightUpdate,
              onSortRequested: onSortRequested,
              ref: this._handleHeaderRef
            })
          ),
          _react2.default.createElement('div', { ref: this._handleHeaderPlaceholderRef }),
          _react2.default.createElement(
            'div',
            { ref: this._handleNoResultStateRef },
            this.props.isLoading && loadingContent,
            showNoDataContent && noDataElem
          ),
          this.props.data.map(function (record, index) {
            return _react2.default.createElement(_DataGridBodyRow2.default, {
              key: index,
              index: index,
              record: record,
              columnModel: columnModel,
              lastRow: index === rowCount - 1
            });
          })
        )
      );
    }
  }]);
  return TxlDataGrid;
}(_react2.default.Component)) || _class;

exports.default = TxlDataGrid;


TxlDataGrid.propTypes = {
  columnModel: _react.PropTypes.arrayOf(_ColumnModelPropType2.default).isRequired,
  data: _react.PropTypes.array,
  id: _react.PropTypes.string,
  isLoading: _react.PropTypes.bool,
  loadingContent: _react.PropTypes.node,
  noDataContent: _react.PropTypes.node,
  onSortRequested: _DataGridHeaderRow2.default.propTypes.onSortRequested,
  sortedDirection: _DataGridHeaderRow2.default.propTypes.sortedDirection,
  sortedKey: _DataGridHeaderRow2.default.propTypes.sortedKey,
  stickTop: _react.PropTypes.number, // in px
  stickyHeader: _react.PropTypes.bool
};

TxlDataGrid.defaultProps = {
  isLoading: false,
  noDataContent: 'No Results',
  stickTop: (0, _helpers.gridUnitsRaw)(13), // same height as header
  stickyHeader: false
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(COMPONENT_SELECTOR, 'COMPONENT_SELECTOR', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(PINNED_COLUMN_SELECTOR, 'PINNED_COLUMN_SELECTOR', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(PINNED_WRAPPER_SELECTOR, 'PINNED_WRAPPER_SELECTOR', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(UNPINNED_WRAPPER_SELECTOR, 'UNPINNED_WRAPPER_SELECTOR', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(INVALID_COLUMN_MODEL_MESSAGE, 'INVALID_COLUMN_MODEL_MESSAGE', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(getColumnSelector, 'getColumnSelector', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(getColumnRule, 'getColumnRule', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(getNoDataInnerContent, 'getNoDataInnerContent', 'src/_data-grid/DataGrid.jsx');

  __REACT_HOT_LOADER__.register(TxlDataGrid, 'TxlDataGrid', 'src/_data-grid/DataGrid.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,