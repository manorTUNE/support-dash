'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Base = require('../base/Base');

var _Base2 = _interopRequireDefault(_Base);

var _helpers = require('../styles/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ICON_BASE_STYLES = {
  display: 'inline-block'
};

var ICON_BASE_SIZE = 13;

var TxlIconGhostOutline = function (_TxlBase) {
  (0, _inherits3.default)(TxlIconGhostOutline, _TxlBase);

  function TxlIconGhostOutline() {
    (0, _classCallCheck3.default)(this, TxlIconGhostOutline);
    return (0, _possibleConstructorReturn3.default)(this, (TxlIconGhostOutline.__proto__ || (0, _getPrototypeOf2.default)(TxlIconGhostOutline)).apply(this, arguments));
  }

  (0, _createClass3.default)(TxlIconGhostOutline, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          color = _props.color,
          scale = _props.scale;


      var attrs = {
        fill: color,
        style: { display: 'block' }
      };

      var iconStyles = (0, _extends3.default)({}, ICON_BASE_STYLES, (0, _helpers.square)(ICON_BASE_SIZE * scale));

      return _react2.default.createElement(
        'i',
        {
          'data-component': 'TxlIconGhostOutline',
          style: iconStyles
        },
        _react2.default.createElement(
          'svg',
          (0, _extends3.default)({ viewBox: '0 0 260 260' }, attrs),
          _react2.default.createElement('path', { d: 'M100,120a20,20,0,1,1-20-20A20,20,0,0,1,100,120Zm80-20a20,20,0,1,0,20,20A20,20,0,0,0,180,100Zm74,159.16a10,10,0,0,0,6-9.16V130C260,58.32,201.68,0,130,0S0,58.32,0,130V250a10,10,0,0,0,16.78,7.35L50,226.7l33,30.63a10,10,0,0,0,13.59,0l33.28-30.86,33.85,30.91a10,10,0,0,0,13.48,0L210.43,227l32.77,30.3A10.07,10.07,0,0,0,250,260,10,10,0,0,0,254,259.16ZM123,205.55,89.8,236.36l-33-30.62a10,10,0,0,0-13.57,0L20,227.17V130a110,110,0,0,1,220,0v97.14l-22.73-21a10,10,0,0,0-13.54,0l-33.26,30.38-33.91-31a10,10,0,0,0-13.54,0Z' })
        )
      );
    }
  }]);
  return TxlIconGhostOutline;
}(_Base2.default);

exports.default = TxlIconGhostOutline;


TxlIconGhostOutline.displayName = 'TxlIconGhostOutline';

TxlIconGhostOutline.propTypes = {
  color: _react.PropTypes.string,
  scale: _react.PropTypes.number
};

TxlIconGhostOutline.defaultProps = {
  color: 'black',
  scale: 1
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(ICON_BASE_STYLES, 'ICON_BASE_STYLES', 'src/icons/GhostOutline.jsx');

  __REACT_HOT_LOADER__.register(ICON_BASE_SIZE, 'ICON_BASE_SIZE', 'src/icons/GhostOutline.jsx');

  __REACT_HOT_LOADER__.register(TxlIconGhostOutline, 'TxlIconGhostOutline', 'src/icons/GhostOutline.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pY29ucy9HaG9zdE91dGxpbmUuanN4Il0sIm5hbWVzIjpbIklDT05fQkFTRV9TVFlMRVMiLCJkaXNwbGF5IiwiSUNPTl9CQVNFX1NJWkUiLCJUeGxJY29uR2hvc3RPdXRsaW5lIiwicHJvcHMiLCJjb2xvciIsInNjYWxlIiwiYXR0cnMiLCJmaWxsIiwic3R5bGUiLCJpY29uU3R5bGVzIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJudW1iZXIiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxtQkFBbUI7QUFDdkJDLFdBQVM7QUFEYyxDQUF6Qjs7QUFJQSxJQUFNQyxpQkFBaUIsRUFBdkI7O0lBRXFCQyxtQjs7Ozs7Ozs7Ozs2QkFDVjtBQUFBLG1CQUlILEtBQUtDLEtBSkY7QUFBQSxVQUVMQyxLQUZLLFVBRUxBLEtBRks7QUFBQSxVQUdMQyxLQUhLLFVBR0xBLEtBSEs7OztBQU1QLFVBQU1DLFFBQVE7QUFDWkMsY0FBTUgsS0FETTtBQUVaSSxlQUFPLEVBQUVSLFNBQVMsT0FBWDtBQUZLLE9BQWQ7O0FBS0EsVUFBTVMsd0NBQ0RWLGdCQURDLEVBRUQscUJBQU9FLGlCQUFpQkksS0FBeEIsQ0FGQyxDQUFOOztBQUtBLGFBQ0U7QUFBQTtBQUFBO0FBQ0UsNEJBQWUscUJBRGpCO0FBRUUsaUJBQU9JO0FBRlQ7QUFJRTtBQUFBO0FBQUEsbUNBQUssU0FBUSxhQUFiLElBQStCSCxLQUEvQjtBQUFzQyxrREFBTSxHQUFFLGlnQkFBUjtBQUF0QztBQUpGLE9BREY7QUFRRDs7Ozs7a0JBekJrQkosbUI7OztBQTRCckJBLG9CQUFvQlEsV0FBcEIsR0FBa0MscUJBQWxDOztBQUVBUixvQkFBb0JTLFNBQXBCLEdBQWdDO0FBQzlCUCxTQUFPLGlCQUFVUSxNQURhO0FBRTlCUCxTQUFPLGlCQUFVUTtBQUZhLENBQWhDOztBQUtBWCxvQkFBb0JZLFlBQXBCLEdBQW1DO0FBQ2pDVixTQUFPLE9BRDBCO0FBRWpDQyxTQUFPO0FBRjBCLENBQW5DOzs7Ozs7OztnQ0F6Q01OLGdCOztnQ0FJQUUsYzs7Z0NBRWVDLG1CIiwiZmlsZSI6Ikdob3N0T3V0bGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHhsQmFzZSBmcm9tICcuLi9iYXNlL0Jhc2UnO1xuaW1wb3J0IHsgc3F1YXJlIH0gZnJvbSAnLi4vc3R5bGVzL2hlbHBlcnMnO1xuXG5jb25zdCBJQ09OX0JBU0VfU1RZTEVTID0ge1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbn07XG5cbmNvbnN0IElDT05fQkFTRV9TSVpFID0gMTM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR4bEljb25HaG9zdE91dGxpbmUgZXh0ZW5kcyBUeGxCYXNlIHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yLFxuICAgICAgc2NhbGUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIGZpbGw6IGNvbG9yLFxuICAgICAgc3R5bGU6IHsgZGlzcGxheTogJ2Jsb2NrJyB9LFxuICAgIH07XG5cbiAgICBjb25zdCBpY29uU3R5bGVzID0ge1xuICAgICAgLi4uSUNPTl9CQVNFX1NUWUxFUyxcbiAgICAgIC4uLnNxdWFyZShJQ09OX0JBU0VfU0laRSAqIHNjYWxlKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxpXG4gICAgICAgIGRhdGEtY29tcG9uZW50PVwiVHhsSWNvbkdob3N0T3V0bGluZVwiXG4gICAgICAgIHN0eWxlPXtpY29uU3R5bGVzfVxuICAgICAgPlxuICAgICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjYwIDI2MFwiIHsuLi5hdHRyc30+PHBhdGggZD1cIk0xMDAsMTIwYTIwLDIwLDAsMSwxLTIwLTIwQTIwLDIwLDAsMCwxLDEwMCwxMjBabTgwLTIwYTIwLDIwLDAsMSwwLDIwLDIwQTIwLDIwLDAsMCwwLDE4MCwxMDBabTc0LDE1OS4xNmExMCwxMCwwLDAsMCw2LTkuMTZWMTMwQzI2MCw1OC4zMiwyMDEuNjgsMCwxMzAsMFMwLDU4LjMyLDAsMTMwVjI1MGExMCwxMCwwLDAsMCwxNi43OCw3LjM1TDUwLDIyNi43bDMzLDMwLjYzYTEwLDEwLDAsMCwwLDEzLjU5LDBsMzMuMjgtMzAuODYsMzMuODUsMzAuOTFhMTAsMTAsMCwwLDAsMTMuNDgsMEwyMTAuNDMsMjI3bDMyLjc3LDMwLjNBMTAuMDcsMTAuMDcsMCwwLDAsMjUwLDI2MCwxMCwxMCwwLDAsMCwyNTQsMjU5LjE2Wk0xMjMsMjA1LjU1LDg5LjgsMjM2LjM2bC0zMy0zMC42MmExMCwxMCwwLDAsMC0xMy41NywwTDIwLDIyNy4xN1YxMzBhMTEwLDExMCwwLDAsMSwyMjAsMHY5Ny4xNGwtMjIuNzMtMjFhMTAsMTAsMCwwLDAtMTMuNTQsMGwtMzMuMjYsMzAuMzgtMzMuOTEtMzFhMTAsMTAsMCwwLDAtMTMuNTQsMFpcIiAvPjwvc3ZnPlxuICAgICAgPC9pPlxuICAgICk7XG4gIH1cbn1cblxuVHhsSWNvbkdob3N0T3V0bGluZS5kaXNwbGF5TmFtZSA9ICdUeGxJY29uR2hvc3RPdXRsaW5lJztcblxuVHhsSWNvbkdob3N0T3V0bGluZS5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzY2FsZTogUHJvcFR5cGVzLm51bWJlcixcbn07XG5cblR4bEljb25HaG9zdE91dGxpbmUuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2JsYWNrJyxcbiAgc2NhbGU6IDEsXG59O1xuIl19