'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _theme = require('../styles/theme');

var _helpers = require('../styles/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BORDER_RADIUS = '10px';
var BAR_STYLE = {
  borderRadius: BORDER_RADIUS,
  height: '3px',
  minWidth: (0, _helpers.gridUnits)(16)
};

var PROGRESS_FILL_STYLE = {
  borderBottomLeftRadius: BORDER_RADIUS,
  borderTopLeftRadius: BORDER_RADIUS,
  display: 'block',
  height: '100%',
  overflow: 'hidden'
};

var shadeMap = {
  background: {
    base: _theme.COLOR_ACCENT['300'],
    dark: _theme.COLOR_NEUTRAL['200'],
    light: _theme.COLOR_NEUTRAL['200']
  },
  foreground: {
    base: _theme.COLOR_ACCENT['500'],
    dark: _theme.COLOR_NEUTRAL['500'],
    light: _theme.COLOR_NEUTRAL['50']
  }
};

var TxlProgressBar = function TxlProgressBar(props) {
  var percentage = props.percentage,
      shade = props.shade;


  var CURRENT_PROGRESS_FILL_STYLE = (0, _extends3.default)({}, PROGRESS_FILL_STYLE, {
    backgroundColor: shadeMap.foreground[shade],
    width: Math.min(percentage, 100) + '%'
  });

  var BACKGROUND_BAR_STYLE = (0, _extends3.default)({}, BAR_STYLE, {
    backgroundColor: shadeMap.background[shade]
  });

  return _react2.default.createElement(
    'div',
    {
      'data-component': 'TxlProgressBar',
      style: BACKGROUND_BAR_STYLE
    },
    _react2.default.createElement('span', { style: CURRENT_PROGRESS_FILL_STYLE })
  );
};

TxlProgressBar.propTypes = {
  percentage: _react.PropTypes.number,
  shade: _react.PropTypes.oneOf(['light', 'dark', 'base'])
};

TxlProgressBar.defaultProps = {
  percentage: 0,
  shade: 'dark'
};

var _default = (0, _radium2.default)(TxlProgressBar);

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(BORDER_RADIUS, 'BORDER_RADIUS', 'src/progress-indicators/ProgressBar.jsx');

  __REACT_HOT_LOADER__.register(BAR_STYLE, 'BAR_STYLE', 'src/progress-indicators/ProgressBar.jsx');

  __REACT_HOT_LOADER__.register(PROGRESS_FILL_STYLE, 'PROGRESS_FILL_STYLE', 'src/progress-indicators/ProgressBar.jsx');

  __REACT_HOT_LOADER__.register(shadeMap, 'shadeMap', 'src/progress-indicators/ProgressBar.jsx');

  __REACT_HOT_LOADER__.register(TxlProgressBar, 'TxlProgressBar', 'src/progress-indicators/ProgressBar.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/progress-indicators/ProgressBar.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9ncmVzcy1pbmRpY2F0b3JzL1Byb2dyZXNzQmFyLmpzeCJdLCJuYW1lcyI6WyJCT1JERVJfUkFESVVTIiwiQkFSX1NUWUxFIiwiYm9yZGVyUmFkaXVzIiwiaGVpZ2h0IiwibWluV2lkdGgiLCJQUk9HUkVTU19GSUxMX1NUWUxFIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJkaXNwbGF5Iiwib3ZlcmZsb3ciLCJzaGFkZU1hcCIsImJhY2tncm91bmQiLCJiYXNlIiwiZGFyayIsImxpZ2h0IiwiZm9yZWdyb3VuZCIsIlR4bFByb2dyZXNzQmFyIiwicHJvcHMiLCJwZXJjZW50YWdlIiwic2hhZGUiLCJDVVJSRU5UX1BST0dSRVNTX0ZJTExfU1RZTEUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aWR0aCIsIk1hdGgiLCJtaW4iLCJCQUNLR1JPVU5EX0JBUl9TVFlMRSIsInByb3BUeXBlcyIsIm51bWJlciIsIm9uZU9mIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7O0FBRUEsSUFBTUEsZ0JBQWdCLE1BQXRCO0FBQ0EsSUFBTUMsWUFBWTtBQUNoQkMsZ0JBQWNGLGFBREU7QUFFaEJHLFVBQVEsS0FGUTtBQUdoQkMsWUFBVSx3QkFBRyxFQUFIO0FBSE0sQ0FBbEI7O0FBTUEsSUFBTUMsc0JBQXNCO0FBQzFCQywwQkFBd0JOLGFBREU7QUFFMUJPLHVCQUFxQlAsYUFGSztBQUcxQlEsV0FBUyxPQUhpQjtBQUkxQkwsVUFBUSxNQUprQjtBQUsxQk0sWUFBVTtBQUxnQixDQUE1Qjs7QUFRQSxJQUFNQyxXQUFXO0FBQ2ZDLGNBQVk7QUFDVkMsVUFBTSxvQkFBYSxLQUFiLENBREk7QUFFVkMsVUFBTSxxQkFBYyxLQUFkLENBRkk7QUFHVkMsV0FBTyxxQkFBYyxLQUFkO0FBSEcsR0FERztBQU1mQyxjQUFZO0FBQ1ZILFVBQU0sb0JBQWEsS0FBYixDQURJO0FBRVZDLFVBQU0scUJBQWMsS0FBZCxDQUZJO0FBR1ZDLFdBQU8scUJBQWMsSUFBZDtBQUhHO0FBTkcsQ0FBakI7O0FBYUEsSUFBTUUsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxLQUFELEVBQVc7QUFBQSxNQUN4QkMsVUFEd0IsR0FDRkQsS0FERSxDQUN4QkMsVUFEd0I7QUFBQSxNQUNaQyxLQURZLEdBQ0ZGLEtBREUsQ0FDWkUsS0FEWTs7O0FBR2hDLE1BQU1DLHlEQUNEZixtQkFEQztBQUVKZ0IscUJBQWlCWCxTQUFTSyxVQUFULENBQW9CSSxLQUFwQixDQUZiO0FBR0pHLFdBQVVDLEtBQUtDLEdBQUwsQ0FBU04sVUFBVCxFQUFxQixHQUFyQixDQUFWO0FBSEksSUFBTjs7QUFNQSxNQUFNTyxrREFDRHhCLFNBREM7QUFFSm9CLHFCQUFpQlgsU0FBU0MsVUFBVCxDQUFvQlEsS0FBcEI7QUFGYixJQUFOOztBQUtBLFNBQ0U7QUFBQTtBQUFBO0FBQ0Usd0JBQWUsZ0JBRGpCO0FBRUUsYUFBT007QUFGVDtBQUlFLDRDQUFNLE9BQU9MLDJCQUFiO0FBSkYsR0FERjtBQVFELENBdEJEOztBQXdCQUosZUFBZVUsU0FBZixHQUEyQjtBQUN6QlIsY0FBWSxpQkFBVVMsTUFERztBQUV6QlIsU0FBTyxpQkFBVVMsS0FBVixDQUFnQixDQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWtCLE1BQWxCLENBQWhCO0FBRmtCLENBQTNCOztBQUtBWixlQUFlYSxZQUFmLEdBQThCO0FBQzVCWCxjQUFZLENBRGdCO0FBRTVCQyxTQUFPO0FBRnFCLENBQTlCOztlQUtlLHNCQUFPSCxjQUFQLEM7Ozs7Ozs7Ozs7Z0NBOURUaEIsYTs7Z0NBQ0FDLFM7O2dDQU1BSSxtQjs7Z0NBUUFLLFE7O2dDQWFBTSxjIiwiZmlsZSI6IlByb2dyZXNzQmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IHsgQ09MT1JfQUNDRU5ULCBDT0xPUl9ORVVUUkFMIH0gZnJvbSAnLi4vc3R5bGVzL3RoZW1lJztcbmltcG9ydCB7IGdyaWRVbml0cyBhcyBndSB9IGZyb20gJy4uL3N0eWxlcy9oZWxwZXJzJztcblxuY29uc3QgQk9SREVSX1JBRElVUyA9ICcxMHB4JztcbmNvbnN0IEJBUl9TVFlMRSA9IHtcbiAgYm9yZGVyUmFkaXVzOiBCT1JERVJfUkFESVVTLFxuICBoZWlnaHQ6ICczcHgnLFxuICBtaW5XaWR0aDogZ3UoMTYpLFxufTtcblxuY29uc3QgUFJPR1JFU1NfRklMTF9TVFlMRSA9IHtcbiAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogQk9SREVSX1JBRElVUyxcbiAgYm9yZGVyVG9wTGVmdFJhZGl1czogQk9SREVSX1JBRElVUyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbn07XG5cbmNvbnN0IHNoYWRlTWFwID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFzZTogQ09MT1JfQUNDRU5UWyczMDAnXSxcbiAgICBkYXJrOiBDT0xPUl9ORVVUUkFMWycyMDAnXSxcbiAgICBsaWdodDogQ09MT1JfTkVVVFJBTFsnMjAwJ10sXG4gIH0sXG4gIGZvcmVncm91bmQ6IHtcbiAgICBiYXNlOiBDT0xPUl9BQ0NFTlRbJzUwMCddLFxuICAgIGRhcms6IENPTE9SX05FVVRSQUxbJzUwMCddLFxuICAgIGxpZ2h0OiBDT0xPUl9ORVVUUkFMWyc1MCddLFxuICB9LFxufTtcblxuY29uc3QgVHhsUHJvZ3Jlc3NCYXIgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBwZXJjZW50YWdlLCBzaGFkZSB9ID0gcHJvcHM7XG5cbiAgY29uc3QgQ1VSUkVOVF9QUk9HUkVTU19GSUxMX1NUWUxFID0ge1xuICAgIC4uLlBST0dSRVNTX0ZJTExfU1RZTEUsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzaGFkZU1hcC5mb3JlZ3JvdW5kW3NoYWRlXSxcbiAgICB3aWR0aDogYCR7TWF0aC5taW4ocGVyY2VudGFnZSwgMTAwKX0lYCxcbiAgfTtcblxuICBjb25zdCBCQUNLR1JPVU5EX0JBUl9TVFlMRSA9IHtcbiAgICAuLi5CQVJfU1RZTEUsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzaGFkZU1hcC5iYWNrZ3JvdW5kW3NoYWRlXSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGRhdGEtY29tcG9uZW50PVwiVHhsUHJvZ3Jlc3NCYXJcIlxuICAgICAgc3R5bGU9e0JBQ0tHUk9VTkRfQkFSX1NUWUxFfVxuICAgID5cbiAgICAgIDxzcGFuIHN0eWxlPXtDVVJSRU5UX1BST0dSRVNTX0ZJTExfU1RZTEV9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5UeGxQcm9ncmVzc0Jhci5wcm9wVHlwZXMgPSB7XG4gIHBlcmNlbnRhZ2U6IFByb3BUeXBlcy5udW1iZXIsXG4gIHNoYWRlOiBQcm9wVHlwZXMub25lT2YoWydsaWdodCcsICdkYXJrJywgJ2Jhc2UnXSksXG59O1xuXG5UeGxQcm9ncmVzc0Jhci5kZWZhdWx0UHJvcHMgPSB7XG4gIHBlcmNlbnRhZ2U6IDAsXG4gIHNoYWRlOiAnZGFyaycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oVHhsUHJvZ3Jlc3NCYXIpO1xuIl19