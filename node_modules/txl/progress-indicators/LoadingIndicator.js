'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _helpers = require('../styles/helpers');

var _animations = require('../styles/mixins/animations');

var _theme = require('../styles/theme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getBorderColors(color) {
  return {
    borderBottomColor: color,
    borderLeftColor: color,
    borderTopColor: color
  };
}

var STYLES = {
  base: (0, _extends3.default)({}, (0, _animations.getSpinStyles)(), {
    borderRadius: '50%',
    borderRightColor: 'transparent',
    borderStyle: 'solid',
    borderWidth: 2
  }),
  shade: {
    base: getBorderColors(_theme.COLOR_ACCENT['500']),
    dark: getBorderColors(_theme.COLOR_NEUTRAL['700']),
    light: getBorderColors(_theme.COLOR_NEUTRAL['50'])
  },
  size: {
    large: (0, _helpers.square)('63px'),
    medium: (0, _helpers.square)('33px'),
    small: (0, _helpers.square)('13px')
  }
};

var TxlLoadingIndicator = function TxlLoadingIndicator(props) {
  var color = props.color,
      shade = props.shade,
      size = props.size;


  var borderColor = color ? getBorderColors(color) : STYLES.shade[shade];
  var styles = (0, _helpers.combineStyles)(STYLES.base, STYLES.size[size], borderColor);

  return _react2.default.createElement('div', {
    'data-component': 'TxlLoadingIndicator',
    style: styles
  });
};

TxlLoadingIndicator.propTypes = {
  color: _react.PropTypes.string,
  shade: _react.PropTypes.oneOf(['light', 'dark', 'base']),
  size: _react.PropTypes.oneOf(['small', 'medium', 'large'])
};

TxlLoadingIndicator.defaultProps = {
  shade: 'dark',
  size: 'large'
};

var _default = (0, _radium2.default)(TxlLoadingIndicator);

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(getBorderColors, 'getBorderColors', 'src/progress-indicators/LoadingIndicator.jsx');

  __REACT_HOT_LOADER__.register(STYLES, 'STYLES', 'src/progress-indicators/LoadingIndicator.jsx');

  __REACT_HOT_LOADER__.register(TxlLoadingIndicator, 'TxlLoadingIndicator', 'src/progress-indicators/LoadingIndicator.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/progress-indicators/LoadingIndicator.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9ncmVzcy1pbmRpY2F0b3JzL0xvYWRpbmdJbmRpY2F0b3IuanN4Il0sIm5hbWVzIjpbImdldEJvcmRlckNvbG9ycyIsImNvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJUb3BDb2xvciIsIlNUWUxFUyIsImJhc2UiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsInNoYWRlIiwiZGFyayIsImxpZ2h0Iiwic2l6ZSIsImxhcmdlIiwibWVkaXVtIiwic21hbGwiLCJUeGxMb2FkaW5nSW5kaWNhdG9yIiwicHJvcHMiLCJib3JkZXJDb2xvciIsInN0eWxlcyIsInByb3BUeXBlcyIsInN0cmluZyIsIm9uZU9mIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOztBQUlBOztBQUNBOzs7O0FBS0EsU0FBU0EsZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0M7QUFDOUIsU0FBTztBQUNMQyx1QkFBbUJELEtBRGQ7QUFFTEUscUJBQWlCRixLQUZaO0FBR0xHLG9CQUFnQkg7QUFIWCxHQUFQO0FBS0Q7O0FBRUQsSUFBTUksU0FBUztBQUNiQyxtQ0FDSyxnQ0FETDtBQUVFQyxrQkFBYyxLQUZoQjtBQUdFQyxzQkFBa0IsYUFIcEI7QUFJRUMsaUJBQWEsT0FKZjtBQUtFQyxpQkFBYTtBQUxmLElBRGE7QUFRYkMsU0FBTztBQUNMTCxVQUFNTixnQkFBZ0Isb0JBQWEsS0FBYixDQUFoQixDQUREO0FBRUxZLFVBQU1aLGdCQUFnQixxQkFBYyxLQUFkLENBQWhCLENBRkQ7QUFHTGEsV0FBT2IsZ0JBQWdCLHFCQUFjLElBQWQsQ0FBaEI7QUFIRixHQVJNO0FBYWJjLFFBQU07QUFDSkMsV0FBTyxxQkFBTyxNQUFQLENBREg7QUFFSkMsWUFBUSxxQkFBTyxNQUFQLENBRko7QUFHSkMsV0FBTyxxQkFBTyxNQUFQO0FBSEg7QUFiTyxDQUFmOztBQW9CQSxJQUFNQyxzQkFBc0IsU0FBdEJBLG1CQUFzQixDQUFDQyxLQUFELEVBQVc7QUFBQSxNQUVuQ2xCLEtBRm1DLEdBS2pDa0IsS0FMaUMsQ0FFbkNsQixLQUZtQztBQUFBLE1BR25DVSxLQUhtQyxHQUtqQ1EsS0FMaUMsQ0FHbkNSLEtBSG1DO0FBQUEsTUFJbkNHLElBSm1DLEdBS2pDSyxLQUxpQyxDQUluQ0wsSUFKbUM7OztBQU9yQyxNQUFNTSxjQUFjbkIsUUFBUUQsZ0JBQWdCQyxLQUFoQixDQUFSLEdBQWlDSSxPQUFPTSxLQUFQLENBQWFBLEtBQWIsQ0FBckQ7QUFDQSxNQUFNVSxTQUFTLDRCQUNiaEIsT0FBT0MsSUFETSxFQUViRCxPQUFPUyxJQUFQLENBQVlBLElBQVosQ0FGYSxFQUdiTSxXQUhhLENBQWY7O0FBTUEsU0FDRTtBQUNFLHNCQUFlLHFCQURqQjtBQUVFLFdBQU9DO0FBRlQsSUFERjtBQU1ELENBcEJEOztBQXNCQUgsb0JBQW9CSSxTQUFwQixHQUFnQztBQUM5QnJCLFNBQU8saUJBQVVzQixNQURhO0FBRTlCWixTQUFPLGlCQUFVYSxLQUFWLENBQWdCLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsTUFBbEIsQ0FBaEIsQ0FGdUI7QUFHOUJWLFFBQU0saUJBQVVVLEtBQVYsQ0FBZ0IsQ0FBQyxPQUFELEVBQVUsUUFBVixFQUFvQixPQUFwQixDQUFoQjtBQUh3QixDQUFoQzs7QUFNQU4sb0JBQW9CTyxZQUFwQixHQUFtQztBQUNqQ2QsU0FBTyxNQUQwQjtBQUVqQ0csUUFBTTtBQUYyQixDQUFuQzs7ZUFLZSxzQkFBT0ksbUJBQVAsQzs7Ozs7Ozs7OztnQ0E3RE5sQixlOztnQ0FRSEssTTs7Z0NBb0JBYSxtQiIsImZpbGUiOiJMb2FkaW5nSW5kaWNhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IHtcbiAgY29tYmluZVN0eWxlcyxcbiAgc3F1YXJlLFxufSBmcm9tICcuLi9zdHlsZXMvaGVscGVycyc7XG5pbXBvcnQgeyBnZXRTcGluU3R5bGVzIH0gZnJvbSAnLi4vc3R5bGVzL21peGlucy9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIENPTE9SX0FDQ0VOVCxcbiAgQ09MT1JfTkVVVFJBTCxcbn0gZnJvbSAnLi4vc3R5bGVzL3RoZW1lJztcblxuZnVuY3Rpb24gZ2V0Qm9yZGVyQ29sb3JzKGNvbG9yKSB7XG4gIHJldHVybiB7XG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IGNvbG9yLFxuICAgIGJvcmRlckxlZnRDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyVG9wQ29sb3I6IGNvbG9yLFxuICB9O1xufVxuXG5jb25zdCBTVFlMRVMgPSB7XG4gIGJhc2U6IHtcbiAgICAuLi5nZXRTcGluU3R5bGVzKCksXG4gICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICBib3JkZXJSaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgIGJvcmRlcldpZHRoOiAyLFxuICB9LFxuICBzaGFkZToge1xuICAgIGJhc2U6IGdldEJvcmRlckNvbG9ycyhDT0xPUl9BQ0NFTlRbJzUwMCddKSxcbiAgICBkYXJrOiBnZXRCb3JkZXJDb2xvcnMoQ09MT1JfTkVVVFJBTFsnNzAwJ10pLFxuICAgIGxpZ2h0OiBnZXRCb3JkZXJDb2xvcnMoQ09MT1JfTkVVVFJBTFsnNTAnXSksXG4gIH0sXG4gIHNpemU6IHtcbiAgICBsYXJnZTogc3F1YXJlKCc2M3B4JyksXG4gICAgbWVkaXVtOiBzcXVhcmUoJzMzcHgnKSxcbiAgICBzbWFsbDogc3F1YXJlKCcxM3B4JyksXG4gIH0sXG59O1xuXG5jb25zdCBUeGxMb2FkaW5nSW5kaWNhdG9yID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBzaGFkZSxcbiAgICBzaXplLFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgYm9yZGVyQ29sb3IgPSBjb2xvciA/IGdldEJvcmRlckNvbG9ycyhjb2xvcikgOiBTVFlMRVMuc2hhZGVbc2hhZGVdO1xuICBjb25zdCBzdHlsZXMgPSBjb21iaW5lU3R5bGVzKFxuICAgIFNUWUxFUy5iYXNlLFxuICAgIFNUWUxFUy5zaXplW3NpemVdLFxuICAgIGJvcmRlckNvbG9yXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBkYXRhLWNvbXBvbmVudD1cIlR4bExvYWRpbmdJbmRpY2F0b3JcIlxuICAgICAgc3R5bGU9e3N0eWxlc31cbiAgICAvPlxuICApO1xufTtcblxuVHhsTG9hZGluZ0luZGljYXRvci5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaGFkZTogUHJvcFR5cGVzLm9uZU9mKFsnbGlnaHQnLCAnZGFyaycsICdiYXNlJ10pLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksXG59O1xuXG5UeGxMb2FkaW5nSW5kaWNhdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2hhZGU6ICdkYXJrJyxcbiAgc2l6ZTogJ2xhcmdlJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShUeGxMb2FkaW5nSW5kaWNhdG9yKTtcbiJdfQ==