'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _desc, _value, _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _unionWith = require('lodash/unionWith');

var _unionWith2 = _interopRequireDefault(_unionWith);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _some = require('lodash/some');

var _some2 = _interopRequireDefault(_some);

var _Base = require('../base/Base');

var _SelectControl = require('./SelectControl');

var _SelectControl2 = _interopRequireDefault(_SelectControl);

var _MultiSelectItem = require('../_selects/MultiSelectItem');

var _MultiSelectItem2 = _interopRequireDefault(_MultiSelectItem);

var _MultiSelectDropdownHeader = require('../dropdowns/MultiSelectDropdownHeader');

var _MultiSelectDropdownHeader2 = _interopRequireDefault(_MultiSelectDropdownHeader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
 * isEqual is comparator between two value with given keyMapper funciton
 *
 * comparatee will be sorted than each items are going to be compared using keyMapper.
 * @param  {Array}      value       previous value in array
 * @param  {Array}      nextValue   nextValue in array
 * @param  {Function}   keyMapper   function that maps an item to be unique identifier.
 * @return {Boolean}                returns true if two values are equal
 */
function isEqual(value, nextValue, keyMapper) {
  var sortedValue = (value || []).sort();
  var sortedNextValue = (nextValue || []).sort();
  return sortedValue.length === sortedNextValue.length && sortedValue.every(function (item, idx) {
    return (0, _isEqual2.default)(keyMapper(item), keyMapper(sortedNextValue[idx]));
  });
}

function createIndexMap() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var value = props.value,
      keyMapper = props.keyMapper;

  var idxMap = {};
  (value || []).forEach(function (item) {
    var key = keyMapper(item);
    idxMap[key] = item;
  });
  return idxMap;
}

var TxlMultiSelectControl = (_class = function (_React$Component) {
  (0, _inherits3.default)(TxlMultiSelectControl, _React$Component);

  function TxlMultiSelectControl(args) {
    (0, _classCallCheck3.default)(this, TxlMultiSelectControl);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TxlMultiSelectControl.__proto__ || (0, _getPrototypeOf2.default)(TxlMultiSelectControl)).call(this, args));

    _this._indexMap = createIndexMap(_this.props);

    _this.state = {
      keySelectedItemIndex: null
    };
    return _this;
  }

  (0, _createClass3.default)(TxlMultiSelectControl, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!isEqual(this.props.value, nextProps.value, nextProps.keyMapper)) {
        this._indexMap = createIndexMap(nextProps);
      }
    }
  }, {
    key: '_onSelectAll',
    value: function _onSelectAll() {
      var currentlySelectedItems = this.props.value || [];
      var filteredItems = this._selectControl.getFilteredItems().getItems();
      var selectedItems = (0, _unionWith2.default)(currentlySelectedItems, filteredItems, _isEqual2.default);
      this.props.onChange({ value: selectedItems });
    }
  }, {
    key: '_onSelectNone',
    value: function _onSelectNone() {
      var filteredItems = this._selectControl.getFilteredItems().getItems();
      var selectedItems = this.props.value.filter(function (item) {
        return !(0, _some2.default)(filteredItems, item);
      });
      this.props.onChange({ value: selectedItems });
    }
  }, {
    key: '_handleSelectRef',
    value: function _handleSelectRef(ref) {
      this._selectControl = ref;
    }
  }, {
    key: '_handleHeaderRef',
    value: function _handleHeaderRef(ref) {
      this._header = ref;
    }
  }, {
    key: '_checkSelected',
    value: function _checkSelected(item) {
      var keyMapper = this.props.keyMapper;

      var itemKey = keyMapper(item);
      return !!this._indexMap[itemKey];
    }
  }, {
    key: '_onChange',
    value: function _onChange(item) {
      if (!item) {
        this.props.onChange({ value: [] });
      } else {
        var _props = this.props,
            keyMapper = _props.keyMapper,
            onChange = _props.onChange,
            value = _props.value;


        var itemKey = keyMapper(item);
        var containsItem = this._indexMap[itemKey] != null;

        if (value != null) {
          // toggle item selection
          var change = containsItem ? value.filter(function (valueItem) {
            return !(0, _isEqual2.default)(item, valueItem);
          }) : [].concat((0, _toConsumableArray3.default)(value), [item]);
          onChange({ value: change });
        }
      }
    }
  }, {
    key: '_handleKeySelectedItemIndexChange',
    value: function _handleKeySelectedItemIndexChange(_ref) {
      var keySelectedItemIndex = _ref.keySelectedItemIndex;

      this.setState({ keySelectedItemIndex: keySelectedItemIndex });
    }
  }, {
    key: 'keySelectedItemClear',
    value: function keySelectedItemClear() {
      this.setState({ keySelectedItemIndex: null });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          closeDropdown = _props2.closeDropdown,
          container = _props2.container,
          enableLocalFiltering = _props2.enableLocalFiltering,
          grouper = _props2.grouper,
          groupRenderer = _props2.groupRenderer,
          itemHeight = _props2.itemHeight,
          itemRenderer = _props2.itemRenderer,
          items = _props2.items,
          keyMapper = _props2.keyMapper,
          label = _props2.label,
          initialListProps = _props2.listProps,
          loading = _props2.loading,
          noContentView = _props2.noContentView,
          onItemCreate = _props2.onItemCreate,
          open = _props2.open,
          openDropdown = _props2.openDropdown,
          onSearchChange = _props2.onSearchChange,
          placeholder = _props2.placeholder,
          predicateGetter = _props2.predicateGetter,
          secondaryText = _props2.secondaryText,
          showCreateNew = _props2.showCreateNew,
          showSearchToViewMoreMessage = _props2.showSearchToViewMoreMessage,
          target = _props2.target,
          validationState = _props2.validationState,
          value = _props2.value,
          valueMapper = _props2.valueMapper,
          width = _props2.width;


      var listHeader = _react2.default.createElement(
        'div',
        { ref: this._handleHeaderRef },
        initialListProps.header || _react2.default.createElement(_MultiSelectDropdownHeader2.default, {
          onSelectAll: this._onSelectAll,
          onSelectNone: this._onSelectNone
        })
      );

      var listProps = (0, _extends3.default)({}, initialListProps, {
        header: listHeader
      });

      return _react2.default.createElement(_SelectControl2.default, {
        closeDropdown: closeDropdown,
        container: container,
        enableLocalFiltering: enableLocalFiltering,
        grouper: grouper,
        groupRenderer: groupRenderer,
        isItemSelected: this._checkSelected,
        itemHeight: itemHeight,
        itemRenderer: itemRenderer,
        items: items,
        keyMapper: keyMapper,
        keySelectedItemClear: this.keySelectedItemClear,
        keySelectedItemIndex: this.state.keySelectedItemIndex,
        label: label,
        listProps: listProps,
        loading: loading,
        noContentView: noContentView,
        onChange: this._onChange,
        onItemCreate: onItemCreate,
        onKeySelectedItemIndexChange: this._handleKeySelectedItemIndexChange,
        onSearchChange: onSearchChange,
        open: open,
        openDropdown: openDropdown,
        placeholder: placeholder,
        predicateGetter: predicateGetter,
        ref: this._handleSelectRef,
        secondaryText: secondaryText,
        showCreateNew: showCreateNew,
        showSearchToViewMoreMessage: showSearchToViewMoreMessage,
        target: target,
        validationState: validationState,
        value: value,
        valueMapper: valueMapper,
        width: width
      });
    }
  }]);
  return TxlMultiSelectControl;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class.prototype, '_onSelectAll', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_onSelectAll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_onSelectNone', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_onSelectNone'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleSelectRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleSelectRef'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleHeaderRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleHeaderRef'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_checkSelected', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_checkSelected'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_onChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_onChange'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleKeySelectedItemIndexChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleKeySelectedItemIndexChange'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'keySelectedItemClear', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'keySelectedItemClear'), _class.prototype)), _class);


TxlMultiSelectControl.propTypes = {
  closeDropdown: _SelectControl2.default.propTypes.closeDropdown,
  container: _SelectControl2.default.propTypes.container,
  enableLocalFiltering: _SelectControl2.default.propTypes.enableLocalFiltering,
  groupRenderer: _react.PropTypes.func,
  grouper: _SelectControl2.default.propTypes.grouper,
  itemHeight: _SelectControl2.default.propTypes.itemHeight,
  itemRenderer: _SelectControl2.default.propTypes.itemRenderer,
  items: _SelectControl2.default.propTypes.items,
  keyMapper: _SelectControl2.default.propTypes.keyMapper,
  label: _SelectControl2.default.propTypes.label,
  listProps: _SelectControl2.default.propTypes.listProps,
  loading: _SelectControl2.default.propTypes.loading,
  noContentView: _SelectControl2.default.propTypes.noContentView,
  onChange: _react.PropTypes.func.isRequired,
  onItemCreate: _react.PropTypes.func,
  onSearchChange: _SelectControl2.default.propTypes.onSearchChange,
  onSelectAll: _react.PropTypes.func,
  onSelectNone: _react.PropTypes.func,
  open: _SelectControl2.default.propTypes.open,
  openDropdown: _SelectControl2.default.propTypes.openDropdown,
  placeholder: _SelectControl2.default.propTypes.placeholder,
  predicateGetter: _SelectControl2.default.propTypes.predicateGetter,
  secondaryText: _SelectControl2.default.propTypes.secondaryText,
  showCreateNew: _SelectControl2.default.propTypes.showCreateNew,
  showSearchToViewMoreMessage: _SelectControl2.default.propTypes.showSearchToViewMoreMessage,
  target: _SelectControl2.default.propTypes.target,
  validationState: _SelectControl2.default.propTypes.validationState,
  value: _SelectControl2.default.propTypes.value,
  valueMapper: _SelectControl2.default.propTypes.valueMapper,
  width: _SelectControl2.default.propTypes.width
};

TxlMultiSelectControl.displayName = 'TxlMultiSelectControl';

TxlMultiSelectControl.defaultProps = {
  enableLocalFiltering: true,
  itemRenderer: _react2.default.createFactory(_MultiSelectItem2.default),
  items: [],
  keyMapper: function keyMapper(item) {
    return String(item.id);
  },
  loading: false,
  onChange: _Base.NOOP,
  onSearchChange: Function.prototype,
  value: [],
  valueMapper: function valueMapper(item) {
    return item.value;
  }
};

var _default = TxlMultiSelectControl;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(isEqual, 'isEqual', 'src/_selects/MultiSelectControl.jsx');

  __REACT_HOT_LOADER__.register(createIndexMap, 'createIndexMap', 'src/_selects/MultiSelectControl.jsx');

  __REACT_HOT_LOADER__.register(TxlMultiSelectControl, 'TxlMultiSelectControl', 'src/_selects/MultiSelectControl.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/_selects/MultiSelectControl.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,