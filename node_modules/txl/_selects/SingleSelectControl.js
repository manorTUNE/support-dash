'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _desc, _value, _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Base = require('../base/Base');

var _SelectControl = require('./SelectControl');

var _SelectControl2 = _interopRequireDefault(_SelectControl);

var _SingleSelectItem = require('../_selects/SingleSelectItem');

var _SingleSelectItem2 = _interopRequireDefault(_SingleSelectItem);

var _Actions = require('../constants/Actions');

var _lists = require('../lists/lists.style');

var _KeyCodes = require('../constants/KeyCodes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var SELECT_NONE_ITEM = {
  id: _Actions.SELECT_NONE,
  value: 'None'
};

var TxlSingleSelectControl = (_class = function (_React$Component) {
  (0, _inherits3.default)(TxlSingleSelectControl, _React$Component);

  // Used to hover show the selected choice, but need a way to show hover
  // another way for arrow select.
  function TxlSingleSelectControl(props) {
    (0, _classCallCheck3.default)(this, TxlSingleSelectControl);

    // Can be used for keyboard controlled select behaviour.
    var _this = (0, _possibleConstructorReturn3.default)(this, (TxlSingleSelectControl.__proto__ || (0, _getPrototypeOf2.default)(TxlSingleSelectControl)).call(this, props));

    _this.state = {
      keySelectedItemIndex: null
    };
    return _this;
  }

  (0, _createClass3.default)(TxlSingleSelectControl, [{
    key: 'valueMapper',
    value: function valueMapper(item) {
      if (this.props.showCreateNew && item.id === _Actions.CREATE_NEW) {
        var showCreateNewLabel = this.props.showCreateNewLabel;

        var label = showCreateNewLabel ? this._getCreateNewLabel() : null;
        return _react2.default.createElement(
          'div',
          null,
          item.value + ' ',
          label
        );
      }

      return item.value;
    }
  }, {
    key: '_getCreateNewLabel',
    value: function _getCreateNewLabel() {
      return _react2.default.createElement(
        'span',
        { style: _lists.LIST_ITEM_SELECTED_SUBTEXT_STYLE },
        '( create new )'
      );
    }
  }, {
    key: '_checkSelected',
    value: function _checkSelected(item) {
      return this.props.value === item;
    }
  }, {
    key: '_clearValue',
    value: function _clearValue() {
      this._handleChange(null);
      this._selectControl.clearSearch();
    }
  }, {
    key: '_handleHeaderRef',
    value: function _handleHeaderRef(ref) {
      this._header = ref;
    }
  }, {
    key: '_handleSelectRef',
    value: function _handleSelectRef(ref) {
      this._selectControl = ref;
    }
  }, {
    key: '_handleKeyDown',
    value: function _handleKeyDown(_ref) {
      var keyCode = _ref.keyCode;

      if (keyCode === _KeyCodes.ENTER && this.props.open) {
        this.props.closeDropdown();
      }
    }
  }, {
    key: '_updateValue',
    value: function _updateValue(item) {
      this._handleChange(item);
      this.props.closeDropdown();
    }
  }, {
    key: '_handleChange',
    value: function _handleChange(item) {
      if (item && item.id === _Actions.SELECT_NONE) {
        this._clearValue();
      } else {
        this.props.onChange({ value: item });
      }
    }
  }, {
    key: '_handleKeySelectedItemIndexChange',
    value: function _handleKeySelectedItemIndexChange(_ref2) {
      var keySelectedItemIndex = _ref2.keySelectedItemIndex;

      this.setState({ keySelectedItemIndex: keySelectedItemIndex });
    }
  }, {
    key: 'keySelectedItemClear',
    value: function keySelectedItemClear() {
      this.setState({ keySelectedItemIndex: null });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          allowNone = _props.allowNone,
          closeDropdown = _props.closeDropdown,
          container = _props.container,
          enableLocalFiltering = _props.enableLocalFiltering,
          grouper = _props.grouper,
          groupRenderer = _props.groupRenderer,
          itemHeight = _props.itemHeight,
          itemRenderer = _props.itemRenderer,
          items = _props.items,
          keyMapper = _props.keyMapper,
          label = _props.label,
          listProps = _props.listProps,
          loading = _props.loading,
          noContentView = _props.noContentView,
          onItemCreate = _props.onItemCreate,
          onSearchChange = _props.onSearchChange,
          open = _props.open,
          openDropdown = _props.openDropdown,
          placeholder = _props.placeholder,
          predicateGetter = _props.predicateGetter,
          secondaryText = _props.secondaryText,
          showCreateNew = _props.showCreateNew,
          showSearchToViewMoreMessage = _props.showSearchToViewMoreMessage,
          target = _props.target,
          validationState = _props.validationState,
          value = _props.value,
          valueMapper = _props.valueMapper,
          width = _props.width;


      return _react2.default.createElement(_SelectControl2.default, {
        allowHeaderKeyboardSelection: allowNone,
        closeDropdown: closeDropdown,
        container: container,
        enableLocalFiltering: enableLocalFiltering,
        grouper: grouper,
        groupRenderer: groupRenderer,
        isItemSelected: this._checkSelected,
        itemHeight: itemHeight,
        itemRenderer: itemRenderer,
        items: allowNone ? [SELECT_NONE_ITEM].concat((0, _toConsumableArray3.default)(items)) : items,
        keyMapper: keyMapper,
        keySelectedItemClear: this.keySelectedItemClear,
        keySelectedItemIndex: this.state.keySelectedItemIndex,
        label: label,
        listProps: listProps,
        loading: loading,
        noContentView: noContentView,
        onChange: this._updateValue,
        onItemCreate: onItemCreate,
        onKeyDown: this._handleKeyDown,
        onKeySelectedItemIndexChange: this._handleKeySelectedItemIndexChange,
        onSearchChange: onSearchChange,
        open: open,
        openDropdown: openDropdown,
        placeholder: placeholder,
        predicateGetter: predicateGetter,
        ref: this._handleSelectRef,
        secondaryText: secondaryText,
        shouldInputWrap: false,
        showCreateNew: showCreateNew,
        showSearchToViewMoreMessage: showSearchToViewMoreMessage,
        target: target,
        validationState: validationState,
        value: value,
        valueMapper: valueMapper || this.valueMapper,
        width: width
      });
    }
  }]);
  return TxlSingleSelectControl;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class.prototype, 'valueMapper', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'valueMapper'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_checkSelected', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_checkSelected'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_clearValue', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_clearValue'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleHeaderRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleHeaderRef'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleSelectRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleSelectRef'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleKeyDown', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_updateValue', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_updateValue'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleChange'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleKeySelectedItemIndexChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleKeySelectedItemIndexChange'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'keySelectedItemClear', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'keySelectedItemClear'), _class.prototype)), _class);


TxlSingleSelectControl.propTypes = {
  allowNone: _react.PropTypes.bool,
  closeDropdown: _react.PropTypes.func,
  container: _SelectControl2.default.propTypes.container,
  enableLocalFiltering: _SelectControl2.default.propTypes.enableLocalFiltering,
  groupRenderer: _react.PropTypes.func,
  grouper: _SelectControl2.default.propTypes.grouper,
  itemHeight: _SelectControl2.default.propTypes.itemHeight,
  itemRenderer: _SelectControl2.default.propTypes.itemRenderer,
  items: _SelectControl2.default.propTypes.items,
  keyMapper: _SelectControl2.default.propTypes.keyMapper,
  label: _SelectControl2.default.propTypes.label,
  listProps: _SelectControl2.default.propTypes.listProps,
  loading: _SelectControl2.default.propTypes.loading,
  noContentView: _SelectControl2.default.propTypes.noContentView,
  onChange: _react.PropTypes.func.isRequired,
  onItemCreate: _react.PropTypes.func,
  onSearchChange: _SelectControl2.default.propTypes.onSearchChange,
  onSelectNone: _react.PropTypes.func,
  open: _SelectControl2.default.propTypes.open,
  openDropdown: _SelectControl2.default.propTypes.openDropdown,
  placeholder: _SelectControl2.default.propTypes.placeholder,
  predicateGetter: _SelectControl2.default.propTypes.predicateGetter,
  secondaryText: _SelectControl2.default.propTypes.secondaryText,
  showCreateNew: _SelectControl2.default.propTypes.showCreateNew,
  showCreateNewLabel: _react.PropTypes.bool,
  showSearchToViewMoreMessage: _SelectControl2.default.propTypes.showSearchToViewMoreMessage,
  target: _SelectControl2.default.propTypes.target,
  validationState: _SelectControl2.default.propTypes.validationState,
  value: _SelectControl2.default.propTypes.value,
  valueMapper: _SelectControl2.default.propTypes.valueMapper,
  width: _SelectControl2.default.propTypes.width
};

TxlSingleSelectControl.displayName = 'TxlSingleSelectControl';

TxlSingleSelectControl.defaultProps = {
  allowNone: false,
  enableLocalFiltering: true,
  itemRenderer: _react2.default.createFactory(_SingleSelectItem2.default),
  items: [],
  keyMapper: function keyMapper(item) {
    return String(item.id);
  },
  loading: false,
  onChange: _Base.NOOP,
  onItemCreate: _Base.NOOP,
  onSearchChange: Function.prototype,
  showCreateNew: false,
  showCreateNewLabel: true
};

var _default = TxlSingleSelectControl;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(SELECT_NONE_ITEM, 'SELECT_NONE_ITEM', 'src/_selects/SingleSelectControl.jsx');

  __REACT_HOT_LOADER__.register(TxlSingleSelectControl, 'TxlSingleSelectControl', 'src/_selects/SingleSelectControl.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/_selects/SingleSelectControl.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,