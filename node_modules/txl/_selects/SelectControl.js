'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _desc, _value, _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Base = require('../base/Base');

var _ListDropdownControl = require('../dropdowns/_ListDropdownControl');

var _ListDropdownControl2 = _interopRequireDefault(_ListDropdownControl);

var _TetheredContainer = require('../dropdowns/_containers/TetheredContainer');

var _TetheredContainer2 = _interopRequireDefault(_TetheredContainer);

var _InputFieldBase = require('../input-fields/_InputFieldBase');

var _InputFieldBase2 = _interopRequireDefault(_InputFieldBase);

var _constants = require('../styles/constants');

var _helpers = require('../styles/helpers');

var _createSubComponentRenderer = require('../utils/createSubComponentRenderer');

var _createSubComponentRenderer2 = _interopRequireDefault(_createSubComponentRenderer);

var _KeyCodes = require('../constants/KeyCodes');

var _Actions = require('../constants/Actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var defaultContainer = _react2.default.createFactory(_TetheredContainer2.default);

function subComponentRenderer(instance, key) {
  return (0, _createSubComponentRenderer2.default)({
    instance: instance,
    key: key,
    propsGetter: instance._getActionProps
  });
}

var TxlSelectControl = (_class = function (_React$Component) {
  (0, _inherits3.default)(TxlSelectControl, _React$Component);

  function TxlSelectControl(props) {
    (0, _classCallCheck3.default)(this, TxlSelectControl);

    // Can be used for keyboard controlled select behaviour.
    var _this = (0, _possibleConstructorReturn3.default)(this, (TxlSelectControl.__proto__ || (0, _getPrototypeOf2.default)(TxlSelectControl)).call(this, props));

    _this.state = {
      activeItemIndex: null
    };
    return _this;
  }

  (0, _createClass3.default)(TxlSelectControl, [{
    key: 'clearSearch',
    value: function clearSearch() {
      this._listDropdownControlRef._clearSearch();
    }
  }, {
    key: 'getFilteredItems',
    value: function getFilteredItems() {
      return this._listDropdownControlRef.getFilteredItems();
    }
  }, {
    key: '_handleKeyDown',
    value: function _handleKeyDown(e) {
      var _props = this.props,
          allowHeaderKeyboardSelection = _props.allowHeaderKeyboardSelection,
          keySelectedItemIndex = _props.keySelectedItemIndex,
          onChange = _props.onChange,
          onItemCreate = _props.onItemCreate,
          onKeyDown = _props.onKeyDown,
          onKeySelectedItemIndexChange = _props.onKeySelectedItemIndexChange,
          open = _props.open;
      var keyCode = e.keyCode;

      var filteredItemsWrapper = this.getFilteredItems();
      var filteredItems = filteredItemsWrapper.getItems();
      var minIndexValue = allowHeaderKeyboardSelection ? -1 : 0;

      onKeyDown({ keyCode: keyCode });
      if (open) {
        switch (keyCode) {
          case _KeyCodes.TAB:
          case _KeyCodes.ESCAPE:
            this._handleCloseDropdown();
            break;
          case _KeyCodes.ARROW_DOWN:
            this._setSelectionIndex(filteredItems);break;
          case _KeyCodes.ARROW_UP:
            this._setSelectionIndex(filteredItems, true);break;
          case _KeyCodes.ENTER:
            {
              if (keySelectedItemIndex >= minIndexValue) {
                var item = filteredItemsWrapper.getItem(keySelectedItemIndex);
                if (item && item.id === _Actions.CREATE_NEW) {
                  onItemCreate(item);
                } else {
                  this.clearSearch();
                  onChange(item);
                }
              } else {
                var firstListItem = filteredItems[0];
                var validCreateNewItemSelected = filteredItems.length === 1 && firstListItem.id === _Actions.CREATE_NEW && firstListItem.value;
                if (validCreateNewItemSelected) {
                  onItemCreate(firstListItem);
                } else {
                  this._handleCloseDropdown();
                }
              }
              break;
            }
          default:
            {
              onKeySelectedItemIndexChange({ keySelectedItemIndex: undefined });
              break;
            }
        }
      } else if (keyCode === _KeyCodes.ENTER) {
        this.props.openDropdown();
      }
    }
  }, {
    key: '_handleCloseDropdown',
    value: function _handleCloseDropdown() {
      var _props2 = this.props,
          closeDropdown = _props2.closeDropdown,
          onKeySelectedItemIndexChange = _props2.onKeySelectedItemIndexChange;


      onKeySelectedItemIndexChange({ keySelectedItemIndex: undefined });
      this.clearSearch();
      closeDropdown();
    }
  }, {
    key: '_setSelectionIndex',
    value: function _setSelectionIndex(items, isUpDirection) {
      var _props3 = this.props,
          allowHeaderKeyboardSelection = _props3.allowHeaderKeyboardSelection,
          currentKeySelectionIndex = _props3.keySelectedItemIndex;


      var keySelectedItemIndex = void 0;
      var minIndexValue = allowHeaderKeyboardSelection ? -1 : 0;

      if (isUpDirection) {
        var startIndex = allowHeaderKeyboardSelection ? 0 : 1;

        keySelectedItemIndex = currentKeySelectionIndex >= startIndex ? currentKeySelectionIndex - 1 : minIndexValue;
      } else if (currentKeySelectionIndex !== undefined) {
        keySelectedItemIndex = currentKeySelectionIndex < items.length - 1 ? currentKeySelectionIndex + 1 : currentKeySelectionIndex;
      } else {
        keySelectedItemIndex = minIndexValue;
      }

      this.props.onKeySelectedItemIndexChange({ keySelectedItemIndex: keySelectedItemIndex });
    }
  }, {
    key: '_selectItem',
    value: function _selectItem(_ref) {
      var item = _ref.item;
      var _props4 = this.props,
          onChange = _props4.onChange,
          onItemCreate = _props4.onItemCreate;


      if (item && item.id === _Actions.CREATE_NEW) {
        onItemCreate(item);
      } else {
        this.clearSearch();
        onChange(item);
      }
    }
  }, {
    key: '_getActionProps',
    value: function _getActionProps() {
      return {
        onItemActivate: this._activateItem,
        selectItem: this._selectItem
      };
    }
  }, {
    key: '_splitProps',
    value: function _splitProps() {
      // Exclude target and itemRenderer
      var _props5 = this.props,
          open = _props5.open,
          target = _props5.target,
          itemRenderer = _props5.itemRenderer,
          others = (0, _objectWithoutProperties3.default)(_props5, ['open', 'target', 'itemRenderer']);
      var activeItemIndex = this.state.activeItemIndex;


      return {
        itemRenderer: itemRenderer,
        open: open,
        sharedProps: (0, _extends3.default)({
          activeItemIndex: activeItemIndex
        }, others, this._getActionProps()),
        target: target
      };
    }
  }, {
    key: '_activateItem',
    value: function _activateItem(obj) {
      this.setState({
        activeItemIndex: obj.index
      });
    }
  }, {
    key: '_renderTarget',
    value: function _renderTarget(props) {
      var target = subComponentRenderer(this, 'target');

      var _splitProps2 = this._splitProps(),
          sharedProps = _splitProps2.sharedProps;

      return target((0, _extends3.default)({}, props, sharedProps, {
        onKeyDown: this._handleKeyDown
      }));
    }
  }, {
    key: '_renderItem',
    value: function _renderItem(props) {
      var itemRenderer = subComponentRenderer(this, 'itemRenderer');

      var _splitProps3 = this._splitProps(),
          sharedProps = _splitProps3.sharedProps;

      var keySelectedItemIndex = this.props.keySelectedItemIndex;

      var filteredItems = this.getFilteredItems();
      var item = props.item,
          index = props.index;


      var isCreateNewItem = item.id === _Actions.CREATE_NEW;
      var isOnlyFilteredItem = filteredItems.getSize() === 1;

      var itemViewProps = (0, _extends3.default)({}, props, sharedProps, {
        active: index === this.state.activeItemIndex || index === keySelectedItemIndex,
        keySelectedItemIndex: keySelectedItemIndex,
        selected: this.props.isItemSelected(item) || isCreateNewItem && isOnlyFilteredItem,
        selectedItem: index === keySelectedItemIndex
      });

      return itemRenderer(itemViewProps);
    }
  }, {
    key: '_renderGroup',
    value: function _renderGroup() {
      return subComponentRenderer(this, 'groupRenderer');
    }
  }, {
    key: '_handleDropdownControlRef',
    value: function _handleDropdownControlRef(ref) {
      this._listDropdownControlRef = ref;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          closeDropdown = _props6.closeDropdown,
          container = _props6.container,
          enableLocalFiltering = _props6.enableLocalFiltering,
          grouper = _props6.grouper,
          itemHeight = _props6.itemHeight,
          items = _props6.items,
          keyMapper = _props6.keyMapper,
          keySelectedItemClear = _props6.keySelectedItemClear,
          keySelectedItemIndex = _props6.keySelectedItemIndex,
          listProps = _props6.listProps,
          loading = _props6.loading,
          noContentView = _props6.noContentView,
          onSearchChange = _props6.onSearchChange,
          open = _props6.open,
          openDropdown = _props6.openDropdown,
          predicateGetter = _props6.predicateGetter,
          secondaryText = _props6.secondaryText,
          shouldInputWrap = _props6.shouldInputWrap,
          showCreateNew = _props6.showCreateNew,
          showSearchToViewMoreMessage = _props6.showSearchToViewMoreMessage,
          width = _props6.width;

      // Since the dropdown attaches to the bottom of the component, if there's secondary text,
      // we need to account for its height when calculating the offset, so that the dropdown
      // is directly under the field itself.

      var dropdownTargetYOffset = -(0, _helpers.gridUnitsRaw)(1) + (secondaryText ? _constants.INPUT_FIELDS.secondaryTextHeight : 0);

      return _react2.default.createElement(_ListDropdownControl2.default, {
        activateItem: this._activateItem,
        closeDropdown: closeDropdown,
        container: container,
        enableLocalFiltering: enableLocalFiltering,
        grouper: grouper,
        groupRenderer: this._renderGroup,
        itemRenderer: this._renderItem,
        itemHeight: itemHeight,
        items: items,
        keyMapper: keyMapper,
        keySelectedItemClear: keySelectedItemClear,
        keySelectedItemIndex: keySelectedItemIndex,
        listProps: listProps,
        loading: loading,
        noContentView: noContentView,
        onSearchChange: onSearchChange,
        open: open,
        openDropdown: openDropdown,
        predicateGetter: predicateGetter,
        ref: this._handleDropdownControlRef,
        shouldInputWrap: shouldInputWrap,
        showCreateNew: showCreateNew,
        showSearchToViewMoreMessage: showSearchToViewMoreMessage,
        target: this._renderTarget,
        width: width,
        yOffset: dropdownTargetYOffset
      });
    }
  }]);
  return TxlSelectControl;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class.prototype, 'clearSearch', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'clearSearch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getFilteredItems', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'getFilteredItems'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleKeyDown', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleCloseDropdown', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleCloseDropdown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_setSelectionIndex', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_setSelectionIndex'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_selectItem', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_selectItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_getActionProps', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_getActionProps'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_splitProps', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_splitProps'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_activateItem', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_activateItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_renderTarget', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_renderTarget'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_renderItem', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_renderItem'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_renderGroup', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_renderGroup'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_handleDropdownControlRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_handleDropdownControlRef'), _class.prototype)), _class);


TxlSelectControl.propTypes = {
  allowHeaderKeyboardSelection: _react.PropTypes.bool,
  closeDropdown: _react.PropTypes.func,
  container: _ListDropdownControl2.default.propTypes.container,
  enableLocalFiltering: _ListDropdownControl2.default.propTypes.enableLocalFiltering,
  groupRenderer: _react.PropTypes.func,
  grouper: _ListDropdownControl2.default.propTypes.grouper,
  isItemSelected: _react.PropTypes.func.isRequired,
  itemHeight: _ListDropdownControl2.default.propTypes.itemHeight,
  itemRenderer: _ListDropdownControl2.default.propTypes.itemRenderer,
  items: _ListDropdownControl2.default.propTypes.items,
  keyMapper: _ListDropdownControl2.default.propTypes.keyMapper,
  keySelectedItemClear: _react.PropTypes.func,
  keySelectedItemIndex: _react.PropTypes.number,
  label: _ListDropdownControl2.default.propTypes.label,
  listProps: _ListDropdownControl2.default.propTypes.listProps,
  loading: _ListDropdownControl2.default.propTypes.loading,
  noContentView: _ListDropdownControl2.default.propTypes.noContentView,
  onChange: _react.PropTypes.func,
  onItemCreate: _react.PropTypes.func,
  onKeyDown: _react.PropTypes.func,
  onKeySelectedItemIndexChange: _react.PropTypes.func,
  onSearchChange: _ListDropdownControl2.default.propTypes.onSearchChange,
  open: _ListDropdownControl2.default.propTypes.open,
  openDropdown: _ListDropdownControl2.default.propTypes.openDropdown,
  placeholder: _react.PropTypes.node,
  predicateGetter: _ListDropdownControl2.default.propTypes.predicateGetter,
  search: _ListDropdownControl2.default.propTypes.search,
  secondaryText: _ListDropdownControl2.default.propTypes.secondaryText,
  shouldInputWrap: _react.PropTypes.bool,
  showCreateNew: _react.PropTypes.bool,
  showSearchToViewMoreMessage: _ListDropdownControl2.default.propTypes.showSearchToViewMoreMessage,
  target: _ListDropdownControl2.default.propTypes.target,
  validationState: _InputFieldBase2.default.propTypes.validationState,
  value: _react.PropTypes.any,
  valueMapper: _react.PropTypes.func,
  width: _ListDropdownControl2.default.propTypes.width
};

TxlSelectControl.displayName = 'TxlSelectControl';

TxlSelectControl.defaultProps = {
  allowHeaderKeyboardSelection: false,
  container: defaultContainer,
  enableLocalFiltering: true,
  items: [],
  loading: false,
  multi: false,
  onKeyDown: Function.prototype,
  onSearchChange: Function.prototype,
  selector: function selector() {
    return false;
  },
  shouldInputWrap: true
};

var _default = TxlSelectControl;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(defaultContainer, 'defaultContainer', 'src/_selects/SelectControl.jsx');

  __REACT_HOT_LOADER__.register(subComponentRenderer, 'subComponentRenderer', 'src/_selects/SelectControl.jsx');

  __REACT_HOT_LOADER__.register(TxlSelectControl, 'TxlSelectControl', 'src/_selects/SelectControl.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/_selects/SelectControl.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,