'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Underline = require('./_Underline');

var _Underline2 = _interopRequireDefault(_Underline);

var _InputFieldsPropTypes = require('../input-fields/_InputFieldsPropTypes');

var _theme = require('../styles/theme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UNDERLINE_STYLES = {
  base: _theme.COLOR_NEUTRAL['300'],
  disabled: 'transparent',
  error: _theme.COLOR_ERROR['400'],
  focused: _theme.COLOR_ACCENT['500'],
  readOnly: 'transparent',
  success: _theme.COLOR_SUCCESS['400'],
  warning: _theme.COLOR_WARNING['400']
};

function getUnderlineColor(props) {
  var validationState = props.validationState,
      focused = props.focused,
      disabled = props.disabled,
      readOnly = props.readOnly;

  var underlineVariant = void 0;
  if (focused && validationState === 'base') {
    underlineVariant = 'focused';
  } else if (disabled) {
    underlineVariant = 'disabled';
  } else if (readOnly) {
    underlineVariant = 'readOnly';
  } else {
    underlineVariant = validationState;
  }

  return UNDERLINE_STYLES[underlineVariant];
}

/**
 * TxlInputUnderline abstracts InputFields underline style requirements using
 * various input-fields states (disabled, focused, validationState....)
 */
var TxlInputUnderline = function TxlInputUnderline(props) {
  return _react2.default.createElement(_Underline2.default, {
    'data-component': 'TxlInputUnderline',
    style: props.style,
    color: getUnderlineColor(props)
  });
};

TxlInputUnderline.propTypes = {
  disabled: _react.PropTypes.bool,
  focused: _react.PropTypes.bool,
  readOnly: _react.PropTypes.bool,
  style: _react.PropTypes.object,
  validationState: _InputFieldsPropTypes.validationStateType
};

TxlInputUnderline.defaultProps = {
  disabled: false,
  focused: false,
  validationState: 'base'
};

var _default = TxlInputUnderline;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(UNDERLINE_STYLES, 'UNDERLINE_STYLES', 'src/layout/_InputUnderline.jsx');

  __REACT_HOT_LOADER__.register(getUnderlineColor, 'getUnderlineColor', 'src/layout/_InputUnderline.jsx');

  __REACT_HOT_LOADER__.register(TxlInputUnderline, 'TxlInputUnderline', 'src/layout/_InputUnderline.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/layout/_InputUnderline.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXlvdXQvX0lucHV0VW5kZXJsaW5lLmpzeCJdLCJuYW1lcyI6WyJVTkRFUkxJTkVfU1RZTEVTIiwiYmFzZSIsImRpc2FibGVkIiwiZXJyb3IiLCJmb2N1c2VkIiwicmVhZE9ubHkiLCJzdWNjZXNzIiwid2FybmluZyIsImdldFVuZGVybGluZUNvbG9yIiwicHJvcHMiLCJ2YWxpZGF0aW9uU3RhdGUiLCJ1bmRlcmxpbmVWYXJpYW50IiwiVHhsSW5wdXRVbmRlcmxpbmUiLCJzdHlsZSIsInByb3BUeXBlcyIsImJvb2wiLCJvYmplY3QiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQVFBLElBQU1BLG1CQUFtQjtBQUN2QkMsUUFBTSxxQkFBYyxLQUFkLENBRGlCO0FBRXZCQyxZQUFVLGFBRmE7QUFHdkJDLFNBQU8sbUJBQVksS0FBWixDQUhnQjtBQUl2QkMsV0FBUyxvQkFBYSxLQUFiLENBSmM7QUFLdkJDLFlBQVUsYUFMYTtBQU12QkMsV0FBUyxxQkFBYyxLQUFkLENBTmM7QUFPdkJDLFdBQVMscUJBQWMsS0FBZDtBQVBjLENBQXpCOztBQVVBLFNBQVNDLGlCQUFULENBQTJCQyxLQUEzQixFQUFrQztBQUFBLE1BRTlCQyxlQUY4QixHQU01QkQsS0FONEIsQ0FFOUJDLGVBRjhCO0FBQUEsTUFHOUJOLE9BSDhCLEdBTTVCSyxLQU40QixDQUc5QkwsT0FIOEI7QUFBQSxNQUk5QkYsUUFKOEIsR0FNNUJPLEtBTjRCLENBSTlCUCxRQUo4QjtBQUFBLE1BSzlCRyxRQUw4QixHQU01QkksS0FONEIsQ0FLOUJKLFFBTDhCOztBQU9oQyxNQUFJTSx5QkFBSjtBQUNBLE1BQUlQLFdBQVdNLG9CQUFvQixNQUFuQyxFQUEyQztBQUN6Q0MsdUJBQW1CLFNBQW5CO0FBQ0QsR0FGRCxNQUVPLElBQUlULFFBQUosRUFBYztBQUNuQlMsdUJBQW1CLFVBQW5CO0FBQ0QsR0FGTSxNQUVBLElBQUlOLFFBQUosRUFBYztBQUNuQk0sdUJBQW1CLFVBQW5CO0FBQ0QsR0FGTSxNQUVBO0FBQ0xBLHVCQUFtQkQsZUFBbkI7QUFDRDs7QUFFRCxTQUFPVixpQkFBaUJXLGdCQUFqQixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxJQUFNQyxvQkFBb0IsU0FBcEJBLGlCQUFvQjtBQUFBLFNBQ3hCO0FBQ0Usc0JBQWUsbUJBRGpCO0FBRUUsV0FBT0gsTUFBTUksS0FGZjtBQUdFLFdBQU9MLGtCQUFrQkMsS0FBbEI7QUFIVCxJQUR3QjtBQUFBLENBQTFCOztBQVFBRyxrQkFBa0JFLFNBQWxCLEdBQThCO0FBQzVCWixZQUFVLGlCQUFVYSxJQURRO0FBRTVCWCxXQUFTLGlCQUFVVyxJQUZTO0FBRzVCVixZQUFVLGlCQUFVVSxJQUhRO0FBSTVCRixTQUFPLGlCQUFVRyxNQUpXO0FBSzVCTjtBQUw0QixDQUE5Qjs7QUFRQUUsa0JBQWtCSyxZQUFsQixHQUFpQztBQUMvQmYsWUFBVSxLQURxQjtBQUUvQkUsV0FBUyxLQUZzQjtBQUcvQk0sbUJBQWlCO0FBSGMsQ0FBakM7O2VBTWVFLGlCOzs7Ozs7Ozs7Z0NBekRUWixnQjs7Z0NBVUdRLGlCOztnQ0F5QkhJLGlCIiwiZmlsZSI6Il9JbnB1dFVuZGVybGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBVbmRlcmxpbmUgZnJvbSAnLi9fVW5kZXJsaW5lJztcbmltcG9ydCB7IHZhbGlkYXRpb25TdGF0ZVR5cGUgfSBmcm9tICcuLi9pbnB1dC1maWVsZHMvX0lucHV0RmllbGRzUHJvcFR5cGVzJztcbmltcG9ydCB7XG4gIENPTE9SX05FVVRSQUwsXG4gIENPTE9SX0FDQ0VOVCxcbiAgQ09MT1JfU1VDQ0VTUyxcbiAgQ09MT1JfV0FSTklORyxcbiAgQ09MT1JfRVJST1IsXG59IGZyb20gJy4uL3N0eWxlcy90aGVtZSc7XG5cbmNvbnN0IFVOREVSTElORV9TVFlMRVMgPSB7XG4gIGJhc2U6IENPTE9SX05FVVRSQUxbJzMwMCddLFxuICBkaXNhYmxlZDogJ3RyYW5zcGFyZW50JyxcbiAgZXJyb3I6IENPTE9SX0VSUk9SWyc0MDAnXSxcbiAgZm9jdXNlZDogQ09MT1JfQUNDRU5UWyc1MDAnXSxcbiAgcmVhZE9ubHk6ICd0cmFuc3BhcmVudCcsXG4gIHN1Y2Nlc3M6IENPTE9SX1NVQ0NFU1NbJzQwMCddLFxuICB3YXJuaW5nOiBDT0xPUl9XQVJOSU5HWyc0MDAnXSxcbn07XG5cbmZ1bmN0aW9uIGdldFVuZGVybGluZUNvbG9yKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB2YWxpZGF0aW9uU3RhdGUsXG4gICAgZm9jdXNlZCxcbiAgICBkaXNhYmxlZCxcbiAgICByZWFkT25seSxcbiAgfSA9IHByb3BzO1xuICBsZXQgdW5kZXJsaW5lVmFyaWFudDtcbiAgaWYgKGZvY3VzZWQgJiYgdmFsaWRhdGlvblN0YXRlID09PSAnYmFzZScpIHtcbiAgICB1bmRlcmxpbmVWYXJpYW50ID0gJ2ZvY3VzZWQnO1xuICB9IGVsc2UgaWYgKGRpc2FibGVkKSB7XG4gICAgdW5kZXJsaW5lVmFyaWFudCA9ICdkaXNhYmxlZCc7XG4gIH0gZWxzZSBpZiAocmVhZE9ubHkpIHtcbiAgICB1bmRlcmxpbmVWYXJpYW50ID0gJ3JlYWRPbmx5JztcbiAgfSBlbHNlIHtcbiAgICB1bmRlcmxpbmVWYXJpYW50ID0gdmFsaWRhdGlvblN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIFVOREVSTElORV9TVFlMRVNbdW5kZXJsaW5lVmFyaWFudF07XG59XG5cbi8qKlxuICogVHhsSW5wdXRVbmRlcmxpbmUgYWJzdHJhY3RzIElucHV0RmllbGRzIHVuZGVybGluZSBzdHlsZSByZXF1aXJlbWVudHMgdXNpbmdcbiAqIHZhcmlvdXMgaW5wdXQtZmllbGRzIHN0YXRlcyAoZGlzYWJsZWQsIGZvY3VzZWQsIHZhbGlkYXRpb25TdGF0ZS4uLi4pXG4gKi9cbmNvbnN0IFR4bElucHV0VW5kZXJsaW5lID0gcHJvcHMgPT4gKFxuICA8VW5kZXJsaW5lXG4gICAgZGF0YS1jb21wb25lbnQ9XCJUeGxJbnB1dFVuZGVybGluZVwiXG4gICAgc3R5bGU9e3Byb3BzLnN0eWxlfVxuICAgIGNvbG9yPXtnZXRVbmRlcmxpbmVDb2xvcihwcm9wcyl9XG4gIC8+XG4pO1xuXG5UeGxJbnB1dFVuZGVybGluZS5wcm9wVHlwZXMgPSB7XG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHZhbGlkYXRpb25TdGF0ZTogdmFsaWRhdGlvblN0YXRlVHlwZSxcbn07XG5cblR4bElucHV0VW5kZXJsaW5lLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBmb2N1c2VkOiBmYWxzZSxcbiAgdmFsaWRhdGlvblN0YXRlOiAnYmFzZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUeGxJbnB1dFVuZGVybGluZTtcbiJdfQ==