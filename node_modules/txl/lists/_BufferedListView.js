'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _class, _desc, _value, _class2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _Base = require('../base/Base');

var _BufferedListItems = require('./_BufferedListItems');

var _BufferedListItems2 = _interopRequireDefault(_BufferedListItems);

var _theme = require('../styles/theme');

var _type = require('../styles/mixins/type');

var _FlexContainer = require('../layout/FlexContainer');

var _FlexContainer2 = _interopRequireDefault(_FlexContainer);

var _LoadingIndicator = require('../progress-indicators/LoadingIndicator');

var _LoadingIndicator2 = _interopRequireDefault(_LoadingIndicator);

var _SearchToViewMoreItem = require('../_selects/SearchToViewMoreItem');

var _SearchToViewMoreItem2 = _interopRequireDefault(_SearchToViewMoreItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var DEFAULT_NO_CONTENT_STYLE = (0, _extends3.default)({}, _type.DEFAULT_FONT_FAMILY, _type.TYPE_BASE, {
  color: _theme.COLOR_NEUTRAL['200'],
  padding: 10,
  position: 'relative'
});

function getStyle(props) {
  return {
    backgroundColor: props.backgroundColor,
    overflow: 'hidden',
    width: '100%'
  };
}

function getScrollStyle(props) {
  return {
    height: props.height,
    maxHeight: props.maxHeight,
    overflow: 'auto',
    position: 'relative',
    /**
     * This hard coded zIndex is to place the scroll view on top of each item view
     * Failed to specify this zIndex will result scroll bar to be rendered behind each
     * item
     */
    zIndex: 1
  };
}

/**
 * BufferedListView uses BufferedListItems to render N number of items.
 *
 * This component is useful for components that requires fast render / mount time.
 *
 * ** DO NOT USE pure renderer
 */

var TxlBufferedListView = (0, _radium2.default)(_class = (_class2 = function (_Component) {
  (0, _inherits3.default)(TxlBufferedListView, _Component);

  function TxlBufferedListView() {
    var _ref;

    (0, _classCallCheck3.default)(this, TxlBufferedListView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = TxlBufferedListView.__proto__ || (0, _getPrototypeOf2.default)(TxlBufferedListView)).call.apply(_ref, [this].concat(args)));

    _this.scrollTop = 0;
    _this.keySelectedItemIndex = null;
    _this.state = {
      firstItemIndex: 0,
      firstItemOffset: 0,
      scrollTop: 0
    };
    return _this;
  }

  (0, _createClass3.default)(TxlBufferedListView, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _props = this.props,
          itemHeight = _props.itemHeight,
          keySelectedItemIndex = _props.keySelectedItemIndex;


      if (keySelectedItemIndex != null) {
        var bufferedListBodyElement = _reactDom2.default.findDOMNode(this._bufferedListBody);
        if (bufferedListBodyElement) {
          bufferedListBodyElement.scrollTop = itemHeight * keySelectedItemIndex;
        }
      }
    }
  }, {
    key: '_setScrollState',
    value: function _setScrollState() {
      if (this.scrollTop === this.state.scrollTop) {
        return;
      }

      var scrollTop = this.scrollTop;
      var itemHeight = this.props.itemHeight;

      var firstItemIndex = Math.floor(scrollTop / itemHeight);
      var firstItemOffset = firstItemIndex * itemHeight - scrollTop;
      this.setState({
        firstItemIndex: firstItemIndex,
        firstItemOffset: firstItemOffset,
        scrollTop: scrollTop
      });
    }
  }, {
    key: '_handleScroll',
    value: function _handleScroll(e) {
      var _props2 = this.props,
          itemHeight = _props2.itemHeight,
          keySelectedItemClear = _props2.keySelectedItemClear,
          keySelectedItemIndex = _props2.keySelectedItemIndex;


      if (keySelectedItemIndex != null && keySelectedItemClear) {
        var scrollDifference = Math.abs(this.scrollTop - e.target.scrollTop);
        // CHECK TO SEE IF THE USER IS JUST SCROLLING SO keySelectedItemIndex IS CLEARED
        if (scrollDifference !== itemHeight && keySelectedItemIndex === this.keySelectedItemIndex) {
          // CLEAR THE KEY INDEX
          keySelectedItemClear();
        }
      }

      this.scrollTop = e.target.scrollTop;
      this.keySelectedItemIndex = keySelectedItemIndex;
      (0, _raf2.default)(this._setScrollState);
    }
  }, {
    key: '_handleOnMouseLeave',
    value: function _handleOnMouseLeave() {
      var activateItem = this.props.activateItem;

      if (activateItem) {
        activateItem(0);
      }
    }
  }, {
    key: '_handleBufferedListBodyRef',
    value: function _handleBufferedListBodyRef(ref) {
      this._bufferedListBody = ref;
    }
  }, {
    key: '_renderNode',
    value: function _renderNode(key) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var node = this.props[key];
      if (!node) {
        return null;
      }

      if ((0, _isFunction2.default)(node)) {
        return node(props);
      }

      return node;
    }
  }, {
    key: '_renderHeader',
    value: function _renderHeader() {
      return this._renderNode('header', this.props);
    }
  }, {
    key: '_renderLoadingContent',
    value: function _renderLoadingContent() {
      var _props3 = this.props,
          height = _props3.height,
          loading = _props3.loading,
          maxHeight = _props3.maxHeight;


      if (!loading) {
        return null;
      }

      var loadingContent = this._renderNode('loadingContent', this.props);
      if (loadingContent) {
        return loadingContent;
      }

      var style = {
        height: (maxHeight || height) + 'px'
      };

      // Default Loading Content
      return _react2.default.createElement(
        _FlexContainer2.default,
        {
          alignItems: 'center',
          justifyContent: 'center',
          key: 'body',
          style: style
        },
        _react2.default.createElement(_LoadingIndicator2.default, { size: 'medium' })
      );
    }
  }, {
    key: '_renderNoContent',
    value: function _renderNoContent() {
      var _props4 = this.props,
          loading = _props4.loading,
          itemsCount = _props4.itemsCount;


      if (loading || itemsCount > 0) {
        return null;
      }

      var noContent = this._renderNode('noContent', this.props);
      if (noContent) {
        return noContent;
      }

      // Default noContent
      return _react2.default.createElement(
        'div',
        {
          key: 'body',
          style: DEFAULT_NO_CONTENT_STYLE
        },
        'No matches found'
      );
    }
  }, {
    key: '_renderBody',
    value: function _renderBody() {
      var _props5 = this.props,
          activateItem = _props5.activateItem,
          itemHeight = _props5.itemHeight,
          itemRenderer = _props5.itemRenderer,
          itemsCount = _props5.itemsCount,
          keySelectedItemClear = _props5.keySelectedItemClear,
          keySelectedItemIndex = _props5.keySelectedItemIndex,
          loading = _props5.loading,
          showSearchToViewMoreMessage = _props5.showSearchToViewMoreMessage;


      if (loading || itemsCount === 0) {
        return null;
      }

      var _state = this.state,
          firstItemIndex = _state.firstItemIndex,
          firstItemOffset = _state.firstItemOffset;


      var viewportHeight = this.props.maxHeight || this.props.height;
      var scrollHeight = itemHeight * itemsCount;

      return _react2.default.createElement(
        'div',
        {
          ref: this._handleBufferedListBodyRef,
          'data-component': 'TxlBufferedListView',
          key: 'body',
          style: getScrollStyle(this.props),
          onMouseLeave: this._handleOnMouseLeave
        },
        _react2.default.createElement(_BufferedListItems2.default, {
          activateItem: activateItem,
          firstItemIndex: firstItemIndex,
          firstItemOffset: firstItemOffset,
          itemRenderer: itemRenderer,
          viewportHeight: viewportHeight,
          itemHeight: itemHeight,
          itemsCount: itemsCount,
          keySelectedItemClear: keySelectedItemClear,
          keySelectedItemIndex: keySelectedItemIndex,
          scrollHeight: scrollHeight,
          offsetTop: 0
        }),
        showSearchToViewMoreMessage && _react2.default.createElement(_SearchToViewMoreItem2.default, null)
      );
    }
  }, {
    key: '_renderFooter',
    value: function _renderFooter() {
      return this._renderNode('footer');
    }
  }, {
    key: 'render',
    value: function render() {
      var loadingContent = this._renderLoadingContent();
      if (loadingContent) {
        return loadingContent;
      }

      var header = this._renderHeader();
      var noContent = this._renderNoContent();
      var body = this._renderBody();
      var footer = this._renderFooter();
      return _react2.default.createElement(
        'div',
        {
          onScroll: this._handleScroll,
          style: getStyle(this.props)
        },
        header,
        noContent,
        body,
        footer
      );
    }
  }]);
  return TxlBufferedListView;
}(_react.Component), (_applyDecoratedDescriptor(_class2.prototype, '_setScrollState', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_setScrollState'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleScroll', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleScroll'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleOnMouseLeave', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleOnMouseLeave'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleBufferedListBodyRef', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleBufferedListBodyRef'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderNode', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderNode'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderHeader', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderHeader'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderLoadingContent', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderLoadingContent'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderNoContent', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderNoContent'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderBody', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderBody'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderFooter', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderFooter'), _class2.prototype)), _class2)) || _class;

TxlBufferedListView.displayName = 'TxlBufferedListView';
TxlBufferedListView.propTypes = {
  activateItem: _react.PropTypes.func,
  backgroundColor: _react.PropTypes.string,
  footer: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]),
  header: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]),
  height: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  itemHeight: _react.PropTypes.number.isRequired,
  itemRenderer: _react.PropTypes.func.isRequired,
  itemsCount: _react.PropTypes.number.isRequired,
  keySelectedItemClear: _react.PropTypes.func,
  keySelectedItemIndex: _react.PropTypes.number,
  loading: _react.PropTypes.bool,
  loadingContent: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]),
  maxHeight: _react.PropTypes.number,
  noContent: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]),
  showCreateNew: _react.PropTypes.bool,
  showSearchToViewMoreMessage: _react.PropTypes.bool
};

TxlBufferedListView.defaultProps = {
  backgroundColor: 'white',
  footer: _Base.NOOP,
  header: _Base.NOOP,
  loading: false,
  showCreateNew: false,
  showSearchToViewMoreMessage: false
};

var _default = TxlBufferedListView;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(DEFAULT_NO_CONTENT_STYLE, 'DEFAULT_NO_CONTENT_STYLE', 'src/lists/_BufferedListView.jsx');

  __REACT_HOT_LOADER__.register(getStyle, 'getStyle', 'src/lists/_BufferedListView.jsx');

  __REACT_HOT_LOADER__.register(getScrollStyle, 'getScrollStyle', 'src/lists/_BufferedListView.jsx');

  __REACT_HOT_LOADER__.register(TxlBufferedListView, 'TxlBufferedListView', 'src/lists/_BufferedListView.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/lists/_BufferedListView.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,