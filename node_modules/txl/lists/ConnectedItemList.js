'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _theme = require('../styles/theme');

var _helpers = require('../styles/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ICON_SIZE = 13;
// offset by half the width of the icon, accounting for width of line
var LINE_OFFSET = 6;
var GUTTER_WIDTH = ICON_SIZE + (0, _helpers.gridUnitsRaw)(2) + 'px';

var ITEM_CONTAINER_STYLES = {
  display: 'flex'
};

var ICON_CONTAINER_STYLES = {
  display: 'flex',
  minWidth: GUTTER_WIDTH,
  position: 'relative',
  width: GUTTER_WIDTH
};

var CONTENT_HEADER_BASE_STYLES = {
  display: 'flex',
  fontSize: '14px',
  fontWeight: 400,
  marginTop: '-2px'
};

var CONTENT_HEADER_EXPANDED_STYLES = (0, _extends3.default)({}, CONTENT_HEADER_BASE_STYLES, {
  marginBottom: (0, _helpers.gridUnits)(2)
});

// Content body won't be rendered in collapsed scenario, but we still want 20px of spacing
// between items
var CONTENT_HEADER_COLLAPSED_STYLES = (0, _extends3.default)({}, CONTENT_HEADER_BASE_STYLES, {
  marginBottom: (0, _helpers.gridUnits)(4)
});

var CONTENT_CONTAINER_STYLES = {
  marginBottom: (0, _helpers.gridUnits)(4)
};

var SUMMARY_CONTENT_STYLES = {
  color: _theme.COLOR_NEUTRAL['300'],
  marginLeft: (0, _helpers.gridUnits)(1)
};

var LINE_COMPONENT_STYLES = {
  borderLeftStyle: 'dotted',
  borderLeftWidth: '1px',
  bottom: 0,
  left: LINE_OFFSET,
  position: 'absolute',
  top: ICON_SIZE,
  width: GUTTER_WIDTH
};

var TxlConnectedItemList = function TxlConnectedItemList(props) {
  var items = props.items,
      color = props.color,
      collapsed = props.collapsed;


  var generatedItems = items.map(function (item, idx) {
    var isLast = idx === items.length - 1;
    var IconComponent = item.icon;
    var lineComponentStyles = (0, _extends3.default)({}, LINE_COMPONENT_STYLES, {
      borderLeftColor: color
    });
    var iconColor = item.color || color;

    // We want special behavior if no content was provided OR if the list is collapsed, so coerce
    // the collapsed case into the undefined case so we can treat them the same
    var content = collapsed ? undefined : item.content;

    // If we're collapsed, show the summary
    var summaryComponent = !content && item.summary ? _react2.default.createElement(
      'div',
      { style: SUMMARY_CONTENT_STYLES, 'data-test-connected-list-item-summary': true },
      item.summary
    ) : null;

    var lineComponent = _react2.default.createElement('div', {
      'data-test-connected-list-line': true,
      style: lineComponentStyles
    });
    var contentHeaderStyles = content ? CONTENT_HEADER_EXPANDED_STYLES : CONTENT_HEADER_COLLAPSED_STYLES;

    return _react2.default.createElement(
      'div',
      {
        'data-component': 'TxlConnectedItemListItem',
        key: 'connected-item-' + idx,
        style: ITEM_CONTAINER_STYLES
      },
      _react2.default.createElement(
        'div',
        { style: ICON_CONTAINER_STYLES },
        _react2.default.createElement(IconComponent, {
          'data-test-connected-list-item-icon': true,
          color: iconColor,
          scale: 1
        }),
        !isLast && lineComponent
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          {
            'data-test-connected-list-item-header': true,
            style: contentHeaderStyles
          },
          item.header,
          summaryComponent
        ),
        !!content && _react2.default.createElement(
          'div',
          {
            'data-test-connected-list-item-content': true,
            style: CONTENT_CONTAINER_STYLES
          },
          content
        )
      )
    );
  });

  return _react2.default.createElement(
    'div',
    { 'data-component': 'TxlConnectedItemList' },
    generatedItems
  );
};

TxlConnectedItemList.defaultProps = {
  collapsed: false,
  color: _theme.COLOR_NEUTRAL['200']
};

TxlConnectedItemList.propTypes = {
  /* hides content for all items */
  collapsed: _react.PropTypes.bool,
  /* controls color of icons and connecting line */
  color: _react.PropTypes.string,
  items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    /* points to a TXL icon class */
    color: _react.PropTypes.string,
    content: _react.PropTypes.node,
    header: _react.PropTypes.node.isRequired,
    icon: _react.PropTypes.func.isRequired,
    summary: _react.PropTypes.node
  })).isRequired
};

var _default = (0, _radium2.default)(TxlConnectedItemList);

exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(ICON_SIZE, 'ICON_SIZE', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(LINE_OFFSET, 'LINE_OFFSET', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(GUTTER_WIDTH, 'GUTTER_WIDTH', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(ITEM_CONTAINER_STYLES, 'ITEM_CONTAINER_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(ICON_CONTAINER_STYLES, 'ICON_CONTAINER_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(CONTENT_HEADER_BASE_STYLES, 'CONTENT_HEADER_BASE_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(CONTENT_HEADER_EXPANDED_STYLES, 'CONTENT_HEADER_EXPANDED_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(CONTENT_HEADER_COLLAPSED_STYLES, 'CONTENT_HEADER_COLLAPSED_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(CONTENT_CONTAINER_STYLES, 'CONTENT_CONTAINER_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(SUMMARY_CONTENT_STYLES, 'SUMMARY_CONTENT_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(LINE_COMPONENT_STYLES, 'LINE_COMPONENT_STYLES', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(TxlConnectedItemList, 'TxlConnectedItemList', 'src/lists/ConnectedItemList.jsx');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/lists/ConnectedItemList.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,