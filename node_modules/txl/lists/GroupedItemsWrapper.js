'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Private class representing regular item
 * The class records index from the orignal array for easy lookup
 */
var GroupItem = function () {
  function GroupItem(index, item) {
    (0, _classCallCheck3.default)(this, GroupItem);

    this._index = index;
    this._item = item;
  }

  (0, _createClass3.default)(GroupItem, [{
    key: 'getIndex',
    value: function getIndex() {
      return this._index;
    }
  }, {
    key: 'getItem',
    value: function getItem() {
      return this._item;
    }
  }, {
    key: 'isDisabled',
    value: function isDisabled() {
      return this._item.disabled;
    }
  }]);
  return GroupItem;
}();

/**
 * Private class representing group header
 */


var GroupHeaderItem = function () {
  function GroupHeaderItem(groupKey) {
    (0, _classCallCheck3.default)(this, GroupHeaderItem);

    this._groupKey = groupKey;
  }

  (0, _createClass3.default)(GroupHeaderItem, [{
    key: 'toObject',
    value: function toObject() {
      return {
        groupKey: this._groupKey
      };
    }
  }]);
  return GroupHeaderItem;
}();

/**
 * Private class representing each group node.
 */


var GroupNode = function () {
  function GroupNode(groupKey) {
    (0, _classCallCheck3.default)(this, GroupNode);

    this.groupKey = groupKey;
    this.items = [];
  }

  (0, _createClass3.default)(GroupNode, [{
    key: 'push',
    value: function push(item) {
      this.items.push(item);
    }
  }, {
    key: 'getItems',
    value: function getItems(indexOffset) {
      return this.items.map(function (item, index) {
        return new GroupItem(index + indexOffset, item);
      });
    }
  }]);
  return GroupNode;
}();

function groupBy(items, grouper) {
  var groupedItems = {};
  var groups = [];

  items.forEach(function (item) {
    var groupKey = String(grouper(item));
    if (!groupedItems[groupKey]) {
      var groupNode = new GroupNode(groupKey);
      groups.push(groupKey);
      groupedItems[groupKey] = groupNode;
    }

    groupedItems[groupKey].push(item);
  });

  return {
    groupedItems: groupedItems,
    groups: groups
  };
}

function flattenGroupedItems() {
  var groups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var groupedItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var flatItems = [];
  var indexOffset = 0;
  groups.forEach(function (groupKey) {
    var items = groupedItems[groupKey].getItems(indexOffset);
    var groupHeader = new GroupHeaderItem(groupKey);
    flatItems = [].concat((0, _toConsumableArray3.default)(flatItems), [groupHeader], (0, _toConsumableArray3.default)(items));
    indexOffset += items.length;
  });
  return flatItems;
}

var GroupedItemsWrapper = function () {
  function GroupedItemsWrapper(props) {
    (0, _classCallCheck3.default)(this, GroupedItemsWrapper);

    this.isGrouped = this.isGrouped.bind(this);
    this.render = this.render.bind(this);
    this.getSize = this.getSize.bind(this);
    this.renderItem = this.renderItem.bind(this);
    this.renderGroupHeader = this.renderGroupHeader.bind(this);

    this._items = [].concat((0, _toConsumableArray3.default)(props.items || []));
    this._grouper = props.grouper;
    this._itemRenderer = props.itemRenderer;
    this._groupRenderer = props.groupRenderer;
    this._isGrouped = typeof this._grouper === 'function';
    if (this._isGrouped) {
      var _groupBy = groupBy(this._items, this._grouper),
          groups = _groupBy.groups,
          groupedItems = _groupBy.groupedItems;

      this._groups = groups;
      this._groupedItems = groupedItems;
      this._flatItems = flattenGroupedItems(this._groups, this._groupedItems);
    }
  }

  (0, _createClass3.default)(GroupedItemsWrapper, [{
    key: 'isGroupHeader',
    value: function isGroupHeader(item) {
      return item instanceof GroupHeaderItem;
    }
  }, {
    key: 'isItem',
    value: function isItem(item) {
      return item instanceof GroupItem;
    }
  }, {
    key: 'isGrouped',
    value: function isGrouped() {
      return this._isGrouped;
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      return this._isGrouped ? this._flatItems.length : this._items.length;
    }
  }, {
    key: 'getItem',
    value: function getItem(index) {
      if (!this._isGrouped) {
        var item = this._items[index];
        return new GroupItem(index, item);
      }
      return this._flatItems[index];
    }
  }, {
    key: 'renderItem',
    value: function renderItem(props) {
      var item = props.item,
          others = (0, _objectWithoutProperties3.default)(props, ['item']);

      return this._itemRenderer((0, _extends3.default)({}, others, {
        disabled: item.isDisabled(),
        index: item.getIndex(),
        item: item.getItem()
      }));
    }
  }, {
    key: 'renderGroupHeader',
    value: function renderGroupHeader(props) {
      var item = props.item,
          others = (0, _objectWithoutProperties3.default)(props, ['item']);

      return this._groupRenderer((0, _extends3.default)({}, others, {
        item: item.toObject()
      }));
    }
  }, {
    key: 'render',
    value: function render(props) {
      var item = this.getItem(props.index);
      var rendererProps = (0, _extends3.default)({}, props, {
        item: item
      });
      var renderer = item instanceof GroupHeaderItem ? this.renderGroupHeader : this.renderItem;
      return renderer(rendererProps);
    }
  }]);
  return GroupedItemsWrapper;
}();

var _default = GroupedItemsWrapper;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(GroupItem, 'GroupItem', 'src/lists/GroupedItemsWrapper.js');

  __REACT_HOT_LOADER__.register(GroupHeaderItem, 'GroupHeaderItem', 'src/lists/GroupedItemsWrapper.js');

  __REACT_HOT_LOADER__.register(GroupNode, 'GroupNode', 'src/lists/GroupedItemsWrapper.js');

  __REACT_HOT_LOADER__.register(groupBy, 'groupBy', 'src/lists/GroupedItemsWrapper.js');

  __REACT_HOT_LOADER__.register(flattenGroupedItems, 'flattenGroupedItems', 'src/lists/GroupedItemsWrapper.js');

  __REACT_HOT_LOADER__.register(GroupedItemsWrapper, 'GroupedItemsWrapper', 'src/lists/GroupedItemsWrapper.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/lists/GroupedItemsWrapper.js');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,