'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorToRgbaArray = colorToRgbaArray;
exports.colorToRgbaString = colorToRgbaString;
exports.rgbaArrayToColor = rgbaArrayToColor;
exports.getColorWithOpacity = getColorWithOpacity;

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Method referenced from Google's Angular Material Design library
 * https://github.com/angular/material/blob/73b1df4b74aa3a977dd051dade7f2a2df30bb187/src/core/services/theming/theming.js#L603-L635
 *
 * Converts a defined color into an Rgb/a array.
 *
 * Input: '#FFFFFF'
 * Output: [255, 255, 255]
 */
function colorToRgbaArray(color) {
  if (Array.isArray(color) && (color.length === 3 || color.length === 4)) {
    return color;
  }

  if (/^rgb/.test(color)) {
    return color.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function (value, i) {
      return (i === 3 ? parseFloat : parseInt)(value, 10);
    });
  }

  if (color.charAt(0) === '#') {
    color = color.substring(1); // eslint-disable-line no-param-reassign
  }

  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(color)) {
    return undefined;
  }

  var dig = color.length / 3;
  var red = color.substr(0, dig);
  var grn = color.substr(dig, dig);
  var blu = color.substr(dig * 2);
  if (dig === 1) {
    red += red;
    grn += grn;
    blu += blu;
  }
  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];
}

function colorToRgbaString(hexColor) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  return 'rgba(' + colorToRgbaArray(hexColor).join(', ') + ', ' + opacity + ')';
}

/**
 * Method referenced from Google's Angular Material Design library
 * https://github.com/angular/material/blob/73b1df4b74aa3a977dd051dade7f2a2df30bb187/src/core/services/theming/theming.js#L603-L635
 *
 * Converts an Rgb/a array into an rgb/a color string.
 *
 * Input: [255, 255, 255]
 * Output: 'rgb(255,255,255)'
 */
function rgbaArrayToColor(rgbArray, opacity) {
  if (!rgbArray) {
    return 'rgb(0,0,0)';
  }

  if (rgbArray.length === 4) {
    // @TODO-linting rewrite this
    rgbArray = (0, _clone2.default)(rgbArray); // eslint-disable-line no-param-reassign
    opacity ? rgbArray.pop() : opacity = rgbArray.pop(); // eslint-disable-line no-param-reassign
  }
  return opacity && (typeof opacity === 'number' || typeof opacity === 'string' && opacity.length) ? 'rgba(' + rgbArray.join(',') + ',' + opacity + ')' : 'rgb(' + rgbArray.join(',') + ')';
}

/**
 * Adds or adjusts opacity values on colors.
 *
 * Input: 'rgb(255,255,255)', 0.5
 * Output: 'rgb(255,255,255,0.5)'
 */
function getColorWithOpacity(color, opacity) {
  return rgbaArrayToColor(colorToRgbaArray(color), opacity);
}
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(colorToRgbaArray, 'colorToRgbaArray', 'src/styles/_helpers/colorHelpers.js');

  __REACT_HOT_LOADER__.register(colorToRgbaString, 'colorToRgbaString', 'src/styles/_helpers/colorHelpers.js');

  __REACT_HOT_LOADER__.register(rgbaArrayToColor, 'rgbaArrayToColor', 'src/styles/_helpers/colorHelpers.js');

  __REACT_HOT_LOADER__.register(getColorWithOpacity, 'getColorWithOpacity', 'src/styles/_helpers/colorHelpers.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZXMvX2hlbHBlcnMvY29sb3JIZWxwZXJzLmpzIl0sIm5hbWVzIjpbImNvbG9yVG9SZ2JhQXJyYXkiLCJjb2xvclRvUmdiYVN0cmluZyIsInJnYmFBcnJheVRvQ29sb3IiLCJnZXRDb2xvcldpdGhPcGFjaXR5IiwiY29sb3IiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJ0ZXN0IiwicmVwbGFjZSIsInNwbGl0IiwibWFwIiwidmFsdWUiLCJpIiwicGFyc2VGbG9hdCIsInBhcnNlSW50IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidW5kZWZpbmVkIiwiZGlnIiwicmVkIiwic3Vic3RyIiwiZ3JuIiwiYmx1IiwiaGV4Q29sb3IiLCJvcGFjaXR5Iiwiam9pbiIsInJnYkFycmF5IiwicG9wIl0sIm1hcHBpbmdzIjoiOzs7OztRQVdnQkEsZ0IsR0FBQUEsZ0I7UUE4QkFDLGlCLEdBQUFBLGlCO1FBYUFDLGdCLEdBQUFBLGdCO1FBb0JBQyxtQixHQUFBQSxtQjs7QUExRWhCOzs7Ozs7QUFFQTs7Ozs7Ozs7O0FBU08sU0FBU0gsZ0JBQVQsQ0FBMEJJLEtBQTFCLEVBQWlDO0FBQ3RDLE1BQUlDLE1BQU1DLE9BQU4sQ0FBY0YsS0FBZCxNQUF5QkEsTUFBTUcsTUFBTixLQUFpQixDQUFqQixJQUFzQkgsTUFBTUcsTUFBTixLQUFpQixDQUFoRSxDQUFKLEVBQXdFO0FBQ3RFLFdBQU9ILEtBQVA7QUFDRDs7QUFFRCxNQUFJLE9BQU9JLElBQVAsQ0FBWUosS0FBWixDQUFKLEVBQXdCO0FBQ3RCLFdBQU9BLE1BQ0pLLE9BREksQ0FDSSx1QkFESixFQUM2QixFQUQ3QixFQUVKQyxLQUZJLENBRUUsR0FGRixFQUdKQyxHQUhJLENBR0EsVUFBQ0MsS0FBRCxFQUFRQyxDQUFSO0FBQUEsYUFBYyxDQUFDQSxNQUFNLENBQU4sR0FBVUMsVUFBVixHQUF1QkMsUUFBeEIsRUFBa0NILEtBQWxDLEVBQXlDLEVBQXpDLENBQWQ7QUFBQSxLQUhBLENBQVA7QUFJRDs7QUFFRCxNQUFJUixNQUFNWSxNQUFOLENBQWEsQ0FBYixNQUFvQixHQUF4QixFQUE2QjtBQUMzQlosWUFBUUEsTUFBTWEsU0FBTixDQUFnQixDQUFoQixDQUFSLENBRDJCLENBQ0M7QUFDN0I7O0FBRUQsTUFBSSxDQUFDLDJCQUEyQlQsSUFBM0IsQ0FBZ0NKLEtBQWhDLENBQUwsRUFBNkM7QUFBRSxXQUFPYyxTQUFQO0FBQW1COztBQUVsRSxNQUFNQyxNQUFNZixNQUFNRyxNQUFOLEdBQWUsQ0FBM0I7QUFDQSxNQUFJYSxNQUFNaEIsTUFBTWlCLE1BQU4sQ0FBYSxDQUFiLEVBQWdCRixHQUFoQixDQUFWO0FBQ0EsTUFBSUcsTUFBTWxCLE1BQU1pQixNQUFOLENBQWFGLEdBQWIsRUFBa0JBLEdBQWxCLENBQVY7QUFDQSxNQUFJSSxNQUFNbkIsTUFBTWlCLE1BQU4sQ0FBYUYsTUFBTSxDQUFuQixDQUFWO0FBQ0EsTUFBSUEsUUFBUSxDQUFaLEVBQWU7QUFDYkMsV0FBT0EsR0FBUDtBQUNBRSxXQUFPQSxHQUFQO0FBQ0FDLFdBQU9BLEdBQVA7QUFDRDtBQUNELFNBQU8sQ0FBQ1IsU0FBU0ssR0FBVCxFQUFjLEVBQWQsQ0FBRCxFQUFvQkwsU0FBU08sR0FBVCxFQUFjLEVBQWQsQ0FBcEIsRUFBdUNQLFNBQVNRLEdBQVQsRUFBYyxFQUFkLENBQXZDLENBQVA7QUFDRDs7QUFFTSxTQUFTdEIsaUJBQVQsQ0FBMkJ1QixRQUEzQixFQUFrRDtBQUFBLE1BQWJDLE9BQWEsdUVBQUgsQ0FBRzs7QUFDdkQsbUJBQWV6QixpQkFBaUJ3QixRQUFqQixFQUEyQkUsSUFBM0IsQ0FBZ0MsSUFBaEMsQ0FBZixVQUF5REQsT0FBekQ7QUFDRDs7QUFFRDs7Ozs7Ozs7O0FBU08sU0FBU3ZCLGdCQUFULENBQTBCeUIsUUFBMUIsRUFBb0NGLE9BQXBDLEVBQTZDO0FBQ2xELE1BQUksQ0FBQ0UsUUFBTCxFQUFlO0FBQUUsV0FBTyxZQUFQO0FBQXNCOztBQUV2QyxNQUFJQSxTQUFTcEIsTUFBVCxLQUFvQixDQUF4QixFQUEyQjtBQUN6QjtBQUNBb0IsZUFBVyxxQkFBTUEsUUFBTixDQUFYLENBRnlCLENBRUc7QUFDNUJGLGNBQVVFLFNBQVNDLEdBQVQsRUFBVixHQUEyQkgsVUFBVUUsU0FBU0MsR0FBVCxFQUFyQyxDQUh5QixDQUc0QjtBQUN0RDtBQUNELFNBQU9ILFlBQ0MsT0FBT0EsT0FBUCxLQUFtQixRQUFuQixJQUFnQyxPQUFPQSxPQUFQLEtBQW1CLFFBQW5CLElBQStCQSxRQUFRbEIsTUFEeEUsY0FFS29CLFNBQVNELElBQVQsQ0FBYyxHQUFkLENBRkwsU0FFMkJELE9BRjNCLGtCQUdJRSxTQUFTRCxJQUFULENBQWMsR0FBZCxDQUhKLE1BQVA7QUFJRDs7QUFFRDs7Ozs7O0FBTU8sU0FBU3ZCLG1CQUFULENBQTZCQyxLQUE3QixFQUFvQ3FCLE9BQXBDLEVBQTZDO0FBQ2xELFNBQU92QixpQkFBaUJGLGlCQUFpQkksS0FBakIsQ0FBakIsRUFBMENxQixPQUExQyxDQUFQO0FBQ0Q7Ozs7Ozs7O2dDQWpFZXpCLGdCOztnQ0E4QkFDLGlCOztnQ0FhQUMsZ0I7O2dDQW9CQUMsbUIiLCJmaWxlIjoiY29sb3JIZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsb25lIGZyb20gJ2xvZGFzaC9jbG9uZSc7XG5cbi8qKlxuICogTWV0aG9kIHJlZmVyZW5jZWQgZnJvbSBHb29nbGUncyBBbmd1bGFyIE1hdGVyaWFsIERlc2lnbiBsaWJyYXJ5XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbC9ibG9iLzczYjFkZjRiNzRhYTNhOTc3ZGQwNTFkYWRlN2YyYTJkZjMwYmIxODcvc3JjL2NvcmUvc2VydmljZXMvdGhlbWluZy90aGVtaW5nLmpzI0w2MDMtTDYzNVxuICpcbiAqIENvbnZlcnRzIGEgZGVmaW5lZCBjb2xvciBpbnRvIGFuIFJnYi9hIGFycmF5LlxuICpcbiAqIElucHV0OiAnI0ZGRkZGRidcbiAqIE91dHB1dDogWzI1NSwgMjU1LCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2xvclRvUmdiYUFycmF5KGNvbG9yKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNvbG9yKSAmJiAoY29sb3IubGVuZ3RoID09PSAzIHx8IGNvbG9yLmxlbmd0aCA9PT0gNCkpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoL15yZ2IvLnRlc3QoY29sb3IpKSB7XG4gICAgcmV0dXJuIGNvbG9yXG4gICAgICAucmVwbGFjZSgvKF5cXHMqcmdiYT9cXCh8XFwpXFxzKiQpL2csICcnKVxuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoKHZhbHVlLCBpKSA9PiAoaSA9PT0gMyA/IHBhcnNlRmxvYXQgOiBwYXJzZUludCkodmFsdWUsIDEwKSk7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICBjb2xvciA9IGNvbG9yLnN1YnN0cmluZygxKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICB9XG5cbiAgaWYgKCEvXihbYS1mQS1GMC05XXszfSl7MSwyfSQvZy50ZXN0KGNvbG9yKSkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG5cbiAgY29uc3QgZGlnID0gY29sb3IubGVuZ3RoIC8gMztcbiAgbGV0IHJlZCA9IGNvbG9yLnN1YnN0cigwLCBkaWcpO1xuICBsZXQgZ3JuID0gY29sb3Iuc3Vic3RyKGRpZywgZGlnKTtcbiAgbGV0IGJsdSA9IGNvbG9yLnN1YnN0cihkaWcgKiAyKTtcbiAgaWYgKGRpZyA9PT0gMSkge1xuICAgIHJlZCArPSByZWQ7XG4gICAgZ3JuICs9IGdybjtcbiAgICBibHUgKz0gYmx1O1xuICB9XG4gIHJldHVybiBbcGFyc2VJbnQocmVkLCAxNiksIHBhcnNlSW50KGdybiwgMTYpLCBwYXJzZUludChibHUsIDE2KV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvclRvUmdiYVN0cmluZyhoZXhDb2xvciwgb3BhY2l0eSA9IDEpIHtcbiAgcmV0dXJuIGByZ2JhKCR7Y29sb3JUb1JnYmFBcnJheShoZXhDb2xvcikuam9pbignLCAnKX0sICR7b3BhY2l0eX0pYDtcbn1cblxuLyoqXG4gKiBNZXRob2QgcmVmZXJlbmNlZCBmcm9tIEdvb2dsZSdzIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduIGxpYnJhcnlcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsL2Jsb2IvNzNiMWRmNGI3NGFhM2E5NzdkZDA1MWRhZGU3ZjJhMmRmMzBiYjE4Ny9zcmMvY29yZS9zZXJ2aWNlcy90aGVtaW5nL3RoZW1pbmcuanMjTDYwMy1MNjM1XG4gKlxuICogQ29udmVydHMgYW4gUmdiL2EgYXJyYXkgaW50byBhbiByZ2IvYSBjb2xvciBzdHJpbmcuXG4gKlxuICogSW5wdXQ6IFsyNTUsIDI1NSwgMjU1XVxuICogT3V0cHV0OiAncmdiKDI1NSwyNTUsMjU1KSdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYmFBcnJheVRvQ29sb3IocmdiQXJyYXksIG9wYWNpdHkpIHtcbiAgaWYgKCFyZ2JBcnJheSkgeyByZXR1cm4gJ3JnYigwLDAsMCknOyB9XG5cbiAgaWYgKHJnYkFycmF5Lmxlbmd0aCA9PT0gNCkge1xuICAgIC8vIEBUT0RPLWxpbnRpbmcgcmV3cml0ZSB0aGlzXG4gICAgcmdiQXJyYXkgPSBjbG9uZShyZ2JBcnJheSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcGFjaXR5ID8gcmdiQXJyYXkucG9wKCkgOiBvcGFjaXR5ID0gcmdiQXJyYXkucG9wKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgfVxuICByZXR1cm4gb3BhY2l0eSAmJlxuICAgICAgICAgKHR5cGVvZiBvcGFjaXR5ID09PSAnbnVtYmVyJyB8fCAodHlwZW9mIG9wYWNpdHkgPT09ICdzdHJpbmcnICYmIG9wYWNpdHkubGVuZ3RoKSlcbiAgICA/IGByZ2JhKCR7cmdiQXJyYXkuam9pbignLCcpfSwke29wYWNpdHl9KWBcbiAgICA6IGByZ2IoJHtyZ2JBcnJheS5qb2luKCcsJyl9KWA7XG59XG5cbi8qKlxuICogQWRkcyBvciBhZGp1c3RzIG9wYWNpdHkgdmFsdWVzIG9uIGNvbG9ycy5cbiAqXG4gKiBJbnB1dDogJ3JnYigyNTUsMjU1LDI1NSknLCAwLjVcbiAqIE91dHB1dDogJ3JnYigyNTUsMjU1LDI1NSwwLjUpJ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JXaXRoT3BhY2l0eShjb2xvciwgb3BhY2l0eSkge1xuICByZXR1cm4gcmdiYUFycmF5VG9Db2xvcihjb2xvclRvUmdiYUFycmF5KGNvbG9yKSwgb3BhY2l0eSk7XG59XG4iXX0=