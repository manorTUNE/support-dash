'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _paletteDefinitions = require('./_paletteDefinitions');

var PALETTES = _interopRequireWildcard(_paletteDefinitions);

var _paletteHelpers = require('./_paletteHelpers');

var _paletteHelpers2 = _interopRequireDefault(_paletteHelpers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require('fs');
var path = require('path');

var OUTPUT_FILE = path.resolve(__dirname + '/../palettes.js');

var lines = (0, _keys2.default)(PALETTES).map(function (name) {
  var generated = (0, _paletteHelpers2.default)(PALETTES[name]);
  return 'export const ' + name + ' = ' + (0, _stringify2.default)(generated, 4, 2) + ';';
});

var COMMENT_STRING = '/**\n  * This file is automatically generated by running "npm run generatePalettes".\n  * If you wish to modify this file, make your changes in _paletteDefinitions.\n  * If you are modifying it directly, your changes will be lost.\n*/';
var outputString = [COMMENT_STRING].concat((0, _toConsumableArray3.default)(lines)).join('\n\n');
/* eslint no-console: "off" */
console.log('Writing palettes to ' + OUTPUT_FILE);
fs.writeFileSync(OUTPUT_FILE, outputString);
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(OUTPUT_FILE, 'OUTPUT_FILE', 'src/styles/palettes/generatePalettes.js');

  __REACT_HOT_LOADER__.register(lines, 'lines', 'src/styles/palettes/generatePalettes.js');

  __REACT_HOT_LOADER__.register(COMMENT_STRING, 'COMMENT_STRING', 'src/styles/palettes/generatePalettes.js');

  __REACT_HOT_LOADER__.register(outputString, 'outputString', 'src/styles/palettes/generatePalettes.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZXMvcGFsZXR0ZXMvZ2VuZXJhdGVQYWxldHRlcy5qcyJdLCJuYW1lcyI6WyJQQUxFVFRFUyIsImZzIiwicmVxdWlyZSIsInBhdGgiLCJPVVRQVVRfRklMRSIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJsaW5lcyIsIm1hcCIsIm5hbWUiLCJnZW5lcmF0ZWQiLCJDT01NRU5UX1NUUklORyIsIm91dHB1dFN0cmluZyIsImpvaW4iLCJjb25zb2xlIiwibG9nIiwid3JpdGVGaWxlU3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7SUFBWUEsUTs7QUFDWjs7Ozs7Ozs7QUFFQSxJQUFNQyxLQUFLQyxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1FLGNBQWNELEtBQUtFLE9BQUwsQ0FBZ0JDLFNBQWhCLHFCQUFwQjs7QUFFQSxJQUFNQyxRQUFRLG9CQUFZUCxRQUFaLEVBQXNCUSxHQUF0QixDQUEwQixVQUFDQyxJQUFELEVBQVU7QUFDaEQsTUFBTUMsWUFBWSw4QkFBZ0JWLFNBQVNTLElBQVQsQ0FBaEIsQ0FBbEI7QUFDQSwyQkFBdUJBLElBQXZCLFdBQWlDLHlCQUFlQyxTQUFmLEVBQTBCLENBQTFCLEVBQTZCLENBQTdCLENBQWpDO0FBQ0QsQ0FIYSxDQUFkOztBQUtBLElBQU1DLDZQQUFOO0FBTUEsSUFBTUMsZUFBZSxDQUFDRCxjQUFELDBDQUFvQkosS0FBcEIsR0FBMkJNLElBQTNCLENBQWdDLE1BQWhDLENBQXJCO0FBQ0E7QUFDQUMsUUFBUUMsR0FBUiwwQkFBbUNYLFdBQW5DO0FBQ0FILEdBQUdlLGFBQUgsQ0FBaUJaLFdBQWpCLEVBQThCUSxZQUE5Qjs7Ozs7Ozs7Z0NBaEJNUixXOztnQ0FFQUcsSzs7Z0NBS0FJLGM7O2dDQU1BQyxZIiwiZmlsZSI6ImdlbmVyYXRlUGFsZXR0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQQUxFVFRFUyBmcm9tICcuL19wYWxldHRlRGVmaW5pdGlvbnMnO1xuaW1wb3J0IGdlbmVyYXRlUGFsZXR0ZSBmcm9tICcuL19wYWxldHRlSGVscGVycyc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IE9VVFBVVF9GSUxFID0gcGF0aC5yZXNvbHZlKGAke19fZGlybmFtZX0vLi4vcGFsZXR0ZXMuanNgKTtcblxuY29uc3QgbGluZXMgPSBPYmplY3Qua2V5cyhQQUxFVFRFUykubWFwKChuYW1lKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRlZCA9IGdlbmVyYXRlUGFsZXR0ZShQQUxFVFRFU1tuYW1lXSk7XG4gIHJldHVybiBgZXhwb3J0IGNvbnN0ICR7bmFtZX0gPSAke0pTT04uc3RyaW5naWZ5KGdlbmVyYXRlZCwgNCwgMil9O2A7XG59KTtcblxuY29uc3QgQ09NTUVOVF9TVFJJTkcgPVxuYC8qKlxuICAqIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBydW5uaW5nIFwibnBtIHJ1biBnZW5lcmF0ZVBhbGV0dGVzXCIuXG4gICogSWYgeW91IHdpc2ggdG8gbW9kaWZ5IHRoaXMgZmlsZSwgbWFrZSB5b3VyIGNoYW5nZXMgaW4gX3BhbGV0dGVEZWZpbml0aW9ucy5cbiAgKiBJZiB5b3UgYXJlIG1vZGlmeWluZyBpdCBkaXJlY3RseSwgeW91ciBjaGFuZ2VzIHdpbGwgYmUgbG9zdC5cbiovYDtcbmNvbnN0IG91dHB1dFN0cmluZyA9IFtDT01NRU5UX1NUUklORywgLi4ubGluZXNdLmpvaW4oJ1xcblxcbicpO1xuLyogZXNsaW50IG5vLWNvbnNvbGU6IFwib2ZmXCIgKi9cbmNvbnNvbGUubG9nKGBXcml0aW5nIHBhbGV0dGVzIHRvICR7T1VUUFVUX0ZJTEV9YCk7XG5mcy53cml0ZUZpbGVTeW5jKE9VVFBVVF9GSUxFLCBvdXRwdXRTdHJpbmcpO1xuIl19