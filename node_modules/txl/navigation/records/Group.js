'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _immutable = require('immutable');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DefaultTemplate = require('../DefaultTemplate');

var _DefaultTemplate2 = _interopRequireDefault(_DefaultTemplate);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _nextId = require('./nextId');

var _nextId2 = _interopRequireDefault(_nextId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Group = function (_Record) {
  (0, _inherits3.default)(Group, _Record);

  function Group(args) {
    (0, _classCallCheck3.default)(this, Group);

    var id = args.id || (0, _nextId2.default)();
    return (0, _possibleConstructorReturn3.default)(this, (Group.__proto__ || (0, _getPrototypeOf2.default)(Group)).call(this, (0, _extends3.default)({ id: id }, args)));
  }

  (0, _createClass3.default)(Group, [{
    key: 'update',
    value: function update(predicate, _update) {
      var items = this.items.map(function (item) {
        if (predicate != null && !predicate(item)) {
          return null;
        }
        return _update(item);
      });

      if (items.filter(function (i) {
        return i;
      }).size) {
        var result = this.items.mergeWith(function (oldVal, newVal) {
          return newVal == null ? oldVal : newVal;
        }, items);
        return this.set('items', result);
      }

      return this;
    }
  }]);
  return Group;
}((0, _immutable.Record)({
  active: false,
  display: null,
  expanded: false,
  hovered: false,
  icon: function icon() {
    return null;
  },
  id: 0,
  items: (0, _immutable.List)(),
  meta: (0, _immutable.Map)(),
  name: '',
  template: _DefaultTemplate2.default,
  templateProps: {}
}));

var _default = Group;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(Group, 'Group', 'src/navigation/records/Group.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/navigation/records/Group.js');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9uYXZpZ2F0aW9uL3JlY29yZHMvR3JvdXAuanMiXSwibmFtZXMiOlsiR3JvdXAiLCJhcmdzIiwiaWQiLCJwcmVkaWNhdGUiLCJ1cGRhdGUiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJmaWx0ZXIiLCJpIiwic2l6ZSIsInJlc3VsdCIsIm1lcmdlV2l0aCIsIm9sZFZhbCIsIm5ld1ZhbCIsInNldCIsImFjdGl2ZSIsImRpc3BsYXkiLCJleHBhbmRlZCIsImhvdmVyZWQiLCJpY29uIiwibWV0YSIsIm5hbWUiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7SUFFTUEsSzs7O0FBYUosaUJBQVlDLElBQVosRUFBMEI7QUFBQTs7QUFDeEIsUUFBTUMsS0FBS0QsS0FBS0MsRUFBTCxJQUFXLHVCQUF0QjtBQUR3Qix3SkFFaEJBLE1BRmdCLElBRVRELElBRlM7QUFHekI7Ozs7MkJBRU1FLFMsRUFBb0NDLE8sRUFBcUM7QUFDOUUsVUFBTUMsUUFBUSxLQUFLQSxLQUFMLENBQVdDLEdBQVgsQ0FBZSxVQUFDQyxJQUFELEVBQVU7QUFDckMsWUFBSUosYUFBYSxJQUFiLElBQXFCLENBQUNBLFVBQVVJLElBQVYsQ0FBMUIsRUFBMkM7QUFDekMsaUJBQU8sSUFBUDtBQUNEO0FBQ0QsZUFBT0gsUUFBT0csSUFBUCxDQUFQO0FBQ0QsT0FMYSxDQUFkOztBQU9BLFVBQUlGLE1BQU1HLE1BQU4sQ0FBYTtBQUFBLGVBQUtDLENBQUw7QUFBQSxPQUFiLEVBQXFCQyxJQUF6QixFQUErQjtBQUM3QixZQUFNQyxTQUFTLEtBQUtOLEtBQUwsQ0FBV08sU0FBWCxDQUNiLFVBQUNDLE1BQUQsRUFBU0MsTUFBVDtBQUFBLGlCQUFxQkEsVUFBVSxJQUFWLEdBQWlCRCxNQUFqQixHQUEwQkMsTUFBL0M7QUFBQSxTQURhLEVBRWJULEtBRmEsQ0FBZjtBQUlBLGVBQU8sS0FBS1UsR0FBTCxDQUFTLE9BQVQsRUFBa0JKLE1BQWxCLENBQVA7QUFDRDs7QUFFRCxhQUFPLElBQVA7QUFDRDs7O0VBbkNpQix1QkFBTztBQUN6QkssVUFBUSxLQURpQjtBQUV6QkMsV0FBUyxJQUZnQjtBQUd6QkMsWUFBVSxLQUhlO0FBSXpCQyxXQUFTLEtBSmdCO0FBS3pCQyxRQUFNO0FBQUEsV0FBTSxJQUFOO0FBQUEsR0FMbUI7QUFNekJsQixNQUFJLENBTnFCO0FBT3pCRyxTQUFPLHNCQVBrQjtBQVF6QmdCLFFBQU0scUJBUm1CO0FBU3pCQyxRQUFNLEVBVG1CO0FBVXpCQyxxQ0FWeUI7QUFXekJDLGlCQUFlO0FBWFUsQ0FBUCxDOztlQWtETHhCLEs7Ozs7Ozs7OztnQ0FsRFRBLEsiLCJmaWxlIjoiR3JvdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBMaXN0LCBNYXAsIFJlY29yZCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRGVmYXVsdFRlbXBsYXRlIGZyb20gJy4uL0RlZmF1bHRUZW1wbGF0ZSc7XG5pbXBvcnQgSXRlbSBmcm9tICcuL0l0ZW0nO1xuaW1wb3J0IG5leHRJZCBmcm9tICcuL25leHRJZCc7XG5cbmNsYXNzIEdyb3VwIGV4dGVuZHMgUmVjb3JkKHtcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzcGxheTogbnVsbCxcbiAgZXhwYW5kZWQ6IGZhbHNlLFxuICBob3ZlcmVkOiBmYWxzZSxcbiAgaWNvbjogKCkgPT4gbnVsbCxcbiAgaWQ6IDAsXG4gIGl0ZW1zOiBMaXN0KCksXG4gIG1ldGE6IE1hcCgpLFxuICBuYW1lOiAnJyxcbiAgdGVtcGxhdGU6IERlZmF1bHRUZW1wbGF0ZSxcbiAgdGVtcGxhdGVQcm9wczoge30sXG59KSB7XG4gIGNvbnN0cnVjdG9yKGFyZ3M6IE9iamVjdCkge1xuICAgIGNvbnN0IGlkID0gYXJncy5pZCB8fCBuZXh0SWQoKTtcbiAgICBzdXBlcih7IGlkLCAuLi5hcmdzIH0pO1xuICB9XG5cbiAgdXBkYXRlKHByZWRpY2F0ZTogKGl0ZW06IEl0ZW0pID0+IGJvb2xlYW4sIHVwZGF0ZTogKGl0ZW06IEl0ZW0pID0+IEl0ZW0pOiBHcm91cCB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKHByZWRpY2F0ZSAhPSBudWxsICYmICFwcmVkaWNhdGUoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXBkYXRlKGl0ZW0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGl0ZW1zLmZpbHRlcihpID0+IGkpLnNpemUpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaXRlbXMubWVyZ2VXaXRoKFxuICAgICAgICAob2xkVmFsLCBuZXdWYWwpID0+IChuZXdWYWwgPT0gbnVsbCA/IG9sZFZhbCA6IG5ld1ZhbCksXG4gICAgICAgIGl0ZW1zXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCdpdGVtcycsIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhY3RpdmU6IGJvb2xlYW47XG4gIGRpc3BsYXk6IFJlYWN0LkVsZW1lbnQ8Kj47XG4gIGV4cGFuZGVkOiBib29sZWFuO1xuICBob3ZlcmVkOiBib29sZWFuO1xuICBpY29uOiAocHJvcHM/OiBPYmplY3QpID0+IFJlYWN0LkVsZW1lbnQ8Kj47XG4gIGlkOiBudW1iZXI7XG4gIGl0ZW1zOiBMaXN0PEl0ZW0+O1xuICBtZXRhOiBNYXA8c3RyaW5nLCBhbnk+O1xuICBuYW1lOiBzdHJpbmc7XG4gIHRlbXBsYXRlOiAocHJvcHM/OiBPYmplY3QpID0+IFJlYWN0LkVsZW1lbnQ8Kj47XG4gIHRlbXBsYXRlUHJvcHM6IE9iamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JvdXA7XG4iXX0=