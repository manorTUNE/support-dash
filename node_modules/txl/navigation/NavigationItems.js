'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _immutable = require('immutable');

var _Item = require('./records/Item');

var _Item2 = _interopRequireDefault(_Item);

var _Group = require('./records/Group');

var _Group2 = _interopRequireDefault(_Group);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var safeSet = function safeSet(item, field, val) {
  if (item[field] !== val) {
    return item.set(field, val);
  }

  return item;
};

var isActive = function isActive(name) {
  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return activeNames.indexOf(name) !== -1;
};
var isExpanded = function isExpanded(name) {
  var expandedNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return expandedNames.indexOf(name) !== -1;
};

var NavigationItems = function () {
  function NavigationItems(_ref) {
    var items = _ref.items,
        defaultTemplate = _ref.defaultTemplate,
        activeNames = _ref.activeNames,
        expandedNames = _ref.expandedNames;
    (0, _classCallCheck3.default)(this, NavigationItems);

    this._defaultTemplate = defaultTemplate;

    if (items instanceof _immutable.List) {
      this._items = items;
    } else {
      this._items = this._parse(items, expandedNames, activeNames);
    }
  }

  (0, _createClass3.default)(NavigationItems, [{
    key: '_parse',
    value: function _parse(arr, expandedNames, activeNames) {
      var _this = this;

      var parseItem = function parseItem(item, defaultTemplate) {
        var active = item.active,
            display = item.display,
            name = item.name,
            template = item.template,
            templateProps = (0, _objectWithoutProperties3.default)(item, ['active', 'display', 'name', 'template']);


        return new _Item2.default({
          active: active || isActive(display, activeNames) || isActive(name, activeNames),
          display: display,
          name: name,
          template: template || defaultTemplate,
          templateProps: templateProps
        });
      };

      var parseGroup = function parseGroup(group) {
        var active = group.active,
            display = group.display,
            expanded = group.expanded,
            icon = group.icon,
            items = group.items,
            name = group.name,
            template = group.template,
            templateProps = (0, _objectWithoutProperties3.default)(group, ['active', 'display', 'expanded', 'icon', 'items', 'name', 'template']);


        var temp = template || _this._defaultTemplate;

        return new _Group2.default({
          active: active || isActive(name, activeNames),
          display: display,
          expanded: expanded || isExpanded(name, expandedNames),
          icon: icon,
          items: (0, _immutable.List)((items || []).map(function (i) {
            return parseItem(i, temp);
          })),
          name: name,
          template: temp,
          templateProps: templateProps
        });
      };

      return (0, _immutable.List)(arr.map(parseGroup));
    }
  }, {
    key: 'updateActive',
    value: function updateActive(activeNames) {
      var update = function update(item) {
        return safeSet(item, 'active', isActive(item.name, activeNames));
      };
      var predicate = function predicate(item) {
        return item.active || isActive(item.name, activeNames);
      };
      return this.update({ update: update }, { predicate: predicate, update: update });
    }
  }, {
    key: 'updateExpanded',
    value: function updateExpanded(expandedNames) {
      var update = function update(group) {
        return safeSet(group, 'expanded', true);
      };
      var predicate = function predicate(group) {
        return isExpanded(group.name, expandedNames);
      };

      return this.update({ predicate: predicate, update: update }, null);
    }
  }, {
    key: 'updateGroup',
    value: function updateGroup(predicate, update) {
      return this.update({ predicate: predicate, update: update });
    }
  }, {
    key: 'update',
    value: function update(groupUpdate, itemUpdate) {
      var updated = this._items.map(function (group) {
        if (groupUpdate.predicate && !groupUpdate.predicate(group)) {
          return null;
        }

        if (itemUpdate != null) {
          return groupUpdate.update(group.update(itemUpdate.predicate, itemUpdate.update));
        }

        return groupUpdate.update(group);
      });

      if (updated.filter(function (i) {
        return i;
      }).size) {
        var result = this._items.mergeWith(function (oldVal, newVal) {
          return newVal == null ? oldVal : newVal;
        }, updated);

        return new NavigationItems({
          defaultTemplate: this._defaultTemplate,
          items: result
        });
      }

      return this;
    }
  }, {
    key: 'valueOf',
    value: function valueOf() {
      return this._items;
    }
  }]);
  return NavigationItems;
}();

var _default = NavigationItems;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(safeSet, 'safeSet', 'src/navigation/NavigationItems.js');

  __REACT_HOT_LOADER__.register(isActive, 'isActive', 'src/navigation/NavigationItems.js');

  __REACT_HOT_LOADER__.register(isExpanded, 'isExpanded', 'src/navigation/NavigationItems.js');

  __REACT_HOT_LOADER__.register(NavigationItems, 'NavigationItems', 'src/navigation/NavigationItems.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/navigation/NavigationItems.js');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,