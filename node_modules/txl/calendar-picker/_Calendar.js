'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _desc, _value, _class2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _memoize = require('lodash/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

var _range = require('lodash/range');

var _range2 = _interopRequireDefault(_range);

var _propTypes = require('../utils/propTypes');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helpers = require('../styles/helpers');

var _Base = require('../base/Base');

var _CalendarUtils = require('./_CalendarUtils');

var _Calendar = require('./_Calendar.style');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _CursorTooltipTarget = require('../_tooltips/CursorTooltipTarget');

var _CursorTooltipTarget2 = _interopRequireDefault(_CursorTooltipTarget);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var COMPARE_FORMAT = 'MM-DD-YYYY';
var WEEK_ROWS = 6;

function getNumberOfWeekRows(date) {
  var firstDay = date.day();
  var datesInMonth = date.daysInMonth();
  var numberOfTotalCell = firstDay + datesInMonth;
  return Math.ceil(numberOfTotalCell / 7);
}

function daysForMonth(date) {
  var startDayIndex = date.day(); // zero-based
  var endDayIndex = date.daysInMonth() + (startDayIndex - 1); // -1 to make zero-based

  return (0, _range2.default)(0, 7 * WEEK_ROWS).map(function (val) {
    if (val >= startDayIndex && val <= endDayIndex) {
      return (0, _moment2.default)(date).add(val - startDayIndex, 'day');
    }
    return '';
  });
}

function memoizeKey(date) {
  return date.format(COMPARE_FORMAT);
}

// returns array of days displayed for calendar month including trailing
// and leading empty days as empty strings e.g ['', ... Moment, Moment , '']
var getDays = (0, _memoize2.default)(daysForMonth, memoizeKey);

function getCellStyles(date, hoveredDate) {
  if (!date) {
    // needed to keep the empty cells padding-less and border-boxed
    return _Calendar2.default.cell.base;
  }
  var isCurrentDay = date.isSame((0, _moment2.default)(), 'day');
  var isHoverDay = !!hoveredDate && hoveredDate.isSame(date, 'day');
  return (0, _helpers.combineStyles)(_Calendar2.default.cell.base, isCurrentDay && _Calendar2.default.cell.current, isHoverDay && _Calendar2.default.cell.hover);
}

function getDayStyles(date, props) {
  if (!date) {
    return null;
  }
  var rangeEnd = props.rangeEnd,
      rangeEndBoundary = props.rangeEndBoundary,
      rangeStart = props.rangeStart,
      rangeStartBoundary = props.rangeStartBoundary;


  var boundariesProvided = rangeEndBoundary || rangeStartBoundary;
  // these just default to 'today' if rangeStart/End are undefined
  var rangeStartVal = (0, _moment2.default)(rangeStart).startOf('day');
  var rangeEndVal = (0, _moment2.default)(rangeEnd).startOf('day');
  var isRangeStart = rangeStartVal.isSame(date, 'day');
  var isRangeEnd = rangeEndVal.isSame(date, 'day');
  var inRange = date.isBetween(rangeStartVal, rangeEndVal, null, '[]');
  // Disable if outside of provided boundaries
  var isDisabled = boundariesProvided && !(0, _CalendarUtils.isDateWithinRange)(date, rangeStartBoundary, rangeEndBoundary);

  return (0, _helpers.combineStyles)({ cursor: 'pointer' }, _Calendar2.default.date.base, inRange && _Calendar2.default.date.inRange, isRangeStart && _Calendar2.default.date.rangeStart, isRangeEnd && _Calendar2.default.date.rangeEnd, isDisabled && _Calendar2.default.date.disabled);
}

var TxlCalendar = (0, _radium2.default)(_class = (_class2 = function (_React$Component) {
  (0, _inherits3.default)(TxlCalendar, _React$Component);

  // @TODO add drag functionality
  function TxlCalendar() {
    var _ref;

    (0, _classCallCheck3.default)(this, TxlCalendar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = TxlCalendar.__proto__ || (0, _getPrototypeOf2.default)(TxlCalendar)).call.apply(_ref, [this].concat(args)));

    _this.state = { hoveredDate: '' };
    return _this;
  }

  (0, _createClass3.default)(TxlCalendar, [{
    key: '_onHoverUpdate',
    value: function _onHoverUpdate(date) {
      this.setState({ hoveredDate: date });
      this.props.onHoverUpdate({ date: date });
    }
  }, {
    key: '_onDateClick',
    value: function _onDateClick(date) {
      this.props.onDateClick({ date: date });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          date = _props.date,
          outOfRangeTooltip = _props.outOfRangeTooltip,
          rangeEndBoundary = _props.rangeEndBoundary,
          rangeStartBoundary = _props.rangeStartBoundary;

      var boundariesProvided = rangeEndBoundary && rangeStartBoundary;
      var monthStart = (0, _moment2.default)(date).startOf('month');
      var daysArr = getDays(monthStart);
      var hoveredDate = this.state.hoveredDate;


      return _react2.default.createElement(
        'div',
        {
          'data-component': 'TxlCalendar',
          style: _Calendar2.default.calendar
        },
        _react2.default.createElement(
          'table',
          {
            style: _Calendar2.default.table
          },
          _react2.default.createElement(
            'thead',
            null,
            _react2.default.createElement(
              'tr',
              null,
              _react2.default.createElement(
                'th',
                {
                  style: _Calendar2.default.monthHeader,
                  colSpan: '7'
                },
                monthStart.format('MMMM YYYY')
              )
            ),
            _react2.default.createElement(
              'tr',
              null,
              _moment2.default.weekdaysMin().map(function (day, index) {
                return _react2.default.createElement(
                  'th',
                  {
                    style: _Calendar2.default.dayHeader,
                    key: index
                  },
                  day
                );
              })
            )
          ),
          _react2.default.createElement(
            'tbody',
            { onMouseLeave: function onMouseLeave() {
                return _this2._onHoverUpdate('');
              } },
            (0, _range2.default)(getNumberOfWeekRows(monthStart)).map(function (week) {
              var weekStartIndex = 7 * week;
              var currentWeek = daysArr.slice(weekStartIndex, weekStartIndex + 7);
              return _react2.default.createElement(
                'tr',
                { key: week },
                currentWeek.map(function (day, index) {
                  /**
                   * @TODO pull this logic out of render() method, probably into its
                   * own component, e.g., 'DataCell'
                   * https://jira.corp.tune.com/browse/TXLENG-153
                   */
                  var dayIsInBounds = !!day && (
                  // no boundaries provided is same as 'in bounds' for these purposes
                  // boundaries provided, check range
                  !boundariesProvided || (0, _CalendarUtils.isDateWithinRange)(day, rangeStartBoundary, rangeEndBoundary));
                  var dateClickHandler = dayIsInBounds ? function () {
                    return _this2._onDateClick(day);
                  } : _Base.NOOP;

                  // init empty/placeholder cell
                  var dayEl = _react2.default.createElement('span', { style: _Calendar2.default.date.base });
                  if (day) {
                    // Active or disabled day
                    dayEl = _react2.default.createElement(
                      'span',
                      {
                        onClick: dateClickHandler,
                        style: getDayStyles(day, _this2.props)
                      },
                      day.format('D')
                    );
                    // wrap disabled day in tooltip, if applicable
                    if (!dayIsInBounds && outOfRangeTooltip) {
                      dayEl = _react2.default.createElement(
                        _CursorTooltipTarget2.default,
                        {
                          message: outOfRangeTooltip
                        },
                        dayEl
                      );
                    }
                  }

                  return _react2.default.createElement(
                    'td',
                    {
                      'data-day': day || 0,
                      key: index,
                      onMouseEnter: function onMouseEnter() {
                        return _this2._onHoverUpdate(dayIsInBounds ? day : '');
                      },
                      style: getCellStyles(day, hoveredDate)
                    },
                    dayEl
                  );
                })
              );
            })
          )
        )
      );
    }
  }]);
  return TxlCalendar;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class2.prototype, '_onHoverUpdate', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_onHoverUpdate'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_onDateClick', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_onDateClick'), _class2.prototype)), _class2)) || _class;

exports.default = TxlCalendar;


TxlCalendar.propTypes = {
  date: _propTypes2.default.date.isRequired,
  onDateClick: _react.PropTypes.func,
  onHoverUpdate: _react.PropTypes.func,
  outOfRangeTooltip: _react.PropTypes.node,
  rangeEnd: _propTypes2.default.date,
  rangeEndBoundary: _propTypes2.default.date,
  rangeStart: _propTypes2.default.date,
  rangeStartBoundary: _propTypes2.default.date
};

TxlCalendar.defaultProps = {
  onDateClick: _Base.NOOP,
  onHoverUpdate: _Base.NOOP
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(COMPARE_FORMAT, 'COMPARE_FORMAT', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(WEEK_ROWS, 'WEEK_ROWS', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(getNumberOfWeekRows, 'getNumberOfWeekRows', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(daysForMonth, 'daysForMonth', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(memoizeKey, 'memoizeKey', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(getDays, 'getDays', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(getCellStyles, 'getCellStyles', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(getDayStyles, 'getDayStyles', 'src/calendar-picker/_Calendar.jsx');

  __REACT_HOT_LOADER__.register(TxlCalendar, 'TxlCalendar', 'src/calendar-picker/_Calendar.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,