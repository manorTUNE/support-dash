'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeObjFromMoment = exports.stringToTimeObj = exports.momentToDate = exports.isValidDateRange = exports.isTimeWithinRange = exports.isMonthPartOfRange = exports.isDateWithinRange = exports.getPrevHalfHour = exports.getNextHalfHour = exports.dateToMoment = exports.dateStringToMoment = exports.DATE_RANGE_PRESETS = exports.buildTimeIntervalOptions = undefined;

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _TimeZones = require('../constants/_TimeZones');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Map UTC date string to moment instance
 *
 * @param {String} date - UTC-formatted date string (@TODO: validate pattern of arg)
 * @returns {(moment|boolean)}
 */
function dateStringToMoment(date) {
  // already a valid moment
  if (date.isValid && date.isValid()) return date;
  // try to instantiate a new moment
  return typeof date === 'string' && (0, _moment2.default)(date).isValid() ? (0, _moment2.default)(date) : null;
}

function dateToMoment(date) {
  var momentDate = date;
  if (!date || date && !date._isAMomentObject) {
    momentDate = (0, _moment2.default)(date);
  }
  return momentDate;
}

/**
 * Are dates valid and does start come before end?
 *
 * @param {moment} momentStart
 * @param {moment} momentEnd
 * @returns {Boolean}
 */
function isValidDateRange(momentStart, momentEnd) {
  var start = dateToMoment(momentStart);
  var end = dateToMoment(momentEnd);
  return start && end && start.isValid() && end.isValid() && start.isSameOrBefore(end);
}

/**
 * Is date within provided boundaries? (exclusive)
 * @param {moment} date
 * @param {moment} rangeStart
 * @param {moment} rangeEnd
 * @param {Boolean} [useTimes] - Respect times of rangeStart/End moments or only compare dates
 * @returns {Boolean}
 */
function isDateWithinRange(date, rangeStart, rangeEnd) {
  var useTimes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var formattedRangeStart = rangeStart;
  var formattedRangeEnd = rangeEnd;

  if (!useTimes) {
    formattedRangeStart = rangeStart && rangeStart.clone().startOf('day');
    formattedRangeEnd = rangeEnd && rangeEnd.clone().endOf('day');
  }

  var isAfterStart = formattedRangeStart ? date.isSameOrAfter(formattedRangeStart) : true;
  var isBeforeEnd = formattedRangeEnd ? date.isSameOrBefore(formattedRangeEnd) : true;

  return isAfterStart && isBeforeEnd;
}

/**
 * Verify time (not date) falls within provided range
 *
 * @param time {TimeObject}
 * @param rangeStart {TimeObject}
 * @param rangeEnd {TimeObject}
 * @returns {Boolean}
 */
function isTimeWithinRange(time, rangeStart, rangeEnd) {
  // missing boundary param means we can't really check range
  if (!rangeStart || !rangeEnd) return false;
  return (0, _moment2.default)(time).isBetween((0, _moment2.default)(rangeStart), (0, _moment2.default)(rangeEnd), null, '[]');
}

/**
 * Map moment obj to `{ hour: 20, minute: 15, second: 30 }` format
 *
 * @param time {moment}
 * @returns {TimeObject}
 */
function timeObjFromMoment(time) {
  return {
    hour: time.hour(),
    minute: time.minute(),
    second: time.second()
  };
}

/**
 * Round down time by a half hour
 * @param obj
 * @param obj.time {moment}
 * @param obj.pattern {String} - Format pattern used by moment
 * @returns {String} - Formatted date string
 */
function getPrevHalfHour(_ref) {
  var _ref$time = _ref.time,
      time = _ref$time === undefined ? (0, _moment2.default)() : _ref$time,
      pattern = _ref.pattern;

  return time.clone().set({
    millisecond: 0,
    minutes: time.minutes() >= 30 ? 30 : 0
  }).format(pattern);
}

/**
 * Round up time by a half hour
 * @param obj
 * @param obj.time {moment}
 * @param obj.pattern {String} - Format pattern used by moment
 * @returns {String} - Formatted date string
 */
function getNextHalfHour(_ref2) {
  var _ref2$time = _ref2.time,
      time = _ref2$time === undefined ? (0, _moment2.default)() : _ref2$time,
      pattern = _ref2.pattern;

  return time.clone().set({
    millisecond: 0,
    minutes: time.minutes() >= 30 ? 0 : 30
  })
  // need to bump hour if rounding up
  .add(time.minutes() >= 30 ? 1 : 0, 'h').format(pattern);
}

/**
 * A config obj used to define date ranges used in calendars, et al.
 *
 * @typedef {Object} TimeObject
 * @property {Number} hour - Hour between 0-23
 * @property {Number} minute - Minute between 0-59
 */

/**
 * Create array of time option objects for use in dropdowns
 *
 * @param {TimeObject} [boundaryEnd]
 * @param {TimeObject} [boundaryStart]
 * @param {Number} [interval] - Number of minutes between options
 * @param {String} [pattern] - moment-recognized formatting pattern
 * @returns {Object[]} - Array of objects w/ shape: { hour, minute, second, label, value }
 */
function buildTimeIntervalOptions(_ref3) {
  var _ref3$boundaryEnd = _ref3.boundaryEnd,
      boundaryEnd = _ref3$boundaryEnd === undefined ? { hour: 23, minute: 59, second: 59 } : _ref3$boundaryEnd,
      _ref3$boundaryStart = _ref3.boundaryStart,
      boundaryStart = _ref3$boundaryStart === undefined ? { hour: 0, minute: 0, second: 0 } : _ref3$boundaryStart,
      _ref3$interval = _ref3.interval,
      interval = _ref3$interval === undefined ? 30 : _ref3$interval,
      _ref3$pattern = _ref3.pattern,
      pattern = _ref3$pattern === undefined ? _TimeZones.DEFAULT_TIME_PATTERN : _ref3$pattern;

  var ret = [];
  // seconds will always equal zero for default options
  var second = 0;
  for (var hour = boundaryStart.hour; hour <= boundaryEnd.hour; hour++) {
    for (var minute = 0; minute < 60; minute += interval) {
      if (isTimeWithinRange({ hour: hour, minute: minute, second: second }, boundaryStart, boundaryEnd)) {
        var option = (0, _moment2.default)({ hour: hour, minute: minute, second: second }).format(pattern);
        ret.push({
          hour: hour,
          label: option,
          minute: minute,
          second: second,
          value: option
        });
      }
    }
  }
  return ret;
}

/**
 * Does the date provided fall within the months of the range, even if the date itself does not,
 * e.g., `isMonthPartOfRange(<Jan 02, 2016>, <Jan 15, 2016>, <March 15, 2016>)` returns true
 *
 * @param date {moment}
 * @param rangeStart {moment}
 * @param rangeEnd {moment}
 * @returns {Boolean}
 */
function isMonthPartOfRange(date, rangeStart, rangeEnd) {
  // no boundaries means date is valid
  if (!rangeStart || !rangeEnd) return true;
  return isDateWithinRange(date, rangeStart, rangeEnd)
  // date may be out of range, but within same month
  || date.isSame(rangeStart, 'month') || date.isSame(rangeEnd, 'month');
}

function momentToDate(momentDate) {
  if (momentDate && momentDate._isAMomentObject) {
    return momentDate.toDate();
  }
  return momentDate;
}

/**
 * Convert formatted time string to { hour: 1, minute: 11, second: 59 }
 *
 * @param {String} time - Formatted time, e.g., "02:13:00 PM"
 * @param {String} pattern - moment pattern for displaying/parsing time, e.g., 'hh:mma'
 * @returns {TimeObject|boolean} - Returns false if time string is invalid
 */
function stringToTimeObj(time, pattern) {
  var timeMoment = (0, _moment2.default)(time, pattern, true);
  return timeMoment.isValid() && {
    hour: timeMoment.hour(),
    minute: timeMoment.minute(),
    second: timeMoment.second()
  };
}

/**
 * A config obj used to define date ranges used in calendars, et al.
 *
 * @typedef {Object} DateRangePreset
 * @property {String} key - ID for preset
 * @property {String} label - Nice name for user (@TODO should probably be translated)
 * @property {moment} startDate - Start date in range
 * @property {moment} endDate - End date in range
 */

/**
 * Collection of date range presets
 * @type {DateRangePreset[]}
 */
var DATE_RANGE_PRESETS = [{
  endDate: (0, _moment2.default)().endOf('day'),
  key: 'today',
  label: 'Today',
  startDate: (0, _moment2.default)().startOf('day')
}, {
  endDate: (0, _moment2.default)().endOf('day').subtract(1, 'day'),
  key: 'yesterday',
  label: 'Yesterday',
  startDate: (0, _moment2.default)().startOf('day').subtract(1, 'day')
}, {
  endDate: (0, _moment2.default)().endOf('day').subtract(1, 'day'),
  key: 'last7Days',
  label: 'Last 7 Days',
  startDate: (0, _moment2.default)().startOf('day').subtract(7, 'day')
}, {
  endDate: (0, _moment2.default)().subtract(1, 'week').endOf('week'),
  key: 'prevWeek',
  label: 'Previous Week',
  startDate: (0, _moment2.default)().subtract(1, 'week').startOf('week')
}, {
  endDate: (0, _moment2.default)().endOf('day'),
  key: 'monthToDate',
  label: 'Month to Date',
  startDate: (0, _moment2.default)().startOf('month')
}, {
  endDate: (0, _moment2.default)().endOf('day').subtract(1, 'day'),
  key: 'last30Days',
  label: 'Last 30 Days',
  startDate: (0, _moment2.default)().startOf('day').subtract(30, 'day')
}, {
  endDate: (0, _moment2.default)().subtract(1, 'month').endOf('month'),
  key: 'lastMonth',
  label: 'Last Month',
  startDate: (0, _moment2.default)().subtract(1, 'month').startOf('month')
}, {
  endDate: (0, _moment2.default)().endOf('day'),
  key: 'custom',
  label: 'Custom',
  startDate: (0, _moment2.default)().startOf('day')
}];

exports.buildTimeIntervalOptions = buildTimeIntervalOptions;
exports.DATE_RANGE_PRESETS = DATE_RANGE_PRESETS;
exports.dateStringToMoment = dateStringToMoment;
exports.dateToMoment = dateToMoment;
exports.getNextHalfHour = getNextHalfHour;
exports.getPrevHalfHour = getPrevHalfHour;
exports.isDateWithinRange = isDateWithinRange;
exports.isMonthPartOfRange = isMonthPartOfRange;
exports.isTimeWithinRange = isTimeWithinRange;
exports.isValidDateRange = isValidDateRange;
exports.momentToDate = momentToDate;
exports.stringToTimeObj = stringToTimeObj;
exports.timeObjFromMoment = timeObjFromMoment;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(dateStringToMoment, 'dateStringToMoment', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(dateToMoment, 'dateToMoment', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(isValidDateRange, 'isValidDateRange', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(isDateWithinRange, 'isDateWithinRange', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(isTimeWithinRange, 'isTimeWithinRange', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(timeObjFromMoment, 'timeObjFromMoment', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(getPrevHalfHour, 'getPrevHalfHour', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(getNextHalfHour, 'getNextHalfHour', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(buildTimeIntervalOptions, 'buildTimeIntervalOptions', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(isMonthPartOfRange, 'isMonthPartOfRange', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(momentToDate, 'momentToDate', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(stringToTimeObj, 'stringToTimeObj', 'src/calendar-picker/_CalendarUtils.js');

  __REACT_HOT_LOADER__.register(DATE_RANGE_PRESETS, 'DATE_RANGE_PRESETS', 'src/calendar-picker/_CalendarUtils.js');
}();

;
//# sourceMappingURL=data:application/json;base64,