'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _desc, _value, _class2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _sortBy = require('lodash/sortBy');

var _sortBy2 = _interopRequireDefault(_sortBy);

var _Base = require('../base/Base');

var _propTypes = require('../utils/propTypes');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CalendarPresets = require('./_CalendarPresets');

var _CalendarPresets2 = _interopRequireDefault(_CalendarPresets);

var _CalendarUtils = require('./_CalendarUtils');

var _CalendarPicker = require('./CalendarPicker');

var _CalendarPicker2 = _interopRequireDefault(_CalendarPicker);

var _CalendarPickerWithPresets = require('./CalendarPickerWithPresets.style');

var _CalendarPickerWithPresets2 = _interopRequireDefault(_CalendarPickerWithPresets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
 * subtracting here to make sure second calendar is one showing the selected date range,
 * e.g., I pick last month with today being 3/1/2015, the date picker would be set to show
 * Feb as calendar two which requires us to set the datepicker date to Jan or Feb - 1 month
 */
function getPrevMonthAsMoment(date) {
  return (0, _moment2.default)(date).subtract(1, 'month');
}

function getPresetFromKey(presetKey) {
  return _CalendarUtils.DATE_RANGE_PRESETS.filter(function (preset) {
    return preset.key === presetKey;
  })[0];
}

function getDateForCalPicker(_ref) {
  var presetKey = _ref.presetKey,
      range = _ref.range;

  var preset = getPresetFromKey(presetKey);
  // for presets other than 'custom', preset.endDate will be a real date, but if user's picked a
  // custom range, we want to use their selected endDate and not the preset default, which is
  // today's date
  return getPrevMonthAsMoment(preset.key !== 'custom' ? preset.endDate : range[1]);
}

function getStateFromProps(props) {
  var preset = getPresetFromKey(props.presetKey);
  var range = props.range || [preset.startDate, preset.endDate];
  return {
    presetKey: preset.key,
    range: range
  };
}

function getSortedDates() {
  for (var _len = arguments.length, dates = Array(_len), _key = 0; _key < _len; _key++) {
    dates[_key] = arguments[_key];
  }

  return (0, _sortBy2.default)([].concat(dates), function (obj) {
    return obj.unix();
  });
}

var TxlCalendarPickerWithPresets = (0, _radium2.default)(_class = (_class2 = function (_React$Component) {
  (0, _inherits3.default)(TxlCalendarPickerWithPresets, _React$Component);

  function TxlCalendarPickerWithPresets() {
    var _ref2;

    (0, _classCallCheck3.default)(this, TxlCalendarPickerWithPresets);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref2 = TxlCalendarPickerWithPresets.__proto__ || (0, _getPrototypeOf2.default)(TxlCalendarPickerWithPresets)).call.apply(_ref2, [this].concat(args)));

    var initialState = getStateFromProps(_this.props);
    _this.state = (0, _extends3.default)({}, initialState, {
      date: getDateForCalPicker(initialState)
    });
    _this._firstClick = null;
    return _this;
  }

  (0, _createClass3.default)(TxlCalendarPickerWithPresets, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState(getStateFromProps(newProps));
    }
  }, {
    key: '_handleDateClick',
    value: function _handleDateClick(_ref3) {
      var date = _ref3.date;

      var range = void 0;

      if (!this.state.findMode) {
        // first date select
        range = [date, date];
        this._firstClick = date;
      } else {
        // second date select
        var onDateSelect = this.props.onDateSelect;


        range = getSortedDates(this._firstClick, date);
        this._firstClick = null;

        onDateSelect({
          endDate: range[1],
          presetKey: this.state.presetKey,
          startDate: range[0]
        });
      }

      this.setState({
        findMode: !this.state.findMode,
        presetKey: 'custom',
        range: range
      });
    }
  }, {
    key: '_handleHoverUpdate',
    value: function _handleHoverUpdate(_ref4) {
      var date = _ref4.date;

      if (this.state.findMode) {
        this.setState({
          range: getSortedDates(this._firstClick, date || this._firstClick // handleCase where null cell hovered
          )
        });
      }
    }
  }, {
    key: '_handleNextClick',
    value: function _handleNextClick() {
      this.setState({ date: (0, _moment2.default)(this.state.date).add(1, 'month') });
    }
  }, {
    key: '_handlePrevClick',
    value: function _handlePrevClick() {
      this.setState({ date: (0, _moment2.default)(this.state.date).subtract(1, 'month') });
    }
  }, {
    key: '_handlePresetSelect',
    value: function _handlePresetSelect(_ref5) {
      var _this2 = this;

      var presetKey = _ref5.key,
          preset = _ref5.preset;
      var endDate = preset.endDate,
          startDate = preset.startDate;

      var newState = {
        findMode: false,
        presetKey: presetKey
      };

      if (presetKey === 'custom') {
        // Clicking 'Custom' preset shouldn't update selected date or trigger date select handler,
        // but we still need to update the selected preset value
        this.setState(newState);
      } else {
        // update
        this.setState((0, _extends3.default)({}, newState, {
          date: getPrevMonthAsMoment(endDate),
          range: [startDate, endDate]
        }), function () {
          return _this2.props.onDateSelect({
            endDate: endDate,
            presetKey: presetKey,
            startDate: startDate
          });
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          date = _state.date,
          findMode = _state.findMode,
          presetKey = _state.presetKey,
          range = _state.range;
      var _props = this.props,
          outOfRangeTooltip = _props.outOfRangeTooltip,
          rangeEndBoundary = _props.rangeEndBoundary,
          rangeStartBoundary = _props.rangeStartBoundary;


      return _react2.default.createElement(
        'div',
        {
          'data-component': 'TxlCalendarPickerWithPresets',
          style: _CalendarPickerWithPresets2.default.container
        },
        _react2.default.createElement(
          'div',
          { style: _CalendarPickerWithPresets2.default.presets },
          _react2.default.createElement(_CalendarPresets2.default, {
            onSelect: this._handlePresetSelect,
            presets: _CalendarUtils.DATE_RANGE_PRESETS,
            ref: 'calPresets',
            selectedKey: presetKey
          })
        ),
        _react2.default.createElement(
          'div',
          { style: _CalendarPickerWithPresets2.default.picker },
          _react2.default.createElement(_CalendarPicker2.default, {
            date: date,
            findMode: findMode,
            onDateClick: this._handleDateClick,
            onHoverUpdate: this._handleHoverUpdate,
            onNextClick: this._handleNextClick,
            onPrevClick: this._handlePrevClick,
            outOfRangeTooltip: outOfRangeTooltip,
            range: range,
            rangeEndBoundary: rangeEndBoundary,
            rangeStartBoundary: rangeStartBoundary,
            ref: 'calPicker'
          })
        )
      );
    }
  }]);
  return TxlCalendarPickerWithPresets;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class2.prototype, '_handleDateClick', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleDateClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleHoverUpdate', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleHoverUpdate'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleNextClick', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleNextClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handlePrevClick', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handlePrevClick'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handlePresetSelect', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handlePresetSelect'), _class2.prototype)), _class2)) || _class;

exports.default = TxlCalendarPickerWithPresets;


TxlCalendarPickerWithPresets.propTypes = {
  onDateSelect: _react.PropTypes.func.isRequired,
  outOfRangeTooltip: _CalendarPicker2.default.propTypes.outOfRangeTooltip,
  presetKey: _react.PropTypes.oneOf(_CalendarUtils.DATE_RANGE_PRESETS.map(function (preset) {
    return preset.key;
  })),
  range: _propTypes2.default.dateRange,
  rangeEndBoundary: _CalendarPicker2.default.propTypes.rangeEndBoundary,
  rangeStartBoundary: _CalendarPicker2.default.propTypes.rangeStartBoundary
};

TxlCalendarPickerWithPresets.defaultProps = {
  presetKey: 'last7Days'
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(getPrevMonthAsMoment, 'getPrevMonthAsMoment', 'src/calendar-picker/CalendarPickerWithPresets.jsx');

  __REACT_HOT_LOADER__.register(getPresetFromKey, 'getPresetFromKey', 'src/calendar-picker/CalendarPickerWithPresets.jsx');

  __REACT_HOT_LOADER__.register(getDateForCalPicker, 'getDateForCalPicker', 'src/calendar-picker/CalendarPickerWithPresets.jsx');

  __REACT_HOT_LOADER__.register(getStateFromProps, 'getStateFromProps', 'src/calendar-picker/CalendarPickerWithPresets.jsx');

  __REACT_HOT_LOADER__.register(getSortedDates, 'getSortedDates', 'src/calendar-picker/CalendarPickerWithPresets.jsx');

  __REACT_HOT_LOADER__.register(TxlCalendarPickerWithPresets, 'TxlCalendarPickerWithPresets', 'src/calendar-picker/CalendarPickerWithPresets.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,