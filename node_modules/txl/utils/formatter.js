'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSeparatorsBasedOnLocale = getSeparatorsBasedOnLocale;
exports.convertCurrencyToDecimalValue = convertCurrencyToDecimalValue;
exports.formatCurrencyStringForLocale = formatCurrencyStringForLocale;
// Source: http://stackoverflow.com/q/15900485
function convertBytesToHumanReadableFormat(sizeInBytes) {
  if (sizeInBytes >= 1000000000) {
    return (sizeInBytes / 1000000000).toFixed() + ' GB';
  } else if (sizeInBytes >= 1000000) {
    return (sizeInBytes / 1000000).toFixed() + ' MB';
  } else if (sizeInBytes >= 1000) {
    return (sizeInBytes / 1000).toFixed() + ' KB';
  } else if (sizeInBytes > 1) {
    return sizeInBytes + ' bytes';
  } else if (sizeInBytes === 1) {
    return sizeInBytes + ' byte';
  }

  return '0 bytes';
}

function escapeRegularExpression(str) {
  return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
}

exports.convertBytesToHumanReadableFormat = convertBytesToHumanReadableFormat;
exports.escapeRegularExpression = escapeRegularExpression;

// Chrome/FireFox/Safari: language, IE9+: browserLanguage

var currentLocale = navigator.language || navigator.browserLanguage;

function getSeparatorsBasedOnLocale() {
  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentLocale;

  var testNumber = Number(1000.1);
  var localeStringOfNumber = testNumber.toLocaleString(locale);

  return {
    decimalSeparator: localeStringOfNumber.substring(5, 6),
    thousandsSeparator: localeStringOfNumber.substring(1, 2)
  };
}

// Get the decimal value of a currency string based on the user's locale (default)
// or a custom locale
function convertCurrencyToDecimalValue(currencyString) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentLocale;

  var _getSeparatorsBasedOn = getSeparatorsBasedOnLocale(locale),
      decimalSeparator = _getSeparatorsBasedOn.decimalSeparator,
      thousandsSeparator = _getSeparatorsBasedOn.thousandsSeparator;

  if (!currencyString) {
    return Number(0);
  }

  // Convert NBSP to space
  var formattedThousandsSeparator = thousandsSeparator.replace(String.fromCharCode(160), ' ');

  var thousandsSeparatorRegex = new RegExp('[' + formattedThousandsSeparator + ']', 'g');
  var removedThousandsSeparators = currencyString.replace(thousandsSeparatorRegex, '');

  var decimalRegex = new RegExp('[' + decimalSeparator + ']', 'g');
  var decimalCharacterConvertedToDot = removedThousandsSeparators.replace(decimalRegex, '.');

  return Number(decimalCharacterConvertedToDot);
}

// Format a string that represents a currency amount to its locale-formatted value based on
// the user's locale (default) or a custom locale
function formatCurrencyStringForLocale(currencyString, options) {
  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLocale;

  var decimalValue = convertCurrencyToDecimalValue(currencyString, locale);

  return decimalValue.toLocaleString(locale, options || { minimumFractionDigits: 2 });
}
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(convertBytesToHumanReadableFormat, 'convertBytesToHumanReadableFormat', 'src/utils/formatter.js');

  __REACT_HOT_LOADER__.register(escapeRegularExpression, 'escapeRegularExpression', 'src/utils/formatter.js');

  __REACT_HOT_LOADER__.register(currentLocale, 'currentLocale', 'src/utils/formatter.js');

  __REACT_HOT_LOADER__.register(getSeparatorsBasedOnLocale, 'getSeparatorsBasedOnLocale', 'src/utils/formatter.js');

  __REACT_HOT_LOADER__.register(convertCurrencyToDecimalValue, 'convertCurrencyToDecimalValue', 'src/utils/formatter.js');

  __REACT_HOT_LOADER__.register(formatCurrencyStringForLocale, 'formatCurrencyStringForLocale', 'src/utils/formatter.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9mb3JtYXR0ZXIuanMiXSwibmFtZXMiOlsiZ2V0U2VwYXJhdG9yc0Jhc2VkT25Mb2NhbGUiLCJjb252ZXJ0Q3VycmVuY3lUb0RlY2ltYWxWYWx1ZSIsImZvcm1hdEN1cnJlbmN5U3RyaW5nRm9yTG9jYWxlIiwiY29udmVydEJ5dGVzVG9IdW1hblJlYWRhYmxlRm9ybWF0Iiwic2l6ZUluQnl0ZXMiLCJ0b0ZpeGVkIiwiZXNjYXBlUmVndWxhckV4cHJlc3Npb24iLCJzdHIiLCJyZXBsYWNlIiwiY3VycmVudExvY2FsZSIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwiYnJvd3Nlckxhbmd1YWdlIiwibG9jYWxlIiwidGVzdE51bWJlciIsIk51bWJlciIsImxvY2FsZVN0cmluZ09mTnVtYmVyIiwidG9Mb2NhbGVTdHJpbmciLCJkZWNpbWFsU2VwYXJhdG9yIiwic3Vic3RyaW5nIiwidGhvdXNhbmRzU2VwYXJhdG9yIiwiY3VycmVuY3lTdHJpbmciLCJmb3JtYXR0ZWRUaG91c2FuZHNTZXBhcmF0b3IiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0aG91c2FuZHNTZXBhcmF0b3JSZWdleCIsIlJlZ0V4cCIsInJlbW92ZWRUaG91c2FuZHNTZXBhcmF0b3JzIiwiZGVjaW1hbFJlZ2V4IiwiZGVjaW1hbENoYXJhY3RlckNvbnZlcnRlZFRvRG90Iiwib3B0aW9ucyIsImRlY2ltYWxWYWx1ZSIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE2QmdCQSwwQixHQUFBQSwwQjtRQVlBQyw2QixHQUFBQSw2QjtRQXFCQUMsNkIsR0FBQUEsNkI7QUE5RGhCO0FBQ0EsU0FBU0MsaUNBQVQsQ0FBMkNDLFdBQTNDLEVBQXdEO0FBQ3RELE1BQUlBLGVBQWUsVUFBbkIsRUFBK0I7QUFDN0IsV0FBVSxDQUFDQSxjQUFjLFVBQWYsRUFBMkJDLE9BQTNCLEVBQVY7QUFDRCxHQUZELE1BRU8sSUFBSUQsZUFBZSxPQUFuQixFQUE0QjtBQUNqQyxXQUFVLENBQUNBLGNBQWMsT0FBZixFQUF3QkMsT0FBeEIsRUFBVjtBQUNELEdBRk0sTUFFQSxJQUFJRCxlQUFlLElBQW5CLEVBQXlCO0FBQzlCLFdBQVUsQ0FBQ0EsY0FBYyxJQUFmLEVBQXFCQyxPQUFyQixFQUFWO0FBQ0QsR0FGTSxNQUVBLElBQUlELGNBQWMsQ0FBbEIsRUFBcUI7QUFDMUIsV0FBVUEsV0FBVjtBQUNELEdBRk0sTUFFQSxJQUFJQSxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDNUIsV0FBVUEsV0FBVjtBQUNEOztBQUVELFNBQU8sU0FBUDtBQUNEOztBQUVELFNBQVNFLHVCQUFULENBQWlDQyxHQUFqQyxFQUFzQztBQUNwQyxTQUFPQSxJQUFJQyxPQUFKLENBQVksdUJBQVosRUFBcUMsTUFBckMsQ0FBUDtBQUNEOztRQUdDTCxpQyxHQUFBQSxpQztRQUNBRyx1QixHQUFBQSx1Qjs7QUFHRjs7QUFDQSxJQUFNRyxnQkFBZ0JDLFVBQVVDLFFBQVYsSUFBc0JELFVBQVVFLGVBQXREOztBQUVPLFNBQVNaLDBCQUFULEdBQTREO0FBQUEsTUFBeEJhLE1BQXdCLHVFQUFmSixhQUFlOztBQUNqRSxNQUFNSyxhQUFhQyxPQUFPLE1BQVAsQ0FBbkI7QUFDQSxNQUFNQyx1QkFBdUJGLFdBQVdHLGNBQVgsQ0FBMEJKLE1BQTFCLENBQTdCOztBQUVBLFNBQU87QUFDTEssc0JBQWtCRixxQkFBcUJHLFNBQXJCLENBQStCLENBQS9CLEVBQWtDLENBQWxDLENBRGI7QUFFTEMsd0JBQW9CSixxQkFBcUJHLFNBQXJCLENBQStCLENBQS9CLEVBQWtDLENBQWxDO0FBRmYsR0FBUDtBQUlEOztBQUVEO0FBQ0E7QUFDTyxTQUFTbEIsNkJBQVQsQ0FBdUNvQixjQUF2QyxFQUErRTtBQUFBLE1BQXhCUixNQUF3Qix1RUFBZkosYUFBZTs7QUFBQSw4QkFJaEZULDJCQUEyQmEsTUFBM0IsQ0FKZ0Y7QUFBQSxNQUVsRkssZ0JBRmtGLHlCQUVsRkEsZ0JBRmtGO0FBQUEsTUFHbEZFLGtCQUhrRix5QkFHbEZBLGtCQUhrRjs7QUFLcEYsTUFBSSxDQUFDQyxjQUFMLEVBQXFCO0FBQUUsV0FBT04sT0FBTyxDQUFQLENBQVA7QUFBbUI7O0FBRTFDO0FBQ0EsTUFBTU8sOEJBQThCRixtQkFBbUJaLE9BQW5CLENBQTJCZSxPQUFPQyxZQUFQLENBQW9CLEdBQXBCLENBQTNCLEVBQXFELEdBQXJELENBQXBDOztBQUVBLE1BQU1DLDBCQUEwQixJQUFJQyxNQUFKLE9BQWVKLDJCQUFmLFFBQStDLEdBQS9DLENBQWhDO0FBQ0EsTUFBTUssNkJBQTZCTixlQUFlYixPQUFmLENBQXVCaUIsdUJBQXZCLEVBQWdELEVBQWhELENBQW5DOztBQUVBLE1BQU1HLGVBQWUsSUFBSUYsTUFBSixPQUFlUixnQkFBZixRQUFvQyxHQUFwQyxDQUFyQjtBQUNBLE1BQU1XLGlDQUFpQ0YsMkJBQTJCbkIsT0FBM0IsQ0FBbUNvQixZQUFuQyxFQUFpRCxHQUFqRCxDQUF2Qzs7QUFFQSxTQUFPYixPQUFPYyw4QkFBUCxDQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNPLFNBQVMzQiw2QkFBVCxDQUF1Q21CLGNBQXZDLEVBQXVEUyxPQUF2RCxFQUF3RjtBQUFBLE1BQXhCakIsTUFBd0IsdUVBQWZKLGFBQWU7O0FBQzdGLE1BQU1zQixlQUFlOUIsOEJBQThCb0IsY0FBOUIsRUFBOENSLE1BQTlDLENBQXJCOztBQUVBLFNBQU9rQixhQUFhZCxjQUFiLENBQTRCSixNQUE1QixFQUFvQ2lCLFdBQVcsRUFBRUUsdUJBQXVCLENBQXpCLEVBQS9DLENBQVA7QUFDRDs7Ozs7Ozs7Z0NBakVRN0IsaUM7O2dDQWdCQUcsdUI7O2dDQVVIRyxhOztnQ0FFVVQsMEI7O2dDQVlBQyw2Qjs7Z0NBcUJBQyw2QiIsImZpbGUiOiJmb3JtYXR0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTb3VyY2U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE1OTAwNDg1XG5mdW5jdGlvbiBjb252ZXJ0Qnl0ZXNUb0h1bWFuUmVhZGFibGVGb3JtYXQoc2l6ZUluQnl0ZXMpIHtcbiAgaWYgKHNpemVJbkJ5dGVzID49IDEwMDAwMDAwMDApIHtcbiAgICByZXR1cm4gYCR7KHNpemVJbkJ5dGVzIC8gMTAwMDAwMDAwMCkudG9GaXhlZCgpfSBHQmA7XG4gIH0gZWxzZSBpZiAoc2l6ZUluQnl0ZXMgPj0gMTAwMDAwMCkge1xuICAgIHJldHVybiBgJHsoc2l6ZUluQnl0ZXMgLyAxMDAwMDAwKS50b0ZpeGVkKCl9IE1CYDtcbiAgfSBlbHNlIGlmIChzaXplSW5CeXRlcyA+PSAxMDAwKSB7XG4gICAgcmV0dXJuIGAkeyhzaXplSW5CeXRlcyAvIDEwMDApLnRvRml4ZWQoKX0gS0JgO1xuICB9IGVsc2UgaWYgKHNpemVJbkJ5dGVzID4gMSkge1xuICAgIHJldHVybiBgJHtzaXplSW5CeXRlc30gYnl0ZXNgO1xuICB9IGVsc2UgaWYgKHNpemVJbkJ5dGVzID09PSAxKSB7XG4gICAgcmV0dXJuIGAke3NpemVJbkJ5dGVzfSBieXRlYDtcbiAgfVxuXG4gIHJldHVybiAnMCBieXRlcyc7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ3VsYXJFeHByZXNzaW9uKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1stW1xcXS97fSgpKis/LlxcXFxeJHxdL2csICdcXFxcJCYnKTtcbn1cblxuZXhwb3J0IHtcbiAgY29udmVydEJ5dGVzVG9IdW1hblJlYWRhYmxlRm9ybWF0LFxuICBlc2NhcGVSZWd1bGFyRXhwcmVzc2lvbixcbn07XG5cbi8vIENocm9tZS9GaXJlRm94L1NhZmFyaTogbGFuZ3VhZ2UsIElFOSs6IGJyb3dzZXJMYW5ndWFnZVxuY29uc3QgY3VycmVudExvY2FsZSA9IG5hdmlnYXRvci5sYW5ndWFnZSB8fCBuYXZpZ2F0b3IuYnJvd3Nlckxhbmd1YWdlO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VwYXJhdG9yc0Jhc2VkT25Mb2NhbGUobG9jYWxlID0gY3VycmVudExvY2FsZSkge1xuICBjb25zdCB0ZXN0TnVtYmVyID0gTnVtYmVyKDEwMDAuMSk7XG4gIGNvbnN0IGxvY2FsZVN0cmluZ09mTnVtYmVyID0gdGVzdE51bWJlci50b0xvY2FsZVN0cmluZyhsb2NhbGUpO1xuXG4gIHJldHVybiB7XG4gICAgZGVjaW1hbFNlcGFyYXRvcjogbG9jYWxlU3RyaW5nT2ZOdW1iZXIuc3Vic3RyaW5nKDUsIDYpLFxuICAgIHRob3VzYW5kc1NlcGFyYXRvcjogbG9jYWxlU3RyaW5nT2ZOdW1iZXIuc3Vic3RyaW5nKDEsIDIpLFxuICB9O1xufVxuXG4vLyBHZXQgdGhlIGRlY2ltYWwgdmFsdWUgb2YgYSBjdXJyZW5jeSBzdHJpbmcgYmFzZWQgb24gdGhlIHVzZXIncyBsb2NhbGUgKGRlZmF1bHQpXG4vLyBvciBhIGN1c3RvbSBsb2NhbGVcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Q3VycmVuY3lUb0RlY2ltYWxWYWx1ZShjdXJyZW5jeVN0cmluZywgbG9jYWxlID0gY3VycmVudExvY2FsZSkge1xuICBjb25zdCB7XG4gICAgZGVjaW1hbFNlcGFyYXRvcixcbiAgICB0aG91c2FuZHNTZXBhcmF0b3IsXG4gIH0gPSBnZXRTZXBhcmF0b3JzQmFzZWRPbkxvY2FsZShsb2NhbGUpO1xuICBpZiAoIWN1cnJlbmN5U3RyaW5nKSB7IHJldHVybiBOdW1iZXIoMCk7IH1cblxuICAvLyBDb252ZXJ0IE5CU1AgdG8gc3BhY2VcbiAgY29uc3QgZm9ybWF0dGVkVGhvdXNhbmRzU2VwYXJhdG9yID0gdGhvdXNhbmRzU2VwYXJhdG9yLnJlcGxhY2UoU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApLCAnICcpO1xuXG4gIGNvbnN0IHRob3VzYW5kc1NlcGFyYXRvclJlZ2V4ID0gbmV3IFJlZ0V4cChgWyR7Zm9ybWF0dGVkVGhvdXNhbmRzU2VwYXJhdG9yfV1gLCAnZycpO1xuICBjb25zdCByZW1vdmVkVGhvdXNhbmRzU2VwYXJhdG9ycyA9IGN1cnJlbmN5U3RyaW5nLnJlcGxhY2UodGhvdXNhbmRzU2VwYXJhdG9yUmVnZXgsICcnKTtcblxuICBjb25zdCBkZWNpbWFsUmVnZXggPSBuZXcgUmVnRXhwKGBbJHtkZWNpbWFsU2VwYXJhdG9yfV1gLCAnZycpO1xuICBjb25zdCBkZWNpbWFsQ2hhcmFjdGVyQ29udmVydGVkVG9Eb3QgPSByZW1vdmVkVGhvdXNhbmRzU2VwYXJhdG9ycy5yZXBsYWNlKGRlY2ltYWxSZWdleCwgJy4nKTtcblxuICByZXR1cm4gTnVtYmVyKGRlY2ltYWxDaGFyYWN0ZXJDb252ZXJ0ZWRUb0RvdCk7XG59XG5cbi8vIEZvcm1hdCBhIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgYSBjdXJyZW5jeSBhbW91bnQgdG8gaXRzIGxvY2FsZS1mb3JtYXR0ZWQgdmFsdWUgYmFzZWQgb25cbi8vIHRoZSB1c2VyJ3MgbG9jYWxlIChkZWZhdWx0KSBvciBhIGN1c3RvbSBsb2NhbGVcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRDdXJyZW5jeVN0cmluZ0ZvckxvY2FsZShjdXJyZW5jeVN0cmluZywgb3B0aW9ucywgbG9jYWxlID0gY3VycmVudExvY2FsZSkge1xuICBjb25zdCBkZWNpbWFsVmFsdWUgPSBjb252ZXJ0Q3VycmVuY3lUb0RlY2ltYWxWYWx1ZShjdXJyZW5jeVN0cmluZywgbG9jYWxlKTtcblxuICByZXR1cm4gZGVjaW1hbFZhbHVlLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgb3B0aW9ucyB8fCB7IG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMiB9KTtcbn1cbiJdfQ==