'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _clamp = require('./clamp');

var _clamp2 = _interopRequireDefault(_clamp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MIN_BUFFER_SIZE = 3;
var MAX_BUFFER_SIZE = 6;

/**
 * ItemBuffer calculates items to be presented in the DOM.
 *
 * +----------------------------------------------+
 * |   Full List                                  |
 * |  +-----------------------------------------+ |
 * |  |0 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|  | |
 * |  +-----------------------------------------+ |
 * |      Buffer Slots                            |
 * |     +--------------------+                   |
 * |  <+ |1 |2 |3 |4 |5 |6 |7 | +-------------->  |
 * |     +--------------------+                   |
 * |   0  1  2  3  4  5  6  0  1  2  3  4  5  6   |
 * |                                              |
 * |           Viewport Slots                     |
 * |           +-----+                            |
 * |           |3 |4 |                            |
 * |           +-----+                            |
 * +----------------------------------------------+
 *
 * +----------------------------------------------+
 * |   Full List                                  |
 * |  +-----------------------------------------+ |
 * |  |0 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|  | |
 * |  +-----------------------------------------+ |
 * |            Buffer Slots                      |
 * |           +--------------------+             |
 * |  <------+ |3 |4 |5 |6 |7 |8 |9 | +-------->  |
 * |           +--------------------+             |
 * |   0  1  2  3  4  5  6  0  1  2  3  4  5  6   |
 * |                                              |
 * |                  Viewport Slots              |
 * |                 +-----+                      |
 * |                 |5 |6 |                      |
 * |                 +-----+                      |
 * +----------------------------------------------+
 */

var ItemBuffer = function () {
  function ItemBuffer() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, ItemBuffer);
    var itemsCount = options.itemsCount,
        defaultItemSize = options.defaultItemSize,
        viewportSize = options.viewportSize,
        _options$minSize = options.minSize,
        minSize = _options$minSize === undefined ? MIN_BUFFER_SIZE : _options$minSize,
        _options$maxSize = options.maxSize,
        maxSize = _options$maxSize === undefined ? MAX_BUFFER_SIZE : _options$maxSize;


    this.getItems = this.getItems.bind(this);
    this.itemsCount = itemsCount;
    this.itemSize = defaultItemSize;
    this.viewportSize = viewportSize;
    this.items = [];
    this.maxVisibleItemsCount = Math.ceil(viewportSize / defaultItemSize) + 1;
    this.bufferSize = (0, _clamp2.default)(Math.floor(this.maxVisibleItemsCount / 2), minSize, maxSize);
  }

  /**
   * normalizePosition based on bufferSize and total number of items size
   *
   * @param  {Number} position    current position to be normalized.
   * @param  {Number} bufferSize  size of buffer
   * @param  {Number} total       Total number of items.
   * @return {Number}             normalized position index.
   */


  (0, _createClass3.default)(ItemBuffer, [{
    key: '_normalizePosition',
    value: function _normalizePosition(position, bufferSize, total) {
      if (position < 0) {
        return position + bufferSize;
      }

      if (position >= total) {
        return (total - position) % bufferSize;
      }

      return position;
    }

    /**
     * getItems returns array of item index to be displayed based on the
     * current buffer state.
     *
     * @param  {Number} firstItemIndex  index of the first item in the viewport.
     * @return {Array<Number>}                 Array of index.
     */

  }, {
    key: 'getItems',
    value: function getItems(firstItemIndex) {
      var size = this.maxVisibleItemsCount + this.bufferSize * 2;
      for (var i = 0; i < size; i++) {
        var itemIndex = i + firstItemIndex;
        var bufferPosition = itemIndex % size;
        bufferPosition = this._normalizePosition(bufferPosition, size, this.itemsCount);
        if (itemIndex < this.itemsCount) {
          this.items[bufferPosition] = itemIndex;
        }
      }
      return this.items;
    }
  }]);
  return ItemBuffer;
}();

var _default = ItemBuffer;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(MIN_BUFFER_SIZE, 'MIN_BUFFER_SIZE', 'src/utils/ItemBuffer.js');

  __REACT_HOT_LOADER__.register(MAX_BUFFER_SIZE, 'MAX_BUFFER_SIZE', 'src/utils/ItemBuffer.js');

  __REACT_HOT_LOADER__.register(ItemBuffer, 'ItemBuffer', 'src/utils/ItemBuffer.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'src/utils/ItemBuffer.js');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9JdGVtQnVmZmVyLmpzIl0sIm5hbWVzIjpbIk1JTl9CVUZGRVJfU0laRSIsIk1BWF9CVUZGRVJfU0laRSIsIkl0ZW1CdWZmZXIiLCJvcHRpb25zIiwiaXRlbXNDb3VudCIsImRlZmF1bHRJdGVtU2l6ZSIsInZpZXdwb3J0U2l6ZSIsIm1pblNpemUiLCJtYXhTaXplIiwiZ2V0SXRlbXMiLCJiaW5kIiwiaXRlbVNpemUiLCJpdGVtcyIsIm1heFZpc2libGVJdGVtc0NvdW50IiwiTWF0aCIsImNlaWwiLCJidWZmZXJTaXplIiwiZmxvb3IiLCJwb3NpdGlvbiIsInRvdGFsIiwiZmlyc3RJdGVtSW5kZXgiLCJzaXplIiwiaSIsIml0ZW1JbmRleCIsImJ1ZmZlclBvc2l0aW9uIiwiX25vcm1hbGl6ZVBvc2l0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7QUFFQSxJQUFNQSxrQkFBa0IsQ0FBeEI7QUFDQSxJQUFNQyxrQkFBa0IsQ0FBeEI7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBcUNNQyxVO0FBQ0osd0JBQTBCO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQUE7QUFBQSxRQUV0QkMsVUFGc0IsR0FPcEJELE9BUG9CLENBRXRCQyxVQUZzQjtBQUFBLFFBR3RCQyxlQUhzQixHQU9wQkYsT0FQb0IsQ0FHdEJFLGVBSHNCO0FBQUEsUUFJdEJDLFlBSnNCLEdBT3BCSCxPQVBvQixDQUl0QkcsWUFKc0I7QUFBQSwyQkFPcEJILE9BUG9CLENBS3RCSSxPQUxzQjtBQUFBLFFBS3RCQSxPQUxzQixvQ0FLWlAsZUFMWTtBQUFBLDJCQU9wQkcsT0FQb0IsQ0FNdEJLLE9BTnNCO0FBQUEsUUFNdEJBLE9BTnNCLG9DQU1aUCxlQU5ZOzs7QUFTeEIsU0FBS1EsUUFBTCxHQUFnQixLQUFLQSxRQUFMLENBQWNDLElBQWQsQ0FBbUIsSUFBbkIsQ0FBaEI7QUFDQSxTQUFLTixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtPLFFBQUwsR0FBZ0JOLGVBQWhCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQkEsWUFBcEI7QUFDQSxTQUFLTSxLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtDLG9CQUFMLEdBQTRCQyxLQUFLQyxJQUFMLENBQVVULGVBQWVELGVBQXpCLElBQTRDLENBQXhFO0FBQ0EsU0FBS1csVUFBTCxHQUFrQixxQkFDaEJGLEtBQUtHLEtBQUwsQ0FBVyxLQUFLSixvQkFBTCxHQUE0QixDQUF2QyxDQURnQixFQUVoQk4sT0FGZ0IsRUFHaEJDLE9BSGdCLENBQWxCO0FBS0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozt1Q0FRbUJVLFEsRUFBVUYsVSxFQUFZRyxLLEVBQU87QUFDOUMsVUFBSUQsV0FBVyxDQUFmLEVBQWtCO0FBQ2hCLGVBQU9BLFdBQVdGLFVBQWxCO0FBQ0Q7O0FBRUQsVUFBSUUsWUFBWUMsS0FBaEIsRUFBdUI7QUFDckIsZUFBTyxDQUFDQSxRQUFRRCxRQUFULElBQXFCRixVQUE1QjtBQUNEOztBQUVELGFBQU9FLFFBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs2QkFPU0UsYyxFQUFnQjtBQUN2QixVQUFNQyxPQUFPLEtBQUtSLG9CQUFMLEdBQTZCLEtBQUtHLFVBQUwsR0FBa0IsQ0FBNUQ7QUFDQSxXQUFLLElBQUlNLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsSUFBcEIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQzdCLFlBQU1DLFlBQVlELElBQUlGLGNBQXRCO0FBQ0EsWUFBSUksaUJBQWlCRCxZQUFZRixJQUFqQztBQUNBRyx5QkFBaUIsS0FBS0Msa0JBQUwsQ0FBd0JELGNBQXhCLEVBQXdDSCxJQUF4QyxFQUE4QyxLQUFLakIsVUFBbkQsQ0FBakI7QUFDQSxZQUFJbUIsWUFBWSxLQUFLbkIsVUFBckIsRUFBaUM7QUFDL0IsZUFBS1EsS0FBTCxDQUFXWSxjQUFYLElBQTZCRCxTQUE3QjtBQUNEO0FBQ0Y7QUFDRCxhQUFPLEtBQUtYLEtBQVo7QUFDRDs7Ozs7ZUFHWVYsVTs7Ozs7Ozs7O2dDQXhHVEYsZTs7Z0NBQ0FDLGU7O2dDQXVDQUMsVSIsImZpbGUiOiJJdGVtQnVmZmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYW1wIGZyb20gJy4vY2xhbXAnO1xuXG5jb25zdCBNSU5fQlVGRkVSX1NJWkUgPSAzO1xuY29uc3QgTUFYX0JVRkZFUl9TSVpFID0gNjtcblxuLyoqXG4gKiBJdGVtQnVmZmVyIGNhbGN1bGF0ZXMgaXRlbXMgdG8gYmUgcHJlc2VudGVkIGluIHRoZSBET00uXG4gKlxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiB8ICAgRnVsbCBMaXN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxuICogfCAgfDAgfDEgfDIgfDMgfDQgfDUgfDYgfDcgfDggfDkgfDEwfDExfDEyfCAgfCB8XG4gKiB8ICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHxcbiAqIHwgICAgICBCdWZmZXIgU2xvdHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICA8KyB8MSB8MiB8MyB8NCB8NSB8NiB8NyB8ICstLS0tLS0tLS0tLS0tLT4gIHxcbiAqIHwgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICAgICAgfFxuICogfCAgIDAgIDEgIDIgIDMgIDQgIDUgIDYgIDAgIDEgIDIgIDMgIDQgIDUgIDYgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgIFZpZXdwb3J0IFNsb3RzICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgICAgICAgICAgKy0tLS0tKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICB8MyB8NCB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICstLS0tLSsgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKlxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiB8ICAgRnVsbCBMaXN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxuICogfCAgfDAgfDEgfDIgfDMgfDQgfDUgfDYgfDcgfDggfDkgfDEwfDExfDEyfCAgfCB8XG4gKiB8ICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHxcbiAqIHwgICAgICAgICAgICBCdWZmZXIgU2xvdHMgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICB8XG4gKiB8ICA8LS0tLS0tKyB8MyB8NCB8NSB8NiB8NyB8OCB8OSB8ICstLS0tLS0tLT4gIHxcbiAqIHwgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgfFxuICogfCAgIDAgIDEgIDIgIDMgIDQgIDUgIDYgIDAgIDEgIDIgIDMgIDQgIDUgIDYgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICBWaWV3cG9ydCBTbG90cyAgICAgICAgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgKy0tLS0tKyAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICB8NSB8NiB8ICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICstLS0tLSsgICAgICAgICAgICAgICAgICAgICAgfFxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKi9cbmNsYXNzIEl0ZW1CdWZmZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBpdGVtc0NvdW50LFxuICAgICAgZGVmYXVsdEl0ZW1TaXplLFxuICAgICAgdmlld3BvcnRTaXplLFxuICAgICAgbWluU2l6ZSA9IE1JTl9CVUZGRVJfU0laRSxcbiAgICAgIG1heFNpemUgPSBNQVhfQlVGRkVSX1NJWkUsXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLmdldEl0ZW1zID0gdGhpcy5nZXRJdGVtcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaXRlbXNDb3VudCA9IGl0ZW1zQ291bnQ7XG4gICAgdGhpcy5pdGVtU2l6ZSA9IGRlZmF1bHRJdGVtU2l6ZTtcbiAgICB0aGlzLnZpZXdwb3J0U2l6ZSA9IHZpZXdwb3J0U2l6ZTtcbiAgICB0aGlzLml0ZW1zID0gW107XG4gICAgdGhpcy5tYXhWaXNpYmxlSXRlbXNDb3VudCA9IE1hdGguY2VpbCh2aWV3cG9ydFNpemUgLyBkZWZhdWx0SXRlbVNpemUpICsgMTtcbiAgICB0aGlzLmJ1ZmZlclNpemUgPSBjbGFtcChcbiAgICAgIE1hdGguZmxvb3IodGhpcy5tYXhWaXNpYmxlSXRlbXNDb3VudCAvIDIpLFxuICAgICAgbWluU2l6ZSxcbiAgICAgIG1heFNpemVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIG5vcm1hbGl6ZVBvc2l0aW9uIGJhc2VkIG9uIGJ1ZmZlclNpemUgYW5kIHRvdGFsIG51bWJlciBvZiBpdGVtcyBzaXplXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcn0gcG9zaXRpb24gICAgY3VycmVudCBwb3NpdGlvbiB0byBiZSBub3JtYWxpemVkLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGJ1ZmZlclNpemUgIHNpemUgb2YgYnVmZmVyXG4gICAqIEBwYXJhbSAge051bWJlcn0gdG90YWwgICAgICAgVG90YWwgbnVtYmVyIG9mIGl0ZW1zLlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgIG5vcm1hbGl6ZWQgcG9zaXRpb24gaW5kZXguXG4gICAqL1xuICBfbm9ybWFsaXplUG9zaXRpb24ocG9zaXRpb24sIGJ1ZmZlclNpemUsIHRvdGFsKSB7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCkge1xuICAgICAgcmV0dXJuIHBvc2l0aW9uICsgYnVmZmVyU2l6ZTtcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPj0gdG90YWwpIHtcbiAgICAgIHJldHVybiAodG90YWwgLSBwb3NpdGlvbikgJSBidWZmZXJTaXplO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRJdGVtcyByZXR1cm5zIGFycmF5IG9mIGl0ZW0gaW5kZXggdG8gYmUgZGlzcGxheWVkIGJhc2VkIG9uIHRoZVxuICAgKiBjdXJyZW50IGJ1ZmZlciBzdGF0ZS5cbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfSBmaXJzdEl0ZW1JbmRleCAgaW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIHZpZXdwb3J0LlxuICAgKiBAcmV0dXJuIHtBcnJheTxOdW1iZXI+fSAgICAgICAgICAgICAgICAgQXJyYXkgb2YgaW5kZXguXG4gICAqL1xuICBnZXRJdGVtcyhmaXJzdEl0ZW1JbmRleCkge1xuICAgIGNvbnN0IHNpemUgPSB0aGlzLm1heFZpc2libGVJdGVtc0NvdW50ICsgKHRoaXMuYnVmZmVyU2l6ZSAqIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtSW5kZXggPSBpICsgZmlyc3RJdGVtSW5kZXg7XG4gICAgICBsZXQgYnVmZmVyUG9zaXRpb24gPSBpdGVtSW5kZXggJSBzaXplO1xuICAgICAgYnVmZmVyUG9zaXRpb24gPSB0aGlzLl9ub3JtYWxpemVQb3NpdGlvbihidWZmZXJQb3NpdGlvbiwgc2l6ZSwgdGhpcy5pdGVtc0NvdW50KTtcbiAgICAgIGlmIChpdGVtSW5kZXggPCB0aGlzLml0ZW1zQ291bnQpIHtcbiAgICAgICAgdGhpcy5pdGVtc1tidWZmZXJQb3NpdGlvbl0gPSBpdGVtSW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEl0ZW1CdWZmZXI7XG4iXX0=