'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _ScrollingTableHeader = require('./ScrollingTableHeader');

var _ScrollingTableHeader2 = _interopRequireDefault(_ScrollingTableHeader);

var _ = require('./');

var _ScrollingTable = require('./ScrollingTable.style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_Headers = require('./').babelPluginFlowReactPropTypes_proptype_Headers || require('react').PropTypes.any;

var ScrollingTableHeaders = function (_Component) {
  (0, _inherits3.default)(ScrollingTableHeaders, _Component);

  function ScrollingTableHeaders(props, context) {
    (0, _classCallCheck3.default)(this, ScrollingTableHeaders);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ScrollingTableHeaders.__proto__ || (0, _getPrototypeOf2.default)(ScrollingTableHeaders)).call(this, props, context));

    _this._onHeaderResize = function () {
      return _this.___onHeaderResize__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._onDragStart = function () {
      return _this.___onDragStart__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._onDragEnd = function () {
      return _this.___onDragEnd__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._onSort = function () {
      return _this.___onSort__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._onDragOver = function () {
      return _this.___onDragOver__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this.state = {
      draggingHeader: null,
      lastDrop: null
    };
    return _this;
  }

  (0, _createClass3.default)(ScrollingTableHeaders, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
    }
  }, {
    key: '___onHeaderResize__REACT_HOT_LOADER__',
    value: function ___onHeaderResize__REACT_HOT_LOADER__() {
      return this.___onHeaderResize__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___onHeaderResize__REACT_HOT_LOADER__',
    value: function ___onHeaderResize__REACT_HOT_LOADER__(header, delta) {
      var update = function update(headers) {
        var index = headers.findIndex(function (val) {
          return val.id === header.id;
        });
        var firstHeader = headers.get(index);
        var secondHeader = headers.get(index + 1);

        var firstHeaderWidth = firstHeader.width - delta;
        var secondHeaderWidth = secondHeader.width + delta;

        /**
         * If the headerWidth is less than the minWidth for that column
         * then the headerWidth should be equal to the minWidth
         * and the other header should be equal to its original width + the change
         * in width in the first.
         */
        if (firstHeaderWidth < firstHeader.minWidth) {
          firstHeaderWidth = firstHeader.minWidth;
          secondHeaderWidth = secondHeader.width + (firstHeader.width - firstHeaderWidth);
        } else if (secondHeaderWidth < secondHeader.minWidth) {
          secondHeaderWidth = secondHeader.minWidth;
          firstHeaderWidth = firstHeader.width + (secondHeader.width - secondHeaderWidth);
        }

        return headers.setIn([index, 'width'], firstHeaderWidth).setIn([index + 1, 'width'], secondHeaderWidth);
      };

      this.props.onHeaderUpdate(update);
    }
  }, {
    key: '___onDragStart__REACT_HOT_LOADER__',
    value: function ___onDragStart__REACT_HOT_LOADER__() {
      return this.___onDragStart__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___onDragStart__REACT_HOT_LOADER__',
    value: function ___onDragStart__REACT_HOT_LOADER__(header) {
      this.setState({ draggingHeader: header });
    }
  }, {
    key: '___onDragEnd__REACT_HOT_LOADER__',
    value: function ___onDragEnd__REACT_HOT_LOADER__() {
      return this.___onDragEnd__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___onDragEnd__REACT_HOT_LOADER__',
    value: function ___onDragEnd__REACT_HOT_LOADER__() {
      this.setState({ draggingHeader: null, lastDrop: null });
    }
  }, {
    key: '___onSort__REACT_HOT_LOADER__',
    value: function ___onSort__REACT_HOT_LOADER__() {
      return this.___onSort__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___onSort__REACT_HOT_LOADER__',
    value: function ___onSort__REACT_HOT_LOADER__(header) {
      var update = function update(headers) {
        var index = headers.findIndex(function (val) {
          return val.id === header.id;
        });
        var h = headers.get(index);
        var getDirection = function getDirection(sortDirection) {
          switch (sortDirection) {
            case 'asc':
              return 'none';
            case 'desc':
              return 'asc';
            default:
              return 'desc';
          }
        };

        return headers.setIn([index, 'sortDirection'], getDirection(h.sortDirection));
      };

      this.props.onHeaderUpdate(update);
    }
  }, {
    key: '___onDragOver__REACT_HOT_LOADER__',
    value: function ___onDragOver__REACT_HOT_LOADER__() {
      return this.___onDragOver__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___onDragOver__REACT_HOT_LOADER__',
    value: function ___onDragOver__REACT_HOT_LOADER__(dropTarget) {
      var _state = this.state,
          draggingHeader = _state.draggingHeader,
          lastDrop = _state.lastDrop;

      var validTarget = draggingHeader != null && dropTarget != null;
      if (validTarget && draggingHeader.id !== dropTarget.id && (lastDrop == null || lastDrop.id !== dropTarget.id)) {
        var update = function update(headers) {
          var sourceIndex = headers.findIndex(function (val) {
            return val.id === draggingHeader.id;
          });
          var dropIndex = headers.findIndex(function (val) {
            return val.id === dropTarget.id;
          });

          var sourceHeader = headers.get(sourceIndex);
          var dropHeader = headers.get(dropIndex);

          return headers.set(sourceIndex, dropHeader.set('order', sourceHeader.order)).set(dropIndex, sourceHeader.set('order', dropHeader.order));
        };

        this.props.onHeaderUpdate(update);
        this.setState({ lastDrop: dropTarget });
      }
    }
  }, {
    key: '_renderHeaders',
    value: function _renderHeaders() {
      var _this2 = this;

      return this.props.headers.map(function (header, index) {
        return _react2.default.createElement(_ScrollingTableHeader2.default, {
          onResize: function onResize(delta) {
            _this2._onHeaderResize(header, Math.floor(delta));
          },
          header: header,
          headers: _this2.props.headers,
          onSort: _this2._onSort,
          onDragStart: function onDragStart() {
            return _this2._onDragStart(header);
          },
          onDragEnd: _this2._onDragEnd,
          onDragOver: function onDragOver() {
            return _this2._onDragOver(header);
          },
          key: index
        });
      }).toArray();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: _ScrollingTable.HEADER_STYLES },
        this._renderHeaders()
      );
    }
  }]);
  return ScrollingTableHeaders;
}(_react.Component);

ScrollingTableHeaders.propTypes = {
  headers: babelPluginFlowReactPropTypes_proptype_Headers,
  onHeaderUpdate: require('react').PropTypes.func.isRequired
};
exports.default = ScrollingTableHeaders;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(ScrollingTableHeaders, 'ScrollingTableHeaders', 'src/scrolling-table/ScrollingTableHeaders.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,