'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _ = require('./');

var _createHeaders = require('./records/createHeaders');

var _createHeaders2 = _interopRequireDefault(_createHeaders);

var _ScrollState = require('./records/ScrollState');

var _ScrollState2 = _interopRequireDefault(_ScrollState);

var _ScrollingTableContainer = require('./ScrollingTableContainer');

var _ScrollingTableContainer2 = _interopRequireDefault(_ScrollingTableContainer);

var _ScrollingTableSizing = require('./ScrollingTableSizing');

var _ScrollingTableSizing2 = _interopRequireDefault(_ScrollingTableSizing);

var _ScrollingTableHeaders = require('./ScrollingTableHeaders');

var _ScrollingTableHeaders2 = _interopRequireDefault(_ScrollingTableHeaders);

var _ScrollingTable = require('./ScrollingTable.style');

var _ScrollingTable2 = require('./ScrollingTable.css');

var _ScrollingTable3 = _interopRequireDefault(_ScrollingTable2);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_Rows = require('./').babelPluginFlowReactPropTypes_proptype_Rows || require('react').PropTypes.any;

var babelPluginFlowReactPropTypes_proptype_Headers = require('./').babelPluginFlowReactPropTypes_proptype_Headers || require('react').PropTypes.any;

var ScrollingTable = (_temp = _class = function (_Component) {
  (0, _inherits3.default)(ScrollingTable, _Component);

  function ScrollingTable(props, context) {
    (0, _classCallCheck3.default)(this, ScrollingTable);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ScrollingTable.__proto__ || (0, _getPrototypeOf2.default)(ScrollingTable)).call(this, props, context));

    _this._handleHeaderUpdate = function () {
      return _this.___handleHeaderUpdate__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._onResize = function () {
      return _this.___onResize__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    _this._handleScroll = function () {
      return _this.___handleScroll__REACT_HOT_LOADER__.apply(_this, arguments);
    };

    var initialScrollState = {};

    if (props.currentRow) {
      (0, _invariant2.default)(props.currentRow <= props.totalRows, 'The currently selected row is greater then the total number of rows.');
      (0, _invariant2.default)(props.currentRow >= 0, 'The currently selected row number must be positive');
      initialScrollState.offset = props.currentRow;
    }

    if (props.totalRows != null) {
      (0, _invariant2.default)(props.totalRows >= 0, 'The total number of rows must be positive.');

      (0, _invariant2.default)(props.rows.size <= props.totalRows, 'The total number of rows must be greater than or equal to the number of rows.');
    }

    if (props.width != null && props.width !== 'auto') {
      (0, _invariant2.default)(props.width >= 0, 'Width must be greater than 0');
    }

    if (props.height != null && props.height !== 'auto') {
      (0, _invariant2.default)(props.height >= 0, 'Height must be greater than 0');
    }

    _this.state = {
      headers: (0, _createHeaders2.default)(props.headers),
      rowHeight: _constants.ROW_INITIAL_HEIGHT,
      scroll: new _ScrollState2.default(initialScrollState),
      tableBodyHeight: props.height,
      viewSizeInRows: _constants.INITIAL_ROW_MAX
    };

    _this._ticking = false;
    _this._headers = null;
    return _this;
  }

  (0, _createClass3.default)(ScrollingTable, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.onInit != null) {
        this.props.onInit();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.currentRow != null && this.props.currentRow !== nextProps.currentRow) {
        this.setState({
          scroll: this.state.scroll.set('offset', nextProps.currentRow)
        });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
    }
  }, {
    key: '___handleHeaderUpdate__REACT_HOT_LOADER__',
    value: function ___handleHeaderUpdate__REACT_HOT_LOADER__() {
      return this.___handleHeaderUpdate__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleHeaderUpdate__REACT_HOT_LOADER__',
    value: function ___handleHeaderUpdate__REACT_HOT_LOADER__(update) {
      var onHeaderUpdate = this.props.onHeaderUpdate;


      this.setState(function (prevState) {
        var headers = update(prevState.headers);

        onHeaderUpdate && onHeaderUpdate(headers.toJS());

        return { headers: headers };
      });
    }
  }, {
    key: '___onResize__REACT_HOT_LOADER__',
    value: function ___onResize__REACT_HOT_LOADER__() {
      return this.___onResize__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___onResize__REACT_HOT_LOADER__',
    value: function ___onResize__REACT_HOT_LOADER__(rowHeight, viewSizeInRows, tableBodyHeight) {
      this.setState({
        rowHeight: rowHeight,
        tableBodyHeight: tableBodyHeight,
        viewSizeInRows: viewSizeInRows
      });
    }
  }, {
    key: '___handleScroll__REACT_HOT_LOADER__',
    value: function ___handleScroll__REACT_HOT_LOADER__() {
      return this.___handleScroll__REACT_HOT_LOADER__.apply(this, arguments);
    }
  }, {
    key: '___handleScroll__REACT_HOT_LOADER__',
    value: function ___handleScroll__REACT_HOT_LOADER__(event) {
      var _this3 = this;

      if (event.target.scrollLeft >= 0 && this._headers != null) {
        this._headers.scrollLeft = event.target.scrollLeft;
      }

      function updateOffset(target) {
        var _this2 = this;

        var scrollTop = target.scrollTop;
        this.setState(function (prevState) {
          var offset = Math.floor(scrollTop / prevState.rowHeight);
          var scroll = prevState.scroll.setOffset(offset);

          if (_this2.props.onScrollStateUpdate != null && scroll !== prevState.scroll) {
            _this2.props.onScrollStateUpdate(scroll.toJS(), _this2.state.viewSizeInRows);
          }

          return { scroll: scroll };
        });

        this._ticking = false;
      }

      if (!this._ticking) {
        (function () {
          var target = event.target;
          window.requestAnimationFrame(function () {
            (0, _throttle3.default)(updateOffset.bind(_this3), _constants.SCROLLING_REFRESH_RATE)(target);
          });
        })();
      }
      this._ticking = true;
    }
  }, {
    key: '_hasRows',
    value: function _hasRows() {
      return this.props.rows != null && this.props.rows.size !== 0;
    }
  }, {
    key: '_renderHeaders',
    value: function _renderHeaders() {
      var _this4 = this;

      return _react2.default.createElement(
        'div',
        {
          style: { overflow: 'hidden', width: '100%' },
          ref: function ref(n) {
            _this4._headers = n;
          }
        },
        _react2.default.createElement(_ScrollingTableHeaders2.default, {
          headers: this.state.headers,
          onHeaderUpdate: this._handleHeaderUpdate
        })
      );
    }
  }, {
    key: '_renderScrollingTable',
    value: function _renderScrollingTable() {
      return _react2.default.createElement(
        'div',
        {
          style: (0, _extends3.default)({}, _ScrollingTable.CONTAINER_STYLES, { height: this.state.tableBodyHeight }),
          onScroll: this._handleScroll
        },
        _react2.default.createElement(_ScrollingTableContainer2.default, {
          headers: this.state.headers,
          loading: this.props.loading,
          viewSizeInRows: this.state.viewSizeInRows,
          rowHeight: this.state.rowHeight,
          rows: this.props.rows,
          scrollState: this.state.scroll,
          totalRows: this.props.totalRows || this.props.rows.size
        })
      );
    }
  }, {
    key: '_renderScrollingTableSizing',
    value: function _renderScrollingTableSizing() {
      if (!this._hasRows()) {
        return null;
      }
      var _props = this.props,
          rows = _props.rows,
          width = _props.width,
          height = _props.height;


      return _react2.default.createElement(_ScrollingTableSizing2.default, {
        rows: rows,
        headers: this.state.headers,
        width: width === 'auto' ? '100%' : width,
        height: height === 'auto' ? '100%' : height,
        onResize: this._onResize,
        onHeaderUpdate: this._handleHeaderUpdate
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var width = this.props.width;


      return _react2.default.createElement(
        'div',
        {
          style: {
            position: 'relative',
            width: width === 'auto' ? '100%' : width
          },
          className: 'scrolling-table'
        },
        _react2.default.createElement(
          'style',
          null,
          _ScrollingTable3.default
        ),
        this._renderHeaders(),
        this._renderScrollingTable(),
        this._renderScrollingTableSizing()
      );
    }
  }]);
  return ScrollingTable;
}(_react.Component), _class.defaultProps = {
  height: 'auto',
  width: 'auto'
}, _temp);
ScrollingTable.propTypes = {
  currentRow: require('react').PropTypes.number,
  headers: require('react').PropTypes.arrayOf(require('react').PropTypes.any).isRequired,
  height: require('react').PropTypes.oneOfType([require('react').PropTypes.number, require('react').PropTypes.oneOf(['auto'])]).isRequired,
  rows: babelPluginFlowReactPropTypes_proptype_Rows,
  loading: require('react').PropTypes.bool.isRequired,
  totalRows: require('react').PropTypes.number,
  width: require('react').PropTypes.oneOfType([require('react').PropTypes.number, require('react').PropTypes.oneOf(['auto'])]).isRequired,
  onScrollStateUpdate: require('react').PropTypes.func,
  onHeaderUpdate: require('react').PropTypes.func,
  onInit: require('react').PropTypes.func
};
exports.default = ScrollingTable;
;

var _temp2 = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(ScrollingTable, 'ScrollingTable', 'src/scrolling-table/ScrollingTable.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,