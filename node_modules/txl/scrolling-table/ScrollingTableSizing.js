'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ = require('.');

var _forEachChild = require('./utils/forEachChild');

var _forEachChild2 = _interopRequireDefault(_forEachChild);

var _ScrollingTableRow = require('./ScrollingTableRow');

var _ScrollingTableRow2 = _interopRequireDefault(_ScrollingTableRow);

var _constants = require('./constants');

var _ScrollingTable = require('./ScrollingTable.style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_Headers = require('./constants').babelPluginFlowReactPropTypes_proptype_Headers || require('react').PropTypes.any;

var babelPluginFlowReactPropTypes_proptype_OnHeaderUpdate = require('./constants').babelPluginFlowReactPropTypes_proptype_OnHeaderUpdate || require('react').PropTypes.any;

var babelPluginFlowReactPropTypes_proptype_OnResize = require('./constants').babelPluginFlowReactPropTypes_proptype_OnResize || require('react').PropTypes.any;

/**
 * This is a hidden table rendering that updates the size of the columns
 * when a resize event is triggered.
 */
var ScrollingTableSizing = function (_Component) {
  (0, _inherits3.default)(ScrollingTableSizing, _Component);

  function ScrollingTableSizing(props, context) {
    (0, _classCallCheck3.default)(this, ScrollingTableSizing);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ScrollingTableSizing.__proto__ || (0, _getPrototypeOf2.default)(ScrollingTableSizing)).call(this, props, context));

    _this.state = {
      headerHeight: 0,
      ready: false
    };

    _this._ticking = false;
    _this._handleResizing = function () {
      if (!_this._ticking) {
        window.requestAnimationFrame((0, _throttle3.default)(function () {
          _this._handleColumnWidth();
        }, _constants.RESIZE_REFRESH_RATE));
      }
      _this._ticking = true;
    };
    return _this;
  }

  (0, _createClass3.default)(ScrollingTableSizing, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._handleResizing();

      if (this.props.width === 'auto') {
        window.addEventListener('resize', this._handleResizing);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.width === 'auto') {
        window.removeEventListener('resize', this._handleResizing);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props = this.props,
          width = _props.width,
          height = _props.height;

      if (nextProps.width !== width || nextProps.height !== height) {
        this._handleResizing();
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (this.props.rows.size === 0 && nextProps.rows.size !== 0) {
        return true;
      }

      if (this.props.height !== nextProps.height) {
        return true;
      }

      if (this.props.width !== nextProps.width) {
        return true;
      }

      if (this.state.headerHeight !== nextState.headerHeight) {
        return true;
      }

      return this.props.headers !== nextProps.headers;
    }
  }, {
    key: '_renderColumns',
    value: function _renderColumns() {
      var _this2 = this;

      return this.props.headers.toArray().map(function (header) {
        var style = (0, _extends3.default)({}, _ScrollingTable.HEADER_CELL_CONTAINER_STYLES);

        style.minWidth = header.minWidth;
        if (header.width != null && _this2.state.ready) {
          style.width = header.width;
        }

        var HeaderTemplate = header.template;

        return _react2.default.createElement(
          'th',
          { style: _ScrollingTable.HEADER_CELL_SIZING_STYLES, key: header.title },
          _react2.default.createElement(
            'div',
            { style: style },
            _react2.default.createElement(HeaderTemplate, header.toJS())
          )
        );
      });
    }
  }, {
    key: '_renderRows',
    value: function _renderRows() {
      var _this3 = this;

      return this.props.rows.valueSeq().take(_constants.ON_RESIZE_ROW_COUNT).toArray().map(function (row, rowNumber) {
        var headers = _this3.props.headers;

        return _react2.default.createElement(_ScrollingTableRow2.default, {
          headers: headers,
          data: row.data,
          rowNumber: rowNumber,
          key: rowNumber
        });
      });
    }
  }, {
    key: '_handleHeaderWidths',
    value: function _handleHeaderWidths(headerElems) {
      if (headerElems == null || this.state.ready) {
        return;
      }

      var widths = [];
      (0, _forEachChild2.default)(headerElems.firstElementChild, function (cell) {
        widths.push(cell.firstElementChild.offsetWidth);
      });

      var updateWidth = function updateWidth(header, i) {
        if (header.minWidth !== widths[i]) {
          if (widths[i] < header.width) {
            return header.set('minWidth', widths[i]);
          }

          return header.set('minWidth', header.width);
        }

        return header;
      };
      var update = function update(headers) {
        return headers.map(updateWidth);
      };
      this.setState({ headerHeight: headerElems.offsetHeight, ready: true });
      this.props.onHeaderUpdate(update);
    }
  }, {
    key: '_handleColumnWidth',
    value: function _handleColumnWidth() {
      var firstRow = this._rows && this._rows.firstElementChild;

      var widths = [];
      (0, _forEachChild2.default)(firstRow, function (cell) {
        widths.push(cell.clientWidth);
      });

      var updateWidth = function updateWidth(header, i) {
        return header.width !== widths[i] ? header.set('width', widths[i]) : header;
      };

      var update = function update(headers) {
        return headers.map(updateWidth);
      };

      if (firstRow != null && firstRow instanceof HTMLElement) {
        var rowHeight = firstRow.offsetHeight;
        var maxRows = Math.ceil(this._container.offsetHeight / rowHeight);
        this.props.onHeaderUpdate(update);
        this.props.onResize(rowHeight, maxRows, this.props.height - this.state.headerHeight);
      }

      this._ticking = false;
    }
  }, {
    key: '_renderBody',
    value: function _renderBody() {
      var _this4 = this;

      if (!this.state.ready) {
        return null;
      }

      return _react2.default.createElement(
        'tbody',
        { ref: function ref(r) {
            _this4._rows = r;
          } },
        this._renderRows()
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var style = (0, _extends3.default)({}, _ScrollingTable.TABLE_STYLES);

      if (!this.state.ready) {
        style.minWidth = 'auto';
      }

      return _react2.default.createElement(
        'div',
        {
          ref: function ref(c) {
            _this5._container = c;
          },
          style: _ScrollingTable.SIZING_CONTAINER_STYLES
        },
        _react2.default.createElement(
          'div',
          { style: _ScrollingTable.SIZING_STYLES },
          _react2.default.createElement(
            'table',
            { cellPadding: 0, cellSpacing: 0, style: style },
            _react2.default.createElement(
              'thead',
              {
                ref: function ref(e) {
                  _this5._handleHeaderWidths(e);
                }
              },
              _react2.default.createElement(
                'tr',
                { style: _ScrollingTable.SIZING_HEADER_STYLES },
                this._renderColumns()
              )
            ),
            this._renderBody()
          )
        )
      );
    }
  }]);
  return ScrollingTableSizing;
}(_react.Component);

ScrollingTableSizing.propTypes = {
  headers: babelPluginFlowReactPropTypes_proptype_Headers,
  rows: require('react').PropTypes.any.isRequired,
  height: require('react').PropTypes.oneOfType([require('react').PropTypes.number, require('react').PropTypes.string]).isRequired,
  width: require('react').PropTypes.oneOfType([require('react').PropTypes.number, require('react').PropTypes.string]).isRequired,
  onResize: babelPluginFlowReactPropTypes_proptype_OnResize,
  onHeaderUpdate: babelPluginFlowReactPropTypes_proptype_OnHeaderUpdate
};
exports.default = ScrollingTableSizing;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(ScrollingTableSizing, 'ScrollingTableSizing', 'src/scrolling-table/ScrollingTableSizing.jsx');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,