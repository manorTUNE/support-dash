'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _immutable = require('immutable');

var _Row = require('./Row');

var _Row2 = _interopRequireDefault(_Row);

var _Header = require('./Header');

var _Header2 = _interopRequireDefault(_Header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rowMap = function rowMap(rows) {
  var output = {};

  for (var i = 0; i < rows.length; i++) {
    var row = new _Row2.default({ data: rows[i] });
    output[row.id] = row;
  }

  return (0, _immutable.Map)(output);
};

var Rows = function () {
  function Rows(rows) {
    (0, _classCallCheck3.default)(this, Rows);

    if (_immutable.Map.isMap(rows)) {
      this._rows = rows;
    } else {
      this._rows = (0, _immutable.Map)();
      return this.insert(rows);
    }
  }

  (0, _createClass3.default)(Rows, [{
    key: 'insert',
    value: function insert(rows) {
      var insert = Array.isArray(rows) ? rowMap(rows) : rows;

      return new Rows(this._rows.merge(insert));
    }
  }, {
    key: 'get',
    value: function get() {
      return this._rows;
    }
  }, {
    key: 'size',
    value: function size() {
      return this._rows.size;
    }
  }, {
    key: 'sortBy',
    value: function sortBy(headers) {
      var sortBy = function sortBy(field) {
        return function (rows) {
          var sorted = rows.sortBy(function (row) {
            return row.data.get(field.key);
          }, field.sortBy);

          if (field.sortDirection === 'asc') {
            sorted = sorted.reverse();
          }

          return sorted.groupBy(function (r) {
            return r.data.get(field.key);
          });
        };
      };

      var sort = function sort(fields, groups) {
        if (!fields.size) {
          return groups;
        }

        return groups.map(function (rows) {
          return sort(fields.rest(), sortBy(fields.first())(rows));
        });
      };

      var fields = (0, _immutable.List)(headers).sortBy(function (h) {
        return h.order;
      }).filter(function (h) {
        return h.sortable;
      }).filter(function (h) {
        return h.sortDirection !== 'none';
      });

      if (!fields.size) {
        return this._rows;
      }

      var toMap = function toMap(rows) {
        var output = {};
        for (var i = 0; i < rows.size; i++) {
          output[i] = rows.get(i);
        }

        return (0, _immutable.Map)(output);
      };

      var rows = this._rows.valueSeq();
      var groups = sort(fields, (0, _immutable.List)([rows]));
      return toMap(groups.flatten(fields.size + 1));
    }
  }]);
  return Rows;
}();

exports.default = Rows;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(rowMap, 'rowMap', 'src/scrolling-table/records/Rows.js');

  __REACT_HOT_LOADER__.register(Rows, 'Rows', 'src/scrolling-table/records/Rows.js');
}();

;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JvbGxpbmctdGFibGUvcmVjb3Jkcy9Sb3dzLmpzIl0sIm5hbWVzIjpbInJvd01hcCIsInJvd3MiLCJvdXRwdXQiLCJpIiwibGVuZ3RoIiwicm93IiwiZGF0YSIsImlkIiwiUm93cyIsImlzTWFwIiwiX3Jvd3MiLCJpbnNlcnQiLCJBcnJheSIsImlzQXJyYXkiLCJtZXJnZSIsInNpemUiLCJoZWFkZXJzIiwic29ydEJ5Iiwic29ydGVkIiwiZ2V0IiwiZmllbGQiLCJrZXkiLCJzb3J0RGlyZWN0aW9uIiwicmV2ZXJzZSIsImdyb3VwQnkiLCJyIiwic29ydCIsImZpZWxkcyIsImdyb3VwcyIsIm1hcCIsInJlc3QiLCJmaXJzdCIsImgiLCJvcmRlciIsImZpbHRlciIsInNvcnRhYmxlIiwidG9NYXAiLCJ2YWx1ZVNlcSIsImZsYXR0ZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFNBQVMsU0FBVEEsTUFBUyxDQUFDQyxJQUFELEVBQVU7QUFDdkIsTUFBTUMsU0FBUyxFQUFmOztBQUVBLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixLQUFLRyxNQUF6QixFQUFpQ0QsR0FBakMsRUFBc0M7QUFDcEMsUUFBTUUsTUFBTSxrQkFBUSxFQUFFQyxNQUFNTCxLQUFLRSxDQUFMLENBQVIsRUFBUixDQUFaO0FBQ0FELFdBQU9HLElBQUlFLEVBQVgsSUFBaUJGLEdBQWpCO0FBQ0Q7O0FBRUQsU0FBTyxvQkFBSUgsTUFBSixDQUFQO0FBQ0QsQ0FURDs7SUFXcUJNLEk7QUFDbkIsZ0JBQVlQLElBQVosRUFBaUQ7QUFBQTs7QUFDL0MsUUFBSSxlQUFJUSxLQUFKLENBQVVSLElBQVYsQ0FBSixFQUFxQjtBQUNuQixXQUFLUyxLQUFMLEdBQWFULElBQWI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLUyxLQUFMLEdBQWEscUJBQWI7QUFDQSxhQUFPLEtBQUtDLE1BQUwsQ0FBWVYsSUFBWixDQUFQO0FBQ0Q7QUFDRjs7OzsyQkFFTUEsSSxFQUFxQztBQUMxQyxVQUFNVSxTQUFTQyxNQUFNQyxPQUFOLENBQWNaLElBQWQsSUFDYkQsT0FBT0MsSUFBUCxDQURhLEdBRWJBLElBRkY7O0FBSUEsYUFBTyxJQUFJTyxJQUFKLENBQVMsS0FBS0UsS0FBTCxDQUFXSSxLQUFYLENBQWlCSCxNQUFqQixDQUFULENBQVA7QUFDRDs7OzBCQUVLO0FBQ0osYUFBTyxLQUFLRCxLQUFaO0FBQ0Q7OzsyQkFFTTtBQUNMLGFBQU8sS0FBS0EsS0FBTCxDQUFXSyxJQUFsQjtBQUNEOzs7MkJBRU1DLE8sRUFBaUM7QUFDdEMsVUFBTUMsU0FBUyxTQUFUQSxNQUFTO0FBQUEsZUFBUyxVQUFDaEIsSUFBRCxFQUFVO0FBQ2hDLGNBQUlpQixTQUFTakIsS0FDVmdCLE1BRFUsQ0FFVDtBQUFBLG1CQUFPWixJQUFJQyxJQUFKLENBQVNhLEdBQVQsQ0FBYUMsTUFBTUMsR0FBbkIsQ0FBUDtBQUFBLFdBRlMsRUFHVEQsTUFBTUgsTUFIRyxDQUFiOztBQU1BLGNBQUlHLE1BQU1FLGFBQU4sS0FBd0IsS0FBNUIsRUFBbUM7QUFDakNKLHFCQUFTQSxPQUFPSyxPQUFQLEVBQVQ7QUFDRDs7QUFFRCxpQkFBT0wsT0FBT00sT0FBUCxDQUFlO0FBQUEsbUJBQUtDLEVBQUVuQixJQUFGLENBQU9hLEdBQVAsQ0FBV0MsTUFBTUMsR0FBakIsQ0FBTDtBQUFBLFdBQWYsQ0FBUDtBQUNELFNBWmM7QUFBQSxPQUFmOztBQWNBLFVBQU1LLE9BQU8sU0FBUEEsSUFBTyxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBb0I7QUFDL0IsWUFBSSxDQUFDRCxPQUFPWixJQUFaLEVBQWtCO0FBQ2hCLGlCQUFPYSxNQUFQO0FBQ0Q7O0FBRUQsZUFBT0EsT0FDSkMsR0FESSxDQUNBO0FBQUEsaUJBQ0hILEtBQUtDLE9BQU9HLElBQVAsRUFBTCxFQUFvQmIsT0FBT1UsT0FBT0ksS0FBUCxFQUFQLEVBQXVCOUIsSUFBdkIsQ0FBcEIsQ0FERztBQUFBLFNBREEsQ0FBUDtBQUlELE9BVEQ7O0FBV0EsVUFBTTBCLFNBQVMscUJBQUtYLE9BQUwsRUFDWkMsTUFEWSxDQUNMO0FBQUEsZUFBS2UsRUFBRUMsS0FBUDtBQUFBLE9BREssRUFFWkMsTUFGWSxDQUVMO0FBQUEsZUFBS0YsRUFBRUcsUUFBUDtBQUFBLE9BRkssRUFHWkQsTUFIWSxDQUdMO0FBQUEsZUFBS0YsRUFBRVYsYUFBRixLQUFvQixNQUF6QjtBQUFBLE9BSEssQ0FBZjs7QUFLQSxVQUFJLENBQUNLLE9BQU9aLElBQVosRUFBa0I7QUFDaEIsZUFBTyxLQUFLTCxLQUFaO0FBQ0Q7O0FBRUQsVUFBTTBCLFFBQVEsU0FBUkEsS0FBUSxDQUFDbkMsSUFBRCxFQUFVO0FBQ3RCLFlBQU1DLFNBQVMsRUFBZjtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixLQUFLYyxJQUF6QixFQUErQlosR0FBL0IsRUFBb0M7QUFDbENELGlCQUFPQyxDQUFQLElBQVlGLEtBQUtrQixHQUFMLENBQVNoQixDQUFULENBQVo7QUFDRDs7QUFFRCxlQUFPLG9CQUFJRCxNQUFKLENBQVA7QUFDRCxPQVBEOztBQVNBLFVBQU1ELE9BQU8sS0FBS1MsS0FBTCxDQUFXMkIsUUFBWCxFQUFiO0FBQ0EsVUFBTVQsU0FBU0YsS0FBS0MsTUFBTCxFQUFhLHFCQUFLLENBQUMxQixJQUFELENBQUwsQ0FBYixDQUFmO0FBQ0EsYUFBT21DLE1BQU1SLE9BQU9VLE9BQVAsQ0FBZVgsT0FBT1osSUFBUCxHQUFjLENBQTdCLENBQU4sQ0FBUDtBQUNEOzs7OztrQkF6RWtCUCxJOzs7Ozs7OztnQ0FYZlIsTTs7Z0NBV2VRLEkiLCJmaWxlIjoiUm93cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpc3QsIE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5cbmltcG9ydCBSb3cgZnJvbSAnLi9Sb3cnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlcic7XG5cbmNvbnN0IHJvd01hcCA9IChyb3dzKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IG5ldyBSb3coeyBkYXRhOiByb3dzW2ldIH0pO1xuICAgIG91dHB1dFtyb3cuaWRdID0gcm93O1xuICB9XG5cbiAgcmV0dXJuIE1hcChvdXRwdXQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm93cyB7XG4gIGNvbnN0cnVjdG9yKHJvd3M6IEFycmF5PFJvdyB8IEFycmF5PGFueT4+IHwgTWFwKSB7XG4gICAgaWYgKE1hcC5pc01hcChyb3dzKSkge1xuICAgICAgdGhpcy5fcm93cyA9IHJvd3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jvd3MgPSBNYXAoKTtcbiAgICAgIHJldHVybiB0aGlzLmluc2VydChyb3dzKTtcbiAgICB9XG4gIH1cblxuICBpbnNlcnQocm93czogQXJyYXk8Um93IHwgQXJyYXk8YW55Pj4gfCBNYXApIHtcbiAgICBjb25zdCBpbnNlcnQgPSBBcnJheS5pc0FycmF5KHJvd3MpID9cbiAgICAgIHJvd01hcChyb3dzKSA6XG4gICAgICByb3dzO1xuXG4gICAgcmV0dXJuIG5ldyBSb3dzKHRoaXMuX3Jvd3MubWVyZ2UoaW5zZXJ0KSk7XG4gIH1cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvd3M7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9yb3dzLnNpemU7XG4gIH1cblxuICBzb3J0QnkoaGVhZGVyczogQXJyYXk8SGVhZGVyIHwgT2JqZWN0Pikge1xuICAgIGNvbnN0IHNvcnRCeSA9IGZpZWxkID0+IChyb3dzKSA9PiB7XG4gICAgICBsZXQgc29ydGVkID0gcm93c1xuICAgICAgICAuc29ydEJ5KFxuICAgICAgICAgIHJvdyA9PiByb3cuZGF0YS5nZXQoZmllbGQua2V5KSxcbiAgICAgICAgICBmaWVsZC5zb3J0QnlcbiAgICAgICAgKTtcblxuICAgICAgaWYgKGZpZWxkLnNvcnREaXJlY3Rpb24gPT09ICdhc2MnKSB7XG4gICAgICAgIHNvcnRlZCA9IHNvcnRlZC5yZXZlcnNlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzb3J0ZWQuZ3JvdXBCeShyID0+IHIuZGF0YS5nZXQoZmllbGQua2V5KSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNvcnQgPSAoZmllbGRzLCBncm91cHMpID0+IHtcbiAgICAgIGlmICghZmllbGRzLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGdyb3VwcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdyb3Vwc1xuICAgICAgICAubWFwKHJvd3MgPT5cbiAgICAgICAgICBzb3J0KGZpZWxkcy5yZXN0KCksIHNvcnRCeShmaWVsZHMuZmlyc3QoKSkocm93cykpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZpZWxkcyA9IExpc3QoaGVhZGVycylcbiAgICAgIC5zb3J0QnkoaCA9PiBoLm9yZGVyKVxuICAgICAgLmZpbHRlcihoID0+IGguc29ydGFibGUpXG4gICAgICAuZmlsdGVyKGggPT4gaC5zb3J0RGlyZWN0aW9uICE9PSAnbm9uZScpO1xuXG4gICAgaWYgKCFmaWVsZHMuc2l6ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvd3M7XG4gICAgfVxuXG4gICAgY29uc3QgdG9NYXAgPSAocm93cykgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3Muc2l6ZTsgaSsrKSB7XG4gICAgICAgIG91dHB1dFtpXSA9IHJvd3MuZ2V0KGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWFwKG91dHB1dCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLl9yb3dzLnZhbHVlU2VxKCk7XG4gICAgY29uc3QgZ3JvdXBzID0gc29ydChmaWVsZHMsIExpc3QoW3Jvd3NdKSk7XG4gICAgcmV0dXJuIHRvTWFwKGdyb3Vwcy5mbGF0dGVuKGZpZWxkcy5zaXplICsgMSkpO1xuICB9XG59XG4iXX0=