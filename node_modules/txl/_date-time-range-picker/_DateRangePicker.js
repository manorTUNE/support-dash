'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TIME_QUERY_FORMAT = exports.DATE_QUERY_FORMAT = exports.DATE_RANGE_FORMAT = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _desc, _value, _class2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _Base = require('../base/Base');

var _DateTimeRangePicker = require('./DateTimeRangePicker.style');

var _theme = require('../styles/theme');

var _Button = require('../buttons/Button');

var _Button2 = _interopRequireDefault(_Button);

var _ButtonSelect = require('../dropdowns/ButtonSelect');

var _ButtonSelect2 = _interopRequireDefault(_ButtonSelect);

var _DatePicker = require('../input-fields/DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _DateTimeConstants = require('./_DateTimeConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var DATE_RANGE_FORMAT = 'll';
var DATE_QUERY_FORMAT = 'YYYY-MM-DD';
var TIME_QUERY_FORMAT = 'HH:mm:ss';
var DATE_VALIDATION = 'Please select a date range in chronological order';
var CUSTOM_PRESET_KEY = 'custom';

exports.DATE_RANGE_FORMAT = DATE_RANGE_FORMAT;
exports.DATE_QUERY_FORMAT = DATE_QUERY_FORMAT;
exports.TIME_QUERY_FORMAT = TIME_QUERY_FORMAT;

var TxlDateRangePicker = (0, _radium2.default)(_class = (_class2 = function (_React$Component) {
  (0, _inherits3.default)(TxlDateRangePicker, _React$Component);

  function TxlDateRangePicker() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, TxlDateRangePicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TxlDateRangePicker.__proto__ || (0, _getPrototypeOf2.default)(TxlDateRangePicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      customDateRangeEnd: (0, _moment2.default)(_this.props.items.endDateTime).format(DATE_RANGE_FORMAT),
      customDateRangeStart: (0, _moment2.default)(_this.props.items.startDateTime).format(DATE_RANGE_FORMAT),
      previousPreset: _this.props.items.preset,
      selectedDateRangeEnd: (0, _moment2.default)(_this.props.items.endDateTime).format(DATE_QUERY_FORMAT),
      selectedDateRangeStart: (0, _moment2.default)(_this.props.items.startDateTime).format(DATE_QUERY_FORMAT),
      selectedPreset: _this.props.items.preset,
      showCustomDatePicker: false
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(TxlDateRangePicker, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._checkPreset();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _isEqual2.default)(this.props, nextProps)) {
        this.setState({
          customDateRangeEnd: (0, _moment2.default)(nextProps.items.endDateTime).format(DATE_RANGE_FORMAT),
          customDateRangeStart: (0, _moment2.default)(nextProps.items.startDateTime).format(DATE_RANGE_FORMAT),
          previousPreset: this.props.items.preset,
          selectedDateRangeEnd: (0, _moment2.default)(nextProps.items.endDateTime).format(DATE_QUERY_FORMAT),
          selectedDateRangeStart: (0, _moment2.default)(nextProps.items.startDateTime).format(DATE_QUERY_FORMAT),
          selectedPreset: nextProps.items.preset
        }, this._checkPreset);
      }
    }
  }, {
    key: '_isDateRangeValid',
    value: function _isDateRangeValid(start, end) {
      return (0, _moment2.default)(end, DATE_RANGE_FORMAT).diff((0, _moment2.default)(start, DATE_RANGE_FORMAT)) >= 0;
    }
  }, {
    key: '_togglePresets',
    value: function _togglePresets() {
      this.props.updateDropdown({ open: !this.props.open });
    }
  }, {
    key: '_handlePresetSelect',
    value: function _handlePresetSelect(item) {
      var _this2 = this;

      var selectedPreset = this.state.selectedPreset;


      this._togglePresets();

      if (item.value === 'custom') {
        this.setState({
          previousPreset: selectedPreset,
          selectedPreset: item,
          showCustomDatePicker: true
        }, this._updateChange);
      } else {
        this.setState({
          showCustomDatePicker: true
        }, function () {
          _this2.setState({
            customDateRangeEnd: item.endDate.format(DATE_RANGE_FORMAT),
            customDateRangeStart: item.startDate.format(DATE_RANGE_FORMAT),
            previousPreset: selectedPreset,
            selectedDateRangeEnd: item.endDate.format(DATE_QUERY_FORMAT),
            selectedDateRangeStart: item.startDate.format(DATE_QUERY_FORMAT),
            selectedPreset: item,
            showCustomDatePicker: false
          }, function () {
            _this2._checkPreset();
            _this2._updateChange();
          });
        });
      }
    }
  }, {
    key: '_checkPreset',
    value: function _checkPreset() {
      var selectedPreset = this.state.selectedPreset;

      var rangeDates = selectedPreset.range.split(' - ');
      if (rangeDates[0] === rangeDates[1]) {
        selectedPreset.range = rangeDates[0];
        this.setState({ selectedPreset: selectedPreset });
      }
    }
  }, {
    key: '_cancelCustomDateRange',
    value: function _cancelCustomDateRange() {
      var preset = this.state.previousPreset;
      if (!preset.range.includes('-')) {
        preset.range = preset.range + ' - ' + preset.range;
      }

      this.setState({
        customDateRangeEnd: (0, _moment2.default)(this.state.selectedDateRangeEnd).format(DATE_RANGE_FORMAT),
        customDateRangeStart: (0, _moment2.default)(this.state.selectedDateRangeStart).format(DATE_RANGE_FORMAT),
        selectedPreset: preset,
        showCustomDatePicker: !this.state.showCustomDatePicker
      }, this._checkPreset);
    }
  }, {
    key: '_applyCustomDateRange',
    value: function _applyCustomDateRange() {
      var _this3 = this;

      var _state = this.state,
          customDateRangeStart = _state.customDateRangeStart,
          customDateRangeEnd = _state.customDateRangeEnd,
          showCustomDatePicker = _state.showCustomDatePicker;


      var startDate = (0, _moment2.default)(customDateRangeStart, DATE_RANGE_FORMAT);
      var endDate = (0, _moment2.default)(customDateRangeEnd, DATE_RANGE_FORMAT);
      var formattedStartDate = startDate.format(DATE_RANGE_FORMAT);
      var formattedEndDate = endDate.format(DATE_RANGE_FORMAT);

      this.setState({
        selectedDateRangeEnd: endDate.format(DATE_QUERY_FORMAT),
        selectedDateRangeStart: startDate.format(DATE_QUERY_FORMAT)
      }, function () {
        // TODO: find another way to set preset by using state.selectedPreset
        var preset = {
          endDate: endDate,
          label: 'Custom date range',
          range: formattedStartDate + ' - ' + formattedEndDate,
          startDate: startDate,
          value: 'custom'
        };
        _this3.setState({
          selectedPreset: preset,
          showCustomDatePicker: !showCustomDatePicker
        }, _this3._updateChange);
      });
    }
  }, {
    key: '_getDateRangeOptions',
    value: function _getDateRangeOptions() {
      var _this4 = this;

      return (this.props.presets || (0, _DateTimeConstants.DATE_RANGE_PRESETS)()).map(function (preset) {
        var startDate = (0, _moment2.default)(preset.startDate).format(DATE_RANGE_FORMAT);
        var endDate = (0, _moment2.default)(preset.endDate).format(DATE_RANGE_FORMAT);
        if (preset.key === CUSTOM_PRESET_KEY && _this4.state) {
          startDate = (0, _moment2.default)(_this4.state.selectedDateRangeStart).format(DATE_RANGE_FORMAT);
          endDate = (0, _moment2.default)(_this4.state.selectedDateRangeEnd).format(DATE_RANGE_FORMAT);
        }
        return {
          endDate: (0, _moment2.default)(endDate, DATE_RANGE_FORMAT),
          label: preset.label,
          range: startDate + ' - ' + endDate,
          startDate: (0, _moment2.default)(startDate, DATE_RANGE_FORMAT),
          value: preset.key
        };
      });
    }
  }, {
    key: '_handleCustomStartDateChange',
    value: function _handleCustomStartDateChange(date) {
      this.setState({
        customDateRangeStart: (0, _moment2.default)(date.value, DATE_RANGE_FORMAT).format(DATE_RANGE_FORMAT)
      });
    }
  }, {
    key: '_handleCustomEndDateChange',
    value: function _handleCustomEndDateChange(date) {
      this.setState({
        customDateRangeEnd: (0, _moment2.default)(date.value, DATE_RANGE_FORMAT).format(DATE_RANGE_FORMAT)
      });
    }
  }, {
    key: '_updateChange',
    value: function _updateChange() {
      var _state2 = this.state,
          selectedDateRangeStart = _state2.selectedDateRangeStart,
          selectedDateRangeEnd = _state2.selectedDateRangeEnd,
          selectedPreset = _state2.selectedPreset;
      var _props = this.props,
          items = _props.items,
          onChange = _props.onChange;

      var startTime = (0, _moment2.default)(items.startDateTime).format(TIME_QUERY_FORMAT);
      var endTime = (0, _moment2.default)(items.endDateTime).format(TIME_QUERY_FORMAT);
      items.preset = selectedPreset;
      items.startDateTime = selectedDateRangeStart + ' ' + startTime;
      items.endDateTime = selectedDateRangeEnd + ' ' + endTime;
      onChange(items);
    }
  }, {
    key: '_renderDateRangeOptions',
    value: function _renderDateRangeOptions() {
      var _state3 = this.state,
          customDateRangeStart = _state3.customDateRangeStart,
          customDateRangeEnd = _state3.customDateRangeEnd,
          selectedPreset = _state3.selectedPreset,
          showCustomDatePicker = _state3.showCustomDatePicker;
      var _props2 = this.props,
          buttonItems = _props2.buttonItems,
          open = _props2.open;


      var COLOR_APP_THEME = (0, _theme.determineColorAppTheme)(this.context.txlAppTheme);
      var BUTTON_CANCEL = {
        color: COLOR_APP_THEME['500']
      };

      if (showCustomDatePicker) {
        var checkValid = this._isDateRangeValid(customDateRangeStart, customDateRangeEnd);

        return _react2.default.createElement(
          'div',
          { style: _DateTimeRangePicker.CUSTOM_DATE_RANGE },
          _react2.default.createElement(
            'div',
            { style: _DateTimeRangePicker.CUSTOM_DATE_CONTAINER },
            _react2.default.createElement(_DatePicker2.default, {
              isValid: checkValid,
              onChange: this._handleCustomStartDateChange,
              pattern: DATE_RANGE_FORMAT,
              validationText: ' ',
              value: customDateRangeStart
            })
          ),
          _react2.default.createElement(
            'span',
            { style: _DateTimeRangePicker.CUSTOM_DATE_RANGE_TEXT },
            'to'
          ),
          _react2.default.createElement(
            'div',
            { style: _DateTimeRangePicker.CUSTOM_DATE_CONTAINER },
            _react2.default.createElement(_DatePicker2.default, {
              isValid: checkValid,
              onChange: this._handleCustomEndDateChange,
              pattern: DATE_RANGE_FORMAT,
              validationText: ' ',
              value: customDateRangeEnd
            })
          ),
          _react2.default.createElement(
            'div',
            { style: _DateTimeRangePicker.BUTTON },
            _react2.default.createElement(
              _Button2.default,
              {
                disabled: !checkValid,
                onClick: this._applyCustomDateRange,
                variant: 'accent'
              },
              'Apply'
            )
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              _Button2.default,
              {
                onClick: this._cancelCustomDateRange,
                variant: 'plain',
                _style: BUTTON_CANCEL
              },
              'Cancel'
            )
          )
        );
      }

      return _react2.default.createElement(
        'div',
        { style: _DateTimeRangePicker.BUTTON_STYLE },
        _react2.default.createElement(_ButtonSelect2.default, {
          buttonText: selectedPreset.range,
          dropdownAttachmentLocation: 'left',
          items: this._getDateRangeOptions(),
          onButtonClick: this._togglePresets,
          onItemSelect: this._handlePresetSelect,
          open: open,
          value: selectedPreset.value
        }),
        buttonItems && buttonItems.map(function (item, index) {
          return _react2.default.createElement(
            'div',
            {
              className: 'actionButtons',
              key: index,
              style: _DateTimeRangePicker.BUTTON
            },
            item
          );
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _state4 = this.state,
          customDateRangeStart = _state4.customDateRangeStart,
          customDateRangeEnd = _state4.customDateRangeEnd;


      return _react2.default.createElement(
        'div',
        { 'data-component': 'TxlDateRangePicker' },
        _react2.default.createElement(
          'div',
          { style: _DateTimeRangePicker.PRESET_CONTAINER },
          this._renderDateRangeOptions(),
          !this._isDateRangeValid(customDateRangeStart, customDateRangeEnd) && _react2.default.createElement(
            'div',
            { style: _DateTimeRangePicker.VALIDATION },
            _react2.default.createElement(
              'span',
              null,
              DATE_VALIDATION
            )
          )
        )
      );
    }
  }]);
  return TxlDateRangePicker;
}(_react2.default.Component), (_applyDecoratedDescriptor(_class2.prototype, '_isDateRangeValid', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_isDateRangeValid'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_togglePresets', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_togglePresets'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handlePresetSelect', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handlePresetSelect'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_checkPreset', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_checkPreset'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_cancelCustomDateRange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_cancelCustomDateRange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_applyCustomDateRange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_applyCustomDateRange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_getDateRangeOptions', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_getDateRangeOptions'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleCustomStartDateChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleCustomStartDateChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_handleCustomEndDateChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_handleCustomEndDateChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_updateChange', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_updateChange'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, '_renderDateRangeOptions', [_Base.autobind], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, '_renderDateRangeOptions'), _class2.prototype)), _class2)) || _class;

TxlDateRangePicker.propTypes = {
  buttonItems: require('react').PropTypes.arrayOf(require('react').PropTypes.any),
  items: require('react').PropTypes.object.isRequired,
  onChange: require('react').PropTypes.func.isRequired,
  open: require('react').PropTypes.bool.isRequired,
  presets: require('react').PropTypes.arrayOf(require('react').PropTypes.object),
  updateDropdown: require('react').PropTypes.func.isRequired
};
exports.default = TxlDateRangePicker;


TxlDateRangePicker.defaultProps = {
  items: {},
  onChange: _Base.NOOP,
  open: false,
  updateDropdown: _Base.NOOP
};

TxlDateRangePicker.contextTypes = {
  txlAppTheme: _theme.contextThemePropType
};
;

var _temp2 = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(DATE_RANGE_FORMAT, 'DATE_RANGE_FORMAT', 'src/_date-time-range-picker/_DateRangePicker.jsx');

  __REACT_HOT_LOADER__.register(DATE_QUERY_FORMAT, 'DATE_QUERY_FORMAT', 'src/_date-time-range-picker/_DateRangePicker.jsx');

  __REACT_HOT_LOADER__.register(TIME_QUERY_FORMAT, 'TIME_QUERY_FORMAT', 'src/_date-time-range-picker/_DateRangePicker.jsx');

  __REACT_HOT_LOADER__.register(DATE_VALIDATION, 'DATE_VALIDATION', 'src/_date-time-range-picker/_DateRangePicker.jsx');

  __REACT_HOT_LOADER__.register(CUSTOM_PRESET_KEY, 'CUSTOM_PRESET_KEY', 'src/_date-time-range-picker/_DateRangePicker.jsx');

  __REACT_HOT_LOADER__.register(TxlDateRangePicker, 'TxlDateRangePicker', 'src/_date-time-range-picker/_DateRangePicker.jsx');
}();

;
//# sourceMappingURL=data:application/json;base64,